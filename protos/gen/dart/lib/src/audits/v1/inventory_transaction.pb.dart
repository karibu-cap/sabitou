// This is a generated file - do not edit.
//
// Generated from audits/v1/inventory_transaction.proto.

// @dart = 3.3

// ignore_for_file: annotate_overrides, camel_case_types, comment_references
// ignore_for_file: constant_identifier_names
// ignore_for_file: curly_braces_in_flow_control_structures
// ignore_for_file: deprecated_member_use_from_same_package, library_prefixes
// ignore_for_file: non_constant_identifier_names

import 'dart:core' as $core;

import 'package:protobuf/protobuf.dart' as $pb;

import '../../google/protobuf/timestamp.pb.dart' as $0;
import 'inventory_transaction.pbenum.dart';

export 'package:protobuf/protobuf.dart' show GeneratedMessageGenericExtensions;

export 'inventory_transaction.pbenum.dart';

/// *
///  InventoryTransaction (Journal des Mouvements)
///  Complete audit trail of every inventory change.
///  Auto-generated by all operations that affect stock.
///
///  Fix: Added batch_id for lot-specific transactions.
///
///  Example:
///    transaction_id: "TXN-2025-00123"
///    warehouse_id: "WH-001"
///    product_id: "PRD-001"
///    transaction_type: TXN_TYPE_SALE
///    quantity_change: -10
///    quantity_before: 100
///    quantity_after: 90
///    related_document_type: "DeliveryNote"
///    related_document_id: "DN-2025-001"
///    performed_by_user_id: "USR-003"
///    batch_id: "BATCH-2025-001"
class InventoryTransaction extends $pb.GeneratedMessage {
  factory InventoryTransaction({
    $core.String? documentId,
    $core.String? storeId,
    $core.String? productId,
    TransactionType? transactionType,
    $core.double? quantityChange,
    $core.double? quantityBefore,
    $core.double? quantityAfter,
    $core.String? relatedDocumentType,
    $core.String? relatedDocumentId,
    $core.String? performedByUserId,
    $0.Timestamp? transactionTime,
    $core.String? notes,
    $core.String? batchId,
  }) {
    final result = create();
    if (documentId != null) result.documentId = documentId;
    if (storeId != null) result.storeId = storeId;
    if (productId != null) result.productId = productId;
    if (transactionType != null) result.transactionType = transactionType;
    if (quantityChange != null) result.quantityChange = quantityChange;
    if (quantityBefore != null) result.quantityBefore = quantityBefore;
    if (quantityAfter != null) result.quantityAfter = quantityAfter;
    if (relatedDocumentType != null)
      result.relatedDocumentType = relatedDocumentType;
    if (relatedDocumentId != null) result.relatedDocumentId = relatedDocumentId;
    if (performedByUserId != null) result.performedByUserId = performedByUserId;
    if (transactionTime != null) result.transactionTime = transactionTime;
    if (notes != null) result.notes = notes;
    if (batchId != null) result.batchId = batchId;
    return result;
  }

  InventoryTransaction._();

  factory InventoryTransaction.fromBuffer($core.List<$core.int> data,
          [$pb.ExtensionRegistry registry = $pb.ExtensionRegistry.EMPTY]) =>
      create()..mergeFromBuffer(data, registry);
  factory InventoryTransaction.fromJson($core.String json,
          [$pb.ExtensionRegistry registry = $pb.ExtensionRegistry.EMPTY]) =>
      create()..mergeFromJson(json, registry);

  static final $pb.BuilderInfo _i = $pb.BuilderInfo(
      _omitMessageNames ? '' : 'InventoryTransaction',
      package: const $pb.PackageName(_omitMessageNames ? '' : 'audits.v1'),
      createEmptyInstance: create)
    ..aOS(1, _omitFieldNames ? '' : 'documentId')
    ..aOS(2, _omitFieldNames ? '' : 'storeId')
    ..aOS(3, _omitFieldNames ? '' : 'productId')
    ..e<TransactionType>(
        4, _omitFieldNames ? '' : 'transactionType', $pb.PbFieldType.OE,
        defaultOrMaker: TransactionType.TXN_TYPE_UNSPECIFIED,
        valueOf: TransactionType.valueOf,
        enumValues: TransactionType.values)
    ..a<$core.double>(
        5, _omitFieldNames ? '' : 'quantityChange', $pb.PbFieldType.OD)
    ..a<$core.double>(
        6, _omitFieldNames ? '' : 'quantityBefore', $pb.PbFieldType.OD)
    ..a<$core.double>(
        7, _omitFieldNames ? '' : 'quantityAfter', $pb.PbFieldType.OD)
    ..aOS(8, _omitFieldNames ? '' : 'relatedDocumentType')
    ..aOS(9, _omitFieldNames ? '' : 'relatedDocumentId')
    ..aOS(10, _omitFieldNames ? '' : 'performedByUserId')
    ..aOM<$0.Timestamp>(11, _omitFieldNames ? '' : 'transactionTime',
        subBuilder: $0.Timestamp.create)
    ..aOS(12, _omitFieldNames ? '' : 'notes')
    ..aOS(13, _omitFieldNames ? '' : 'batchId')
    ..hasRequiredFields = false;

  @$core.Deprecated('See https://github.com/google/protobuf.dart/issues/998.')
  InventoryTransaction clone() =>
      InventoryTransaction()..mergeFromMessage(this);
  @$core.Deprecated('See https://github.com/google/protobuf.dart/issues/998.')
  InventoryTransaction copyWith(void Function(InventoryTransaction) updates) =>
      super.copyWith((message) => updates(message as InventoryTransaction))
          as InventoryTransaction;

  @$core.override
  $pb.BuilderInfo get info_ => _i;

  @$core.pragma('dart2js:noInline')
  static InventoryTransaction create() => InventoryTransaction._();
  @$core.override
  InventoryTransaction createEmptyInstance() => create();
  static $pb.PbList<InventoryTransaction> createRepeated() =>
      $pb.PbList<InventoryTransaction>();
  @$core.pragma('dart2js:noInline')
  static InventoryTransaction getDefault() => _defaultInstance ??=
      $pb.GeneratedMessage.$_defaultFor<InventoryTransaction>(create);
  static InventoryTransaction? _defaultInstance;

  @$pb.TagNumber(1)
  $core.String get documentId => $_getSZ(0);
  @$pb.TagNumber(1)
  set documentId($core.String value) => $_setString(0, value);
  @$pb.TagNumber(1)
  $core.bool hasDocumentId() => $_has(0);
  @$pb.TagNumber(1)
  void clearDocumentId() => $_clearField(1);

  @$pb.TagNumber(2)
  $core.String get storeId => $_getSZ(1);
  @$pb.TagNumber(2)
  set storeId($core.String value) => $_setString(1, value);
  @$pb.TagNumber(2)
  $core.bool hasStoreId() => $_has(1);
  @$pb.TagNumber(2)
  void clearStoreId() => $_clearField(2);

  @$pb.TagNumber(3)
  $core.String get productId => $_getSZ(2);
  @$pb.TagNumber(3)
  set productId($core.String value) => $_setString(2, value);
  @$pb.TagNumber(3)
  $core.bool hasProductId() => $_has(2);
  @$pb.TagNumber(3)
  void clearProductId() => $_clearField(3);

  @$pb.TagNumber(4)
  TransactionType get transactionType => $_getN(3);
  @$pb.TagNumber(4)
  set transactionType(TransactionType value) => $_setField(4, value);
  @$pb.TagNumber(4)
  $core.bool hasTransactionType() => $_has(3);
  @$pb.TagNumber(4)
  void clearTransactionType() => $_clearField(4);

  @$pb.TagNumber(5)
  $core.double get quantityChange => $_getN(4);
  @$pb.TagNumber(5)
  set quantityChange($core.double value) => $_setDouble(4, value);
  @$pb.TagNumber(5)
  $core.bool hasQuantityChange() => $_has(4);
  @$pb.TagNumber(5)
  void clearQuantityChange() => $_clearField(5);

  @$pb.TagNumber(6)
  $core.double get quantityBefore => $_getN(5);
  @$pb.TagNumber(6)
  set quantityBefore($core.double value) => $_setDouble(5, value);
  @$pb.TagNumber(6)
  $core.bool hasQuantityBefore() => $_has(5);
  @$pb.TagNumber(6)
  void clearQuantityBefore() => $_clearField(6);

  @$pb.TagNumber(7)
  $core.double get quantityAfter => $_getN(6);
  @$pb.TagNumber(7)
  set quantityAfter($core.double value) => $_setDouble(6, value);
  @$pb.TagNumber(7)
  $core.bool hasQuantityAfter() => $_has(6);
  @$pb.TagNumber(7)
  void clearQuantityAfter() => $_clearField(7);

  @$pb.TagNumber(8)
  $core.String get relatedDocumentType => $_getSZ(7);
  @$pb.TagNumber(8)
  set relatedDocumentType($core.String value) => $_setString(7, value);
  @$pb.TagNumber(8)
  $core.bool hasRelatedDocumentType() => $_has(7);
  @$pb.TagNumber(8)
  void clearRelatedDocumentType() => $_clearField(8);

  @$pb.TagNumber(9)
  $core.String get relatedDocumentId => $_getSZ(8);
  @$pb.TagNumber(9)
  set relatedDocumentId($core.String value) => $_setString(8, value);
  @$pb.TagNumber(9)
  $core.bool hasRelatedDocumentId() => $_has(8);
  @$pb.TagNumber(9)
  void clearRelatedDocumentId() => $_clearField(9);

  @$pb.TagNumber(10)
  $core.String get performedByUserId => $_getSZ(9);
  @$pb.TagNumber(10)
  set performedByUserId($core.String value) => $_setString(9, value);
  @$pb.TagNumber(10)
  $core.bool hasPerformedByUserId() => $_has(9);
  @$pb.TagNumber(10)
  void clearPerformedByUserId() => $_clearField(10);

  @$pb.TagNumber(11)
  $0.Timestamp get transactionTime => $_getN(10);
  @$pb.TagNumber(11)
  set transactionTime($0.Timestamp value) => $_setField(11, value);
  @$pb.TagNumber(11)
  $core.bool hasTransactionTime() => $_has(10);
  @$pb.TagNumber(11)
  void clearTransactionTime() => $_clearField(11);
  @$pb.TagNumber(11)
  $0.Timestamp ensureTransactionTime() => $_ensure(10);

  @$pb.TagNumber(12)
  $core.String get notes => $_getSZ(11);
  @$pb.TagNumber(12)
  set notes($core.String value) => $_setString(11, value);
  @$pb.TagNumber(12)
  $core.bool hasNotes() => $_has(11);
  @$pb.TagNumber(12)
  void clearNotes() => $_clearField(12);

  @$pb.TagNumber(13)
  $core.String get batchId => $_getSZ(12);
  @$pb.TagNumber(13)
  set batchId($core.String value) => $_setString(12, value);
  @$pb.TagNumber(13)
  $core.bool hasBatchId() => $_has(12);
  @$pb.TagNumber(13)
  void clearBatchId() => $_clearField(13);
}

const $core.bool _omitFieldNames =
    $core.bool.fromEnvironment('protobuf.omit_field_names');
const $core.bool _omitMessageNames =
    $core.bool.fromEnvironment('protobuf.omit_message_names');
