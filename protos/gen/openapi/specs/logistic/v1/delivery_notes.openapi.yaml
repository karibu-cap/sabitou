openapi: 3.1.0
info:
  title: logistic.v1
paths: {}
components:
  schemas:
    google.protobuf.Timestamp:
      type: string
      examples:
        - "2023-01-15T01:30:15.01Z"
        - "2024-12-25T12:00:00Z"
      format: date-time
      description: |-
        A Timestamp represents a point in time independent of any time zone or local
         calendar, encoded as a count of seconds and fractions of seconds at
         nanosecond resolution. The count is relative to an epoch at UTC midnight on
         January 1, 1970, in the proleptic Gregorian calendar which extends the
         Gregorian calendar backwards to year one.

         All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap
         second table is needed for interpretation, using a [24-hour linear
         smear](https://developers.google.com/time/smear).

         The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By
         restricting to that range, we ensure that we can convert to and from [RFC
         3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.

         # Examples

         Example 1: Compute Timestamp from POSIX `time()`.

             Timestamp timestamp;
             timestamp.set_seconds(time(NULL));
             timestamp.set_nanos(0);

         Example 2: Compute Timestamp from POSIX `gettimeofday()`.

             struct timeval tv;
             gettimeofday(&tv, NULL);

             Timestamp timestamp;
             timestamp.set_seconds(tv.tv_sec);
             timestamp.set_nanos(tv.tv_usec * 1000);

         Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.

             FILETIME ft;
             GetSystemTimeAsFileTime(&ft);
             UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;

             // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z
             // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.
             Timestamp timestamp;
             timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));
             timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));

         Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.

             long millis = System.currentTimeMillis();

             Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)
                 .setNanos((int) ((millis % 1000) * 1000000)).build();

         Example 5: Compute Timestamp from Java `Instant.now()`.

             Instant now = Instant.now();

             Timestamp timestamp =
                 Timestamp.newBuilder().setSeconds(now.getEpochSecond())
                     .setNanos(now.getNano()).build();

         Example 6: Compute Timestamp from current time in Python.

             timestamp = Timestamp()
             timestamp.GetCurrentTime()

         # JSON Mapping

         In JSON format, the Timestamp type is encoded as a string in the
         [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the
         format is "{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z"
         where {year} is always expressed using four digits while {month}, {day},
         {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional
         seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),
         are optional. The "Z" suffix indicates the timezone ("UTC"); the timezone
         is required. A proto3 JSON serializer should always use UTC (as indicated by
         "Z") when printing the Timestamp type and a proto3 JSON parser should be
         able to accept both UTC and other timezones (as indicated by an offset).

         For example, "2017-01-15T01:30:15.01Z" encodes 15.01 seconds past
         01:30 UTC on January 15, 2017.

         In JavaScript, one can convert a Date object to this format using the
         standard
         [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)
         method. In Python, a standard `datetime.datetime` object can be converted
         to this format using
         [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with
         the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use
         the Joda Time's [`ISODateTimeFormat.dateTime()`](
         http://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()
         ) to obtain a formatter capable of generating timestamps in this format.
    logistic.v1.DeliveryLineItem:
      type: object
      properties:
        productId:
          type: string
          title: product_id
        quantity:
          type: number
          title: quantity
          format: double
        serialNumbers:
          type: string
          title: serial_numbers
          description: For tracked items
        batchId:
          type: string
          title: batch_id
          description: Specific batch/lot being delivered
      title: DeliveryLineItem
      additionalProperties: false
      description: |-
        *
         DeliveryLineItem for tracking shipped quantities.

         Fix: Added batch_id to specify which lot is being shipped (FIFO/LIFO/expiration-based picking).
    logistic.v1.DeliveryNote:
      type: object
      properties:
        documentId:
          type: string
          title: document_id
          description: '"DN-2025-001"'
        relatedSalesOrderId:
          type: string
          title: related_sales_order_id
          description: Optional link to order
        fromWarehouseId:
          type: string
          title: from_warehouse_id
          description: Where goods leave
        toCompanyId:
          type: string
          title: to_company_id
          description: Customer receiving
        toAddress:
          type: string
          title: to_address
          description: Delivery address
        status:
          title: status
          $ref: '#/components/schemas/logistic.v1.DeliveryNoteStatus'
        items:
          type: array
          items:
            $ref: '#/components/schemas/logistic.v1.DeliveryLineItem'
          title: items
        carrier:
          type: string
          title: carrier
          description: '"DHL", "Local Delivery", etc.'
        trackingNumber:
          type: string
          title: tracking_number
        createdByUserId:
          type: string
          title: created_by_user_id
        createdAt:
          title: created_at
          $ref: '#/components/schemas/google.protobuf.Timestamp'
        shippedAt:
          title: shipped_at
          $ref: '#/components/schemas/google.protobuf.Timestamp'
        deliveredAt:
          title: delivered_at
          $ref: '#/components/schemas/google.protobuf.Timestamp'
        notes:
          type: string
          title: notes
      title: DeliveryNote
      required:
        - documentId
      additionalProperties: false
      description: |-
        *
         DeliveryNote (Bon de Livraison)
         Accompanies goods when they are physically shipped.
         THIS IS WHAT REDUCES INVENTORY at the source.

         Fix: DeliveryLineItem now includes batch_id for lot tracking.

         Flow: Pick items → Create DeliveryNote → Ship → Customer receives

         Example:
           dn_id: "DN-2025-001"
           related_sales_order_id: "SO-2025-001"
           from_warehouse_id: "WH-001"
           to_company_id: "CMP-003" (customer)
           items: [10x PRD-001]
           status: DN_STATUS_IN_TRANSIT

         INVENTORY IMPACT: -10 PRD-001 from WH-001
    logistic.v1.DeliveryNoteStatus:
      type: string
      title: DeliveryNoteStatus
      enum:
        - DN_STATUS_UNSPECIFIED
        - DN_STATUS_PREPARED
        - DN_STATUS_IN_TRANSIT
        - DN_STATUS_DELIVERED
        - DN_STATUS_RETURNED
security: []
