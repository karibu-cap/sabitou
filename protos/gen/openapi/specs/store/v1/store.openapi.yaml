openapi: 3.1.0
info:
  title: store.v1
paths:
  /store.v1.StoreService/AssociateUserToStore:
    post:
      tags:
        - store.v1.StoreService
      summary: Associate user to store.
      description: Associate user to store.
      operationId: store.v1.StoreService.AssociateUserToStore
      parameters:
        - name: Connect-Protocol-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/connect-protocol-version'
        - name: Connect-Timeout-Ms
          in: header
          schema:
            $ref: '#/components/schemas/connect-timeout-header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/store.v1.AssociateUserToStoreRequest'
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.v1.AssociateUserToStoreResponse'
  /store.v1.StoreService/CreateStore:
    post:
      tags:
        - store.v1.StoreService
      summary: Creates a new store.
      description: Creates a new store.
      operationId: store.v1.StoreService.CreateStore
      parameters:
        - name: Connect-Protocol-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/connect-protocol-version'
        - name: Connect-Timeout-Ms
          in: header
          schema:
            $ref: '#/components/schemas/connect-timeout-header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/store.v1.CreateStoreRequest'
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.v1.CreateStoreResponse'
  /store.v1.StoreService/CreateUserToStore:
    post:
      tags:
        - store.v1.StoreService
      summary: Add user to store or invite user to store.
      description: Add user to store or invite user to store.
      operationId: store.v1.StoreService.CreateUserToStore
      parameters:
        - name: Connect-Protocol-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/connect-protocol-version'
        - name: Connect-Timeout-Ms
          in: header
          schema:
            $ref: '#/components/schemas/connect-timeout-header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/store.v1.CreateUserToStoreRequest'
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.v1.CreateUserToStoreResponse'
  /store.v1.StoreService/DeleteStore:
    post:
      tags:
        - store.v1.StoreService
      summary: Deletes a store.
      description: Deletes a store.
      operationId: store.v1.StoreService.DeleteStore
      parameters:
        - name: Connect-Protocol-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/connect-protocol-version'
        - name: Connect-Timeout-Ms
          in: header
          schema:
            $ref: '#/components/schemas/connect-timeout-header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/store.v1.DeleteStoreRequest'
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.v1.DeleteStoreResponse'
  /store.v1.StoreService/GetBusinessStores:
    post:
      tags:
        - store.v1.StoreService
      summary: Gets all stores base on business Id.
      description: Gets all stores base on business Id.
      operationId: store.v1.StoreService.GetBusinessStores
      parameters:
        - name: Connect-Protocol-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/connect-protocol-version'
        - name: Connect-Timeout-Ms
          in: header
          schema:
            $ref: '#/components/schemas/connect-timeout-header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/store.v1.GetBusinessStoresRequest'
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.v1.GetBusinessStoresResponse'
  /store.v1.StoreService/GetStore:
    post:
      tags:
        - store.v1.StoreService
      summary: Gets a store by id.
      description: Gets a store by id.
      operationId: store.v1.StoreService.GetStore
      parameters:
        - name: Connect-Protocol-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/connect-protocol-version'
        - name: Connect-Timeout-Ms
          in: header
          schema:
            $ref: '#/components/schemas/connect-timeout-header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/store.v1.GetStoreRequest'
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.v1.GetStoreResponse'
  /store.v1.StoreService/StreamStoreMembers: {}
  /store.v1.StoreService/UpdateStore:
    post:
      tags:
        - store.v1.StoreService
      summary: Updates a store.  Note:Only the fields that are set will be updated.
      description: |-
        Updates a store.
         Note:Only the fields that are set will be updated.
      operationId: store.v1.StoreService.UpdateStore
      parameters:
        - name: Connect-Protocol-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/connect-protocol-version'
        - name: Connect-Timeout-Ms
          in: header
          schema:
            $ref: '#/components/schemas/connect-timeout-header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/store.v1.UpdateStoreRequest'
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.v1.UpdateStoreResponse'
  /store.v1.StoreService/UpdateStoreMember:
    post:
      tags:
        - store.v1.StoreService
      summary: Update store member.
      description: Update store member.
      operationId: store.v1.StoreService.UpdateStoreMember
      parameters:
        - name: Connect-Protocol-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/connect-protocol-version'
        - name: Connect-Timeout-Ms
          in: header
          schema:
            $ref: '#/components/schemas/connect-timeout-header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/store.v1.UpdateStoreMemberRequest'
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.v1.UpdateStoreMemberResponse'
components:
  schemas:
    connect-protocol-version:
      type: number
      title: Connect-Protocol-Version
      enum:
        - 1
      description: Define the version of the Connect protocol
      const: 1
    connect-timeout-header:
      type: number
      title: Connect-Timeout-Ms
      description: Define the timeout, in ms
    connect.error:
      type: object
      properties:
        code:
          type: string
          examples:
            - not_found
          enum:
            - canceled
            - unknown
            - invalid_argument
            - deadline_exceeded
            - not_found
            - already_exists
            - permission_denied
            - resource_exhausted
            - failed_precondition
            - aborted
            - out_of_range
            - unimplemented
            - internal
            - unavailable
            - data_loss
            - unauthenticated
          description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
        message:
          type: string
          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
        details:
          type: array
          items:
            $ref: '#/components/schemas/connect.error_details.Any'
          description: A list of messages that carry the error details. There is no limit on the number of messages.
      title: Connect Error
      additionalProperties: true
      description: 'Error type returned by Connect: https://connectrpc.com/docs/go/errors/#http-representation'
    connect.error_details.Any:
      type: object
      properties:
        type:
          type: string
          description: 'A URL that acts as a globally unique identifier for the type of the serialized message. For example: `type.googleapis.com/google.rpc.ErrorInfo`. This is used to determine the schema of the data in the `value` field and is the discriminator for the `debug` field.'
        value:
          type: string
          format: binary
          description: The Protobuf message, serialized as bytes and base64-encoded. The specific message type is identified by the `type` field.
        debug:
          oneOf:
            - type: object
              title: Any
              additionalProperties: true
              description: Detailed error information.
          discriminator:
            propertyName: type
          title: Debug
          description: Deserialized error detail payload. The 'type' field indicates the schema. This field is for easier debugging and should not be relied upon for application logic.
      additionalProperties: true
      description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message, with an additional debug field for ConnectRPC error details.
    google.protobuf.Timestamp:
      type: string
      examples:
        - "2023-01-15T01:30:15.01Z"
        - "2024-12-25T12:00:00Z"
      format: date-time
      description: |-
        A Timestamp represents a point in time independent of any time zone or local
         calendar, encoded as a count of seconds and fractions of seconds at
         nanosecond resolution. The count is relative to an epoch at UTC midnight on
         January 1, 1970, in the proleptic Gregorian calendar which extends the
         Gregorian calendar backwards to year one.

         All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap
         second table is needed for interpretation, using a [24-hour linear
         smear](https://developers.google.com/time/smear).

         The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By
         restricting to that range, we ensure that we can convert to and from [RFC
         3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.

         # Examples

         Example 1: Compute Timestamp from POSIX `time()`.

             Timestamp timestamp;
             timestamp.set_seconds(time(NULL));
             timestamp.set_nanos(0);

         Example 2: Compute Timestamp from POSIX `gettimeofday()`.

             struct timeval tv;
             gettimeofday(&tv, NULL);

             Timestamp timestamp;
             timestamp.set_seconds(tv.tv_sec);
             timestamp.set_nanos(tv.tv_usec * 1000);

         Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.

             FILETIME ft;
             GetSystemTimeAsFileTime(&ft);
             UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;

             // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z
             // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.
             Timestamp timestamp;
             timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));
             timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));

         Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.

             long millis = System.currentTimeMillis();

             Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)
                 .setNanos((int) ((millis % 1000) * 1000000)).build();

         Example 5: Compute Timestamp from Java `Instant.now()`.

             Instant now = Instant.now();

             Timestamp timestamp =
                 Timestamp.newBuilder().setSeconds(now.getEpochSecond())
                     .setNanos(now.getNano()).build();

         Example 6: Compute Timestamp from current time in Python.

             timestamp = Timestamp()
             timestamp.GetCurrentTime()

         # JSON Mapping

         In JSON format, the Timestamp type is encoded as a string in the
         [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the
         format is "{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z"
         where {year} is always expressed using four digits while {month}, {day},
         {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional
         seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),
         are optional. The "Z" suffix indicates the timezone ("UTC"); the timezone
         is required. A proto3 JSON serializer should always use UTC (as indicated by
         "Z") when printing the Timestamp type and a proto3 JSON parser should be
         able to accept both UTC and other timezones (as indicated by an offset).

         For example, "2017-01-15T01:30:15.01Z" encodes 15.01 seconds past
         01:30 UTC on January 15, 2017.

         In JavaScript, one can convert a Date object to this format using the
         standard
         [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)
         method. In Python, a standard `datetime.datetime` object can be converted
         to this format using
         [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with
         the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use
         the Joda Time's [`ISODateTimeFormat.dateTime()`](
         http://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()
         ) to obtain a formatter capable of generating timestamps in this format.
    identity.v1.ResourceActionType:
      type: string
      title: ResourceActionType
      enum:
        - RESOURCE_ACTION_TYPE_UNSPECIFIED
        - RESOURCE_ACTION_TYPE_READ
        - RESOURCE_ACTION_TYPE_ADD
        - RESOURCE_ACTION_TYPE_UPDATE
        - RESOURCE_ACTION_TYPE_REMOVE
    identity.v1.StorePermission:
      type: object
      properties:
        resourceType:
          title: resource_type
          $ref: '#/components/schemas/identity.v1.StoreResourceType'
        actionType:
          title: action_type
          $ref: '#/components/schemas/identity.v1.ResourceActionType'
      title: StorePermission
      additionalProperties: false
    identity.v1.StoreResourceType:
      type: string
      title: StoreResourceType
      enum:
        - STORE_RESOURCE_TYPE_UNSPECIFIED
        - STORE_RESOURCE_TYPE_STORE
        - STORE_RESOURCE_TYPE_INVOICE
        - STORE_RESOURCE_TYPE_ORDER
        - STORE_RESOURCE_TYPE_SUPPLIER_ORDER
        - STORE_RESOURCE_TYPE_PRODUCT
    store.v1.AssociateUserToStoreRequest:
      type: object
      properties:
        userId:
          type: string
          title: user_id
          description: The unique identifier of the user.
        storeId:
          type: string
          title: store_id
          description: The unique identifier of the store.
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/identity.v1.StorePermission'
          title: permissions
          description: The permissions that the user has.
      title: AssociateUserToStoreRequest
      additionalProperties: false
      description: |-
        The unique identifier of the user.
         For example, the email address or @username.
         string u_ref = 1;
    store.v1.AssociateUserToStoreResponse:
      type: object
      properties:
        storeMember:
          title: store_member
          description: The store member to return
          $ref: '#/components/schemas/store.v1.StoreMember'
      title: AssociateUserToStoreResponse
      additionalProperties: false
    store.v1.CreateStoreRequest:
      type: object
      properties:
        store:
          title: store
          description: The store information to create.
          $ref: '#/components/schemas/store.v1.Store'
        logoRawImage:
          type: string
          title: logo_raw_image
          format: byte
          description: The raw image of the logo of the store.
          nullable: true
      title: CreateStoreRequest
      additionalProperties: false
    store.v1.CreateStoreResponse:
      type: object
      properties:
        storeId:
          type: string
          title: store_id
          minLength: 3
          description: The unique identifier of the created store.
      title: CreateStoreResponse
      required:
        - storeId
      additionalProperties: false
    store.v1.CreateUserToStoreRequest:
      type: object
      properties:
        firstName:
          type: string
          title: first_name
          description: The first name of the user.
        lastName:
          type: string
          title: last_name
          description: The last name of the user.
        userName:
          type: string
          title: user_name
          description: The username of the user.
        phoneNumber:
          type: string
          title: phone_number
          description: The phone number of the user.
        email:
          type: string
          title: email
          description: The email of the user.
        password:
          type: string
          title: password
          description: The password of the user.
        businessId:
          type: string
          title: business_id
          description: The unique identifier of the business.
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/identity.v1.StorePermission'
          title: permissions
          description: The permissions that the user has.
      title: CreateUserToStoreRequest
      additionalProperties: false
      description: |-
        The unique identifier of the user.
         For example, the email address or @username.
         string u_ref = 1;
    store.v1.CreateUserToStoreResponse:
      type: object
      properties:
        storeMember:
          title: store_member
          description: The store member to return
          $ref: '#/components/schemas/store.v1.StoreMember'
      title: CreateUserToStoreResponse
      additionalProperties: false
    store.v1.DeleteStoreRequest:
      type: object
      properties:
        storeId:
          type: string
          title: store_id
          minLength: 3
          description: The unique identifier of the store to delete.
      title: DeleteStoreRequest
      required:
        - storeId
      additionalProperties: false
    store.v1.DeleteStoreResponse:
      type: object
      properties:
        success:
          type: boolean
          title: success
          description: Whether the store was successfully deleted.
      title: DeleteStoreResponse
      additionalProperties: false
    store.v1.GetBusinessStoresRequest:
      type: object
      properties:
        businessId:
          type: string
          title: business_id
          minLength: 3
          description: The reference id to the supplier identifier.
      title: GetBusinessStoresRequest
      required:
        - businessId
      additionalProperties: false
    store.v1.GetBusinessStoresResponse:
      type: object
      properties:
        stores:
          type: array
          items:
            $ref: '#/components/schemas/store.v1.Store'
          title: stores
          description: |-
            The list of stores of the business.
             Note: Only the ids and names of the stores are returned.
      title: GetBusinessStoresResponse
      additionalProperties: false
    store.v1.GetStoreRequest:
      type: object
      properties:
        storeId:
          type: string
          title: store_id
          minLength: 3
          description: The unique identifier of the store to retrieve.
      title: GetStoreRequest
      required:
        - storeId
      additionalProperties: false
    store.v1.GetStoreResponse:
      type: object
      properties:
        store:
          title: store
          description: The retrieved store data.
          $ref: '#/components/schemas/store.v1.Store'
      title: GetStoreResponse
      additionalProperties: false
    store.v1.Store:
      type: object
      properties:
        refId:
          type: string
          title: ref_id
          description: The unique identifier of the store.
          nullable: true
        name:
          type: string
          title: name
          description: The name of the store.
        description:
          type: string
          title: description
          description: The description of the store.
          nullable: true
        logoLinkId:
          type: string
          title: logo_link_id
          description: The id of the media of the logo of the store.
          nullable: true
        externalLinksIds:
          type: string
          title: external_links_ids
          description: The list of external links of the store it can be an address link, a phone number, an email, a website etc.
          nullable: true
        businessId:
          type: string
          title: business_id
          description: The id of the business of the store.
        createdAt:
          title: created_at
          description: The date and time the store was created.
          $ref: '#/components/schemas/google.protobuf.Timestamp'
        updatedAt:
          title: updated_at
          description: The date and time the store was last updated.
          nullable: true
          $ref: '#/components/schemas/google.protobuf.Timestamp'
      title: Store
      additionalProperties: false
      description: |-
        Stores are used to store products.
         Note: A store is not always a shop.
    store.v1.StoreMember:
      type: object
      properties:
        userId:
          type: string
          title: user_id
          description: The unique identifier of the user.
        storeId:
          type: string
          title: store_id
          description: The unique identifier of the store.
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/identity.v1.StorePermission'
          title: permissions
          description: The permissions that the user has.
        memberSince:
          title: member_since
          description: The date since when the user became a member.
          $ref: '#/components/schemas/google.protobuf.Timestamp'
      title: StoreMember
      additionalProperties: false
    store.v1.StreamStoreMembersRequest:
      type: object
      properties:
        storeId:
          type: string
          title: store_id
          minLength: 3
          description: The unique identifier of the store.
      title: StreamStoreMembersRequest
      required:
        - storeId
      additionalProperties: false
    store.v1.StreamStoreMembersResponse:
      type: object
      properties:
        storeMembers:
          type: array
          items:
            $ref: '#/components/schemas/store.v1.StoreMember'
          title: store_members
          description: The store members.
      title: StreamStoreMembersResponse
      additionalProperties: false
    store.v1.UpdateStoreMemberRequest:
      type: object
      properties:
        userId:
          type: string
          title: user_id
          minLength: 3
          description: The unique identifier of the user.
        storeId:
          type: string
          title: store_id
          minLength: 3
          description: The unique identifier of the store.
        addPermissions:
          type: array
          items:
            $ref: '#/components/schemas/identity.v1.StorePermission'
          title: add_permissions
          description: The permissions to add (optional).
        removePermissions:
          type: array
          items:
            $ref: '#/components/schemas/identity.v1.StorePermission'
          title: remove_permissions
          description: The permissions to remove (optional).
      title: UpdateStoreMemberRequest
      required:
        - userId
        - storeId
      additionalProperties: false
    store.v1.UpdateStoreMemberResponse:
      type: object
      properties:
        success:
          type: boolean
          title: success
          description: Whether the member was successfully updated.
        storeMember:
          title: store_member
          description: The updated store member.
          $ref: '#/components/schemas/store.v1.StoreMember'
      title: UpdateStoreMemberResponse
      additionalProperties: false
    store.v1.UpdateStoreRequest:
      type: object
      properties:
        store:
          title: store
          description: |-
            The store information to update.
             Note:Only the fields that are set will be updated.
          $ref: '#/components/schemas/store.v1.Store'
        logoRawImage:
          type: string
          title: logo_raw_image
          format: byte
          description: The raw image of the logo of the store.
          nullable: true
      title: UpdateStoreRequest
      additionalProperties: false
    store.v1.UpdateStoreResponse:
      type: object
      properties:
        store:
          title: store
          description: The updated store data.
          $ref: '#/components/schemas/store.v1.Store'
      title: UpdateStoreResponse
      additionalProperties: false
security: []
tags:
  - name: store.v1.StoreService
