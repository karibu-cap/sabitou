openapi: 3.1.0
info:
  title: identity.v1
paths:
  /identity.v1.AuthService/Login:
    post:
      tags:
        - identity.v1.AuthService
      summary: Authenticate the user with the given credentials.
      description: Authenticate the user with the given credentials.
      operationId: identity.v1.AuthService.Login
      parameters:
        - name: Connect-Protocol-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/connect-protocol-version'
        - name: Connect-Timeout-Ms
          in: header
          schema:
            $ref: '#/components/schemas/connect-timeout-header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/identity.v1.LoginRequest'
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/identity.v1.LoginResponse'
  /identity.v1.AuthService/Register:
    post:
      tags:
        - identity.v1.AuthService
      summary: Create a user without a password.
      description: Create a user without a password.
      operationId: identity.v1.AuthService.Register
      parameters:
        - name: Connect-Protocol-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/connect-protocol-version'
        - name: Connect-Timeout-Ms
          in: header
          schema:
            $ref: '#/components/schemas/connect-timeout-header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/identity.v1.RegisterRequest'
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/identity.v1.RegisterResponse'
  /identity.v1.AuthService/RequestPasswordReset:
    post:
      tags:
        - identity.v1.AuthService
      summary: Request the password reset of the user.
      description: Request the password reset of the user.
      operationId: identity.v1.AuthService.RequestPasswordReset
      parameters:
        - name: Connect-Protocol-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/connect-protocol-version'
        - name: Connect-Timeout-Ms
          in: header
          schema:
            $ref: '#/components/schemas/connect-timeout-header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/identity.v1.RequestPasswordResetRequest'
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/identity.v1.RequestPasswordResetResponse'
  /identity.v1.AuthService/ResetPassword:
    post:
      tags:
        - identity.v1.AuthService
      summary: Process the password reset request.
      description: Process the password reset request.
      operationId: identity.v1.AuthService.ResetPassword
      parameters:
        - name: Connect-Protocol-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/connect-protocol-version'
        - name: Connect-Timeout-Ms
          in: header
          schema:
            $ref: '#/components/schemas/connect-timeout-header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/identity.v1.ResetPasswordRequest'
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/identity.v1.ResetPasswordResponse'
components:
  schemas:
    identity.v1.LoginRequest:
      type: object
      properties:
        password:
          type: string
          title: password
          description: The password of the user.
        email:
          type: string
          title: email
          format: email
          description: |
            The email of the user.
             Note: required when phone_number and username are not set.
            string.email = true // value must be a valid email address
            string.email_empty = true // value is empty, which is not a valid email address
          nullable: true
        phoneNumber:
          type: string
          title: phone_number
          pattern: ^[0-9\+\-\(\)\s]+$
          description: |
            The phone number of the user.
             Note: required when email and username are not set.
            string.pattern = "^[0-9\\+\\-\\(\\)\\s]+$"
          nullable: true
        userName:
          type: string
          title: user_name
          pattern: ^@[a-zA-Z0-9_]+$
          description: |
            The username of the user.
             Note: required when email and phone_number are not set.
            string.pattern = "^@[a-zA-Z0-9_]+$"
          nullable: true
      title: LoginRequest
      additionalProperties: false
    identity.v1.LoginResponse:
      type: object
      properties:
        token:
          type: string
          title: token
          description: The token to use to authenticate the user in subsequent requests.
        refreshToken:
          type: string
          title: refresh_token
          description: The refresh token to use to refresh the token.
      title: LoginResponse
      additionalProperties: false
    identity.v1.RegisterRequest:
      type: object
      properties:
        userName:
          type: string
          title: user_name
          description: The unique identifier of the user.
        email:
          type: string
          title: email
          format: email
          description: |
            The email address of the user.
            string.email = true // value must be a valid email address
            string.email_empty = true // value is empty, which is not a valid email address
        password:
          type: string
          title: password
          maxLength: 72
          minLength: 5
          description: |
            The password of the user.
            string.max_len = 72
            string.min_len = 5
      title: RegisterRequest
      required:
        - password
      additionalProperties: false
      description: |-
        Register a new user with the minimum required information.
         The user will have to set a password later.
         For Business user registration, the business id is required.
    identity.v1.RegisterResponse:
      type: object
      properties:
        token:
          type: string
          title: token
          description: The token to use to authenticate the user in subsequent requests.
        refreshToken:
          type: string
          title: refresh_token
          description: The refresh token to use to refresh the token.
      title: RegisterResponse
      additionalProperties: false
    identity.v1.RequestPasswordResetRequest:
      type: object
      properties:
        uRef:
          type: string
          title: u_ref
          description: |
            The unique identifier of the user.
             For example, the email address or userId, later it will include the user name as well.
            string.is_user_ref // user_ref must be a valid email address or user id or @username
      title: RequestPasswordResetRequest
      additionalProperties: false
    identity.v1.RequestPasswordResetResponse:
      type: object
      properties:
        requestToken:
          type: string
          title: request_token
          description: The token to use to process the password reset request.
        verificationCode:
          type: string
          title: verification_code
          description: |-
            The verification code to use to process the password reset request.
             WARN: This field is only set if the user has not yet been verified.
          nullable: true
      title: RequestPasswordResetResponse
      additionalProperties: false
    identity.v1.ResetPasswordRequest:
      type: object
      properties:
        requestToken:
          type: string
          title: request_token
          description: The token to use to process the password reset request.
        password:
          type: string
          title: password
          description: The new password of the user.
        verificationCode:
          type: string
          title: verification_code
          description: The verification code sent to the user's email or phone number.
      title: ResetPasswordRequest
      additionalProperties: false
    identity.v1.ResetPasswordResponse:
      type: object
      properties:
        success:
          type: string
          title: success
          description: Whether the password was successfully reset.
      title: ResetPasswordResponse
      additionalProperties: false
    connect-protocol-version:
      type: number
      title: Connect-Protocol-Version
      enum:
        - 1
      description: Define the version of the Connect protocol
      const: 1
    connect-timeout-header:
      type: number
      title: Connect-Timeout-Ms
      description: Define the timeout, in ms
    connect.error:
      type: object
      properties:
        code:
          type: string
          examples:
            - not_found
          enum:
            - canceled
            - unknown
            - invalid_argument
            - deadline_exceeded
            - not_found
            - already_exists
            - permission_denied
            - resource_exhausted
            - failed_precondition
            - aborted
            - out_of_range
            - unimplemented
            - internal
            - unavailable
            - data_loss
            - unauthenticated
          description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
        message:
          type: string
          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
        details:
          type: array
          items:
            $ref: '#/components/schemas/connect.error_details.Any'
          description: A list of messages that carry the error details. There is no limit on the number of messages.
      title: Connect Error
      additionalProperties: true
      description: 'Error type returned by Connect: https://connectrpc.com/docs/go/errors/#http-representation'
    connect.error_details.Any:
      type: object
      properties:
        type:
          type: string
          description: 'A URL that acts as a globally unique identifier for the type of the serialized message. For example: `type.googleapis.com/google.rpc.ErrorInfo`. This is used to determine the schema of the data in the `value` field and is the discriminator for the `debug` field.'
        value:
          type: string
          format: binary
          description: The Protobuf message, serialized as bytes and base64-encoded. The specific message type is identified by the `type` field.
        debug:
          oneOf:
            - type: object
              title: Any
              additionalProperties: true
              description: Detailed error information.
          discriminator:
            propertyName: type
          title: Debug
          description: Deserialized error detail payload. The 'type' field indicates the schema. This field is for easier debugging and should not be relied upon for application logic.
      additionalProperties: true
      description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message, with an additional debug field for ConnectRPC error details.
security: []
tags:
  - name: identity.v1.AuthService
