openapi: 3.1.0
info:
  title: payments.v1
paths: {}
components:
  schemas:
    financial.v1.InvoiceLineItem:
      type: object
      properties:
        productId:
          type: string
          title: product_id
        quantity:
          type: number
          title: quantity
          format: double
        unitPrice:
          type:
            - integer
            - string
          title: unit_price
          format: int64
        subtotal:
          type:
            - integer
            - string
          title: subtotal
          format: int64
          description: quantity * unit_price
        taxRate:
          type: number
          title: tax_rate
          format: double
          description: 0.20 for 20% VAT
        taxAmount:
          type:
            - integer
            - string
          title: tax_amount
          format: int64
        total:
          type:
            - integer
            - string
          title: total
          format: int64
          description: subtotal + tax_amount
        batchId:
          type: string
          title: batch_id
          description: 'Optional: Batch/lot referenced'
        productName:
          title: product_name
          description: The name of the item
          $ref: '#/components/schemas/inventory.v1.Internationalized'
      title: InvoiceLineItem
      additionalProperties: false
      description: |-
        *
         InvoiceLineItem represents one product on an invoice.

         Fix: Added optional batch_id for lot traceability in accounting.
    google.protobuf.Timestamp:
      type: string
      examples:
        - "2023-01-15T01:30:15.01Z"
        - "2024-12-25T12:00:00Z"
      format: date-time
      description: |-
        A Timestamp represents a point in time independent of any time zone or local
         calendar, encoded as a count of seconds and fractions of seconds at
         nanosecond resolution. The count is relative to an epoch at UTC midnight on
         January 1, 1970, in the proleptic Gregorian calendar which extends the
         Gregorian calendar backwards to year one.

         All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap
         second table is needed for interpretation, using a [24-hour linear
         smear](https://developers.google.com/time/smear).

         The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By
         restricting to that range, we ensure that we can convert to and from [RFC
         3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.

         # Examples

         Example 1: Compute Timestamp from POSIX `time()`.

             Timestamp timestamp;
             timestamp.set_seconds(time(NULL));
             timestamp.set_nanos(0);

         Example 2: Compute Timestamp from POSIX `gettimeofday()`.

             struct timeval tv;
             gettimeofday(&tv, NULL);

             Timestamp timestamp;
             timestamp.set_seconds(tv.tv_sec);
             timestamp.set_nanos(tv.tv_usec * 1000);

         Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.

             FILETIME ft;
             GetSystemTimeAsFileTime(&ft);
             UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;

             // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z
             // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.
             Timestamp timestamp;
             timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));
             timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));

         Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.

             long millis = System.currentTimeMillis();

             Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)
                 .setNanos((int) ((millis % 1000) * 1000000)).build();

         Example 5: Compute Timestamp from Java `Instant.now()`.

             Instant now = Instant.now();

             Timestamp timestamp =
                 Timestamp.newBuilder().setSeconds(now.getEpochSecond())
                     .setNanos(now.getNano()).build();

         Example 6: Compute Timestamp from current time in Python.

             timestamp = Timestamp()
             timestamp.GetCurrentTime()

         # JSON Mapping

         In JSON format, the Timestamp type is encoded as a string in the
         [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the
         format is "{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z"
         where {year} is always expressed using four digits while {month}, {day},
         {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional
         seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),
         are optional. The "Z" suffix indicates the timezone ("UTC"); the timezone
         is required. A proto3 JSON serializer should always use UTC (as indicated by
         "Z") when printing the Timestamp type and a proto3 JSON parser should be
         able to accept both UTC and other timezones (as indicated by an offset).

         For example, "2017-01-15T01:30:15.01Z" encodes 15.01 seconds past
         01:30 UTC on January 15, 2017.

         In JavaScript, one can convert a Date object to this format using the
         standard
         [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)
         method. In Python, a standard `datetime.datetime` object can be converted
         to this format using
         [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with
         the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use
         the Joda Time's [`ISODateTimeFormat.dateTime()`](
         http://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()
         ) to obtain a formatter capable of generating timestamps in this format.
    inventory.v1.Internationalized:
      type: object
      properties:
        en:
          type: string
          title: en
          description: The English name of the product category.
        fr:
          type: string
          title: fr
          description: The French name of the product category.
      title: Internationalized
      additionalProperties: false
    payments.v1.CashReceipt:
      type: object
      properties:
        documentId:
          type: string
          title: document_id
          description: '"CASH-2025-001"'
        cashierUserId:
          type: string
          title: cashier_user_id
          description: Who processed sale
        customerId:
          type: string
          title: customer_id
          description: Can be null for anonymous
        storeId:
          type: string
          title: store_id
          description: Which location/store
        items:
          type: array
          items:
            $ref: '#/components/schemas/financial.v1.InvoiceLineItem'
          title: items
        subtotal:
          type:
            - integer
            - string
          title: subtotal
          format: int64
        taxAmount:
          type:
            - integer
            - string
          title: tax_amount
          format: int64
        totalAmount:
          type:
            - integer
            - string
          title: total_amount
          format: int64
        amountPaid:
          type:
            - integer
            - string
          title: amount_paid
          format: int64
          description: What customer gave
        changeGiven:
          type:
            - integer
            - string
          title: change_given
          format: int64
          description: amount_paid - total_amount
        currency:
          type: string
          title: currency
        paymentIds:
          type: array
          items:
            type: string
          title: payment_ids
        transactionTime:
          title: transaction_time
          $ref: '#/components/schemas/google.protobuf.Timestamp'
        notes:
          type: string
          title: notes
      title: CashReceipt
      required:
        - documentId
      additionalProperties: false
      description: |-
        *
         CashReceipt (Bon de Caisse)
         Issued at point of sale for immediate payment.
         Combines invoice + payment proof in one document.
         Common in retail where customer pays immediately.

         Fix: Items include batch_id for lot-specific sales (e.g., FIFO for perishables).

         Example - Retail store sale:
           receipt_id: "CASH-2025-001"
           cashier_user_id: "USR-005"
           customer_id: "CMP-003" (can be null for walk-in)
           store_id: "WH-002" (retail store)
           items: [1x PRD-001 @ 450000]
           subtotal: 450000
           tax: 90000
           total: 540000
           amount_paid: 540000
           payment_method: PAYMENT_METHOD_CASH

         INVENTORY IMPACT: -1 PRD-001 from WH-002
         ACCOUNTING IMPACT: Immediate revenue + payment
security: []
