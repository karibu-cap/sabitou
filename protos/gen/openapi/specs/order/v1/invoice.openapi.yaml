openapi: 3.1.0
info:
  title: order.v1
paths:
  /order.v1.InvoiceService/CreateInvoice:
    post:
      tags:
        - order.v1.InvoiceService
      summary: Creates an invoice for the order.
      description: Creates an invoice for the order.
      operationId: order.v1.InvoiceService.CreateInvoice
      parameters:
        - name: Connect-Protocol-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/connect-protocol-version'
        - name: Connect-Timeout-Ms
          in: header
          schema:
            $ref: '#/components/schemas/connect-timeout-header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/order.v1.CreateInvoiceRequest'
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/order.v1.CreateInvoiceResponse'
  /order.v1.InvoiceService/UpdateInvoice:
    post:
      tags:
        - order.v1.InvoiceService
      summary: Updates an invoice.
      description: Updates an invoice.
      operationId: order.v1.InvoiceService.UpdateInvoice
      parameters:
        - name: Connect-Protocol-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/connect-protocol-version'
        - name: Connect-Timeout-Ms
          in: header
          schema:
            $ref: '#/components/schemas/connect-timeout-header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/order.v1.UpdateInvoiceRequest'
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/order.v1.UpdateInvoiceResponse'
components:
  schemas:
    connect-protocol-version:
      type: number
      title: Connect-Protocol-Version
      enum:
        - 1
      description: Define the version of the Connect protocol
      const: 1
    connect-timeout-header:
      type: number
      title: Connect-Timeout-Ms
      description: Define the timeout, in ms
    connect.error:
      type: object
      properties:
        code:
          type: string
          examples:
            - not_found
          enum:
            - canceled
            - unknown
            - invalid_argument
            - deadline_exceeded
            - not_found
            - already_exists
            - permission_denied
            - resource_exhausted
            - failed_precondition
            - aborted
            - out_of_range
            - unimplemented
            - internal
            - unavailable
            - data_loss
            - unauthenticated
          description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
        message:
          type: string
          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
        details:
          type: array
          items:
            $ref: '#/components/schemas/connect.error_details.Any'
          description: A list of messages that carry the error details. There is no limit on the number of messages.
      title: Connect Error
      additionalProperties: true
      description: 'Error type returned by Connect: https://connectrpc.com/docs/go/errors/#http-representation'
    connect.error_details.Any:
      type: object
      properties:
        type:
          type: string
          description: 'A URL that acts as a globally unique identifier for the type of the serialized message. For example: `type.googleapis.com/google.rpc.ErrorInfo`. This is used to determine the schema of the data in the `value` field and is the discriminator for the `debug` field.'
        value:
          type: string
          format: binary
          description: The Protobuf message, serialized as bytes and base64-encoded. The specific message type is identified by the `type` field.
        debug:
          oneOf:
            - type: object
              title: Any
              additionalProperties: true
              description: Detailed error information.
          discriminator:
            propertyName: type
          title: Debug
          description: Deserialized error detail payload. The 'type' field indicates the schema. This field is for easier debugging and should not be relied upon for application logic.
      additionalProperties: true
      description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message, with an additional debug field for ConnectRPC error details.
    google.protobuf.Timestamp:
      type: string
      examples:
        - "2023-01-15T01:30:15.01Z"
        - "2024-12-25T12:00:00Z"
      format: date-time
      description: |-
        A Timestamp represents a point in time independent of any time zone or local
         calendar, encoded as a count of seconds and fractions of seconds at
         nanosecond resolution. The count is relative to an epoch at UTC midnight on
         January 1, 1970, in the proleptic Gregorian calendar which extends the
         Gregorian calendar backwards to year one.

         All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap
         second table is needed for interpretation, using a [24-hour linear
         smear](https://developers.google.com/time/smear).

         The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By
         restricting to that range, we ensure that we can convert to and from [RFC
         3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.

         # Examples

         Example 1: Compute Timestamp from POSIX `time()`.

             Timestamp timestamp;
             timestamp.set_seconds(time(NULL));
             timestamp.set_nanos(0);

         Example 2: Compute Timestamp from POSIX `gettimeofday()`.

             struct timeval tv;
             gettimeofday(&tv, NULL);

             Timestamp timestamp;
             timestamp.set_seconds(tv.tv_sec);
             timestamp.set_nanos(tv.tv_usec * 1000);

         Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.

             FILETIME ft;
             GetSystemTimeAsFileTime(&ft);
             UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;

             // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z
             // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.
             Timestamp timestamp;
             timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));
             timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));

         Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.

             long millis = System.currentTimeMillis();

             Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)
                 .setNanos((int) ((millis % 1000) * 1000000)).build();

         Example 5: Compute Timestamp from Java `Instant.now()`.

             Instant now = Instant.now();

             Timestamp timestamp =
                 Timestamp.newBuilder().setSeconds(now.getEpochSecond())
                     .setNanos(now.getNano()).build();

         Example 6: Compute Timestamp from current time in Python.

             timestamp = Timestamp()
             timestamp.GetCurrentTime()

         # JSON Mapping

         In JSON format, the Timestamp type is encoded as a string in the
         [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the
         format is "{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z"
         where {year} is always expressed using four digits while {month}, {day},
         {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional
         seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),
         are optional. The "Z" suffix indicates the timezone ("UTC"); the timezone
         is required. A proto3 JSON serializer should always use UTC (as indicated by
         "Z") when printing the Timestamp type and a proto3 JSON parser should be
         able to accept both UTC and other timezones (as indicated by an offset).

         For example, "2017-01-15T01:30:15.01Z" encodes 15.01 seconds past
         01:30 UTC on January 15, 2017.

         In JavaScript, one can convert a Date object to this format using the
         standard
         [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)
         method. In Python, a standard `datetime.datetime` object can be converted
         to this format using
         [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with
         the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use
         the Joda Time's [`ISODateTimeFormat.dateTime()`](
         http://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()
         ) to obtain a formatter capable of generating timestamps in this format.
    order.v1.CreateInvoiceRequest:
      type: object
      properties:
        invoice:
          title: invoice
          description: The invoice to create.
          $ref: '#/components/schemas/order.v1.Invoice'
      title: CreateInvoiceRequest
      additionalProperties: false
    order.v1.CreateInvoiceResponse:
      type: object
      properties:
        success:
          type: boolean
          title: success
          description: The invoice of the order.
        error:
          type: string
          title: error
          description: The error message.
      title: CreateInvoiceResponse
      additionalProperties: false
    order.v1.Invoice:
      type: object
      properties:
        refId:
          type: string
          title: ref_id
          format: uuid
          description: The unique identifier of the invoice.
        orderId:
          type: string
          title: order_id
          description: The unique identifier of the order.
          nullable: true
        status:
          title: status
          description: The status of the invoice.
          $ref: '#/components/schemas/order.v1.InvoiceStatus'
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/order.v1.OrderItem'
          title: order_items
          description: The list of items in the invoice.
        payments:
          type: array
          items:
            $ref: '#/components/schemas/order.v1.Payment'
          title: payments
          description: |-
            The payment methods used to pay the invoice.
             Some time, user can use multiple payment methods to pay the invoice.
        totalDiscount:
          type: number
          title: total_discount
          format: double
          description: Total discounts applied (e.g., promotions)
        totalVat:
          type: number
          title: total_vat
          format: double
          description: |-
            Total tax/VAT amount
             Example: 300.0 (e.g., 5% VAT on 6000 XAF subtotal, assuming no discount: 6000 * 0.05 = 300 XAF)
        subtotal:
          type: number
          title: subtotal
          format: double
          description: |-
            Amount hors taxe: pre-tax, pre-discount total from order_items
             Example: 6000.0 (e.g., from the 3 items at 2000 XAF each: 3 * 2000 = 6000 XAF)
        total:
          type: number
          title: total
          format: double
          description: |-
            Amount with tax: subtotal - total_discount + total_vat
             Example: 5801.0 (e.g., subtotal 6000 - discount 500 + VAT 300= 5801 XAF)
        customerTenderedAmount:
          type: number
          title: customer_tendered_amount
          format: double
          description: |-
            Amount given by client (e.g., cash tendered).
             Example: 10000.0 (e.g., customer hands over 10000 XAF cash for a 6000 XAF total)
        changeGiven:
          type: number
          title: change_given
          format: double
          description: |-
            Amount refunded to client (e.g., change or overpayment refund) Set to 0 for pending cases.
             Example: 4000.0 (e.g., immediate cash refund for overpayment: 10000 tendered - 6000 grand_total = 4000 XAF given back)
        balanceDue:
          type: number
          title: balance_due
          format: double
          description: |-
            Unpaid balance: grand_total - paid_amount (covers remaining_to_pay)
             Example: -4000.0 (e.g., after paying 10000 XAF on a 6000 XAF total: 6000 - 10000 = -4000 XAF, meaning 4000 XAF owed to customer)
        voucherId:
          type: string
          title: voucher_id
          format: uuid
          description: The voucher used to pay the invoice.
          nullable: true
        createdAt:
          title: created_at
          description: The date and time the invoice was created.
          $ref: '#/components/schemas/google.protobuf.Timestamp'
        deliveryDate:
          title: delivery_date
          description: The delivery date of the invoice.
          $ref: '#/components/schemas/google.protobuf.Timestamp'
      title: Invoice
      required:
        - refId
      additionalProperties: false
      description: |-
        The invoice of an order.
         The invoice is a PDF file that can be downloaded by the customer.
         It contains the order details, the customer details, the payment details.
    order.v1.InvoiceStatus:
      type: string
      title: InvoiceStatus
      enum:
        - INVOICE_STATUS_UNSPECIFIED
        - INVOICE_STATUS_PAID
        - INVOICE_STATUS_PENDING_REFUND
        - INVOICE_STATUS_REFUNDED
    order.v1.OrderItem:
      type: object
      properties:
        storeProductId:
          type: string
          title: store_product_id
          description: The unique identifier of the store product.
        quantity:
          type: integer
          title: quantity
          format: int32
          description: The quantity of the product.
        unitPrice:
          type: integer
          title: unit_price
          format: int32
          description: |-
            The unit price in XAF of the product.
             WARN: This value is stored because the unit price can change over time.
        itemName:
          type: string
          title: item_name
          description: The name of the product.
      title: OrderItem
      additionalProperties: false
    order.v1.Payment:
      type: object
      properties:
        amount:
          type: number
          title: amount
          format: double
        method:
          title: method
          $ref: '#/components/schemas/order.v1.PaymentMethod'
        referenceId:
          type: string
          title: reference_id
          description: |-
            The reference id of the payment.
             For voucher, it is the voucher id.
          nullable: true
        timestamp:
          title: timestamp
          $ref: '#/components/schemas/google.protobuf.Timestamp'
      title: Payment
      additionalProperties: false
    order.v1.PaymentMethod:
      type: string
      title: PaymentMethod
      enum:
        - PAYMENT_METHOD_UNSPECIFIED
        - PAYMENT_METHOD_CASH
        - PAYMENT_METHOD_CARD
        - PAYMENT_METHOD_ORANGE_MONEY
        - PAYMENT_METHOD_MTN_MONEY
        - PAYMENT_METHOD_VOUCHER
        - PAYMENT_METHOD_MOBILE
    order.v1.UpdateInvoiceRequest:
      type: object
      properties:
        invoice:
          title: invoice
          description: The invoice to update.
          $ref: '#/components/schemas/order.v1.Invoice'
      title: UpdateInvoiceRequest
      additionalProperties: false
    order.v1.UpdateInvoiceResponse:
      type: object
      properties:
        success:
          type: boolean
          title: success
          description: Whether the invoice was successfully updated.
      title: UpdateInvoiceResponse
      additionalProperties: false
security: []
tags:
  - name: order.v1.InvoiceService
