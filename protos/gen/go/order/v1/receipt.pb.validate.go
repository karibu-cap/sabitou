// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: order/v1/receipt.proto

package orderv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on OrderReceiptItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrderReceiptItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderReceiptItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderReceiptItemMultiError, or nil if none found.
func (m *OrderReceiptItem) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderReceiptItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductId

	// no validation rules for ProductName

	// no validation rules for ProductPriceInCents

	// no validation rules for Quantity

	// no validation rules for ReceiptItemTotalPriceInCents

	if len(errors) > 0 {
		return OrderReceiptItemMultiError(errors)
	}

	return nil
}

// OrderReceiptItemMultiError is an error wrapping multiple validation errors
// returned by OrderReceiptItem.ValidateAll() if the designated constraints
// aren't met.
type OrderReceiptItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderReceiptItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderReceiptItemMultiError) AllErrors() []error { return m }

// OrderReceiptItemValidationError is the validation error returned by
// OrderReceiptItem.Validate if the designated constraints aren't met.
type OrderReceiptItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderReceiptItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderReceiptItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderReceiptItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderReceiptItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderReceiptItemValidationError) ErrorName() string { return "OrderReceiptItemValidationError" }

// Error satisfies the builtin error interface
func (e OrderReceiptItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderReceiptItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderReceiptItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderReceiptItemValidationError{}

// Validate checks the field values on OrderReceipt with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderReceipt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderReceipt with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderReceiptMultiError, or
// nil if none found.
func (m *OrderReceipt) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderReceipt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for OrderStatus

	// no validation rules for OrderTotalPriceInCents

	// no validation rules for OrderCreatedAt

	// no validation rules for OrderUpdatedAt

	// no validation rules for OrderResourceName

	// no validation rules for OrderResourceAddress

	// no validation rules for OrderResourcePhoneNumber

	// no validation rules for OrderResourceEmail

	// no validation rules for OrderResourceLogoMediaId

	for idx, item := range m.GetOrderItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderReceiptValidationError{
						field:  fmt.Sprintf("OrderItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderReceiptValidationError{
						field:  fmt.Sprintf("OrderItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderReceiptValidationError{
					field:  fmt.Sprintf("OrderItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrderReceiptMultiError(errors)
	}

	return nil
}

// OrderReceiptMultiError is an error wrapping multiple validation errors
// returned by OrderReceipt.ValidateAll() if the designated constraints aren't met.
type OrderReceiptMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderReceiptMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderReceiptMultiError) AllErrors() []error { return m }

// OrderReceiptValidationError is the validation error returned by
// OrderReceipt.Validate if the designated constraints aren't met.
type OrderReceiptValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderReceiptValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderReceiptValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderReceiptValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderReceiptValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderReceiptValidationError) ErrorName() string { return "OrderReceiptValidationError" }

// Error satisfies the builtin error interface
func (e OrderReceiptValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderReceipt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderReceiptValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderReceiptValidationError{}

// Validate checks the field values on GenerateBillingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateBillingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateBillingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateBillingRequestMultiError, or nil if none found.
func (m *GenerateBillingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateBillingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	if len(errors) > 0 {
		return GenerateBillingRequestMultiError(errors)
	}

	return nil
}

// GenerateBillingRequestMultiError is an error wrapping multiple validation
// errors returned by GenerateBillingRequest.ValidateAll() if the designated
// constraints aren't met.
type GenerateBillingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateBillingRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateBillingRequestMultiError) AllErrors() []error { return m }

// GenerateBillingRequestValidationError is the validation error returned by
// GenerateBillingRequest.Validate if the designated constraints aren't met.
type GenerateBillingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateBillingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateBillingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateBillingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateBillingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateBillingRequestValidationError) ErrorName() string {
	return "GenerateBillingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateBillingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateBillingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateBillingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateBillingRequestValidationError{}

// Validate checks the field values on GenerateBillingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateBillingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateBillingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateBillingResponseMultiError, or nil if none found.
func (m *GenerateBillingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateBillingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrderReceipt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateBillingResponseValidationError{
					field:  "OrderReceipt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateBillingResponseValidationError{
					field:  "OrderReceipt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderReceipt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateBillingResponseValidationError{
				field:  "OrderReceipt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GenerateBillingResponseMultiError(errors)
	}

	return nil
}

// GenerateBillingResponseMultiError is an error wrapping multiple validation
// errors returned by GenerateBillingResponse.ValidateAll() if the designated
// constraints aren't met.
type GenerateBillingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateBillingResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateBillingResponseMultiError) AllErrors() []error { return m }

// GenerateBillingResponseValidationError is the validation error returned by
// GenerateBillingResponse.Validate if the designated constraints aren't met.
type GenerateBillingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateBillingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateBillingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateBillingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateBillingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateBillingResponseValidationError) ErrorName() string {
	return "GenerateBillingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateBillingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateBillingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateBillingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateBillingResponseValidationError{}
