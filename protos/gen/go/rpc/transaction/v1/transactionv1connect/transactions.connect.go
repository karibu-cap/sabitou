// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: transaction/v1/transactions.proto

package transactionv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/karibu-cap/sabitou/protos/gen/go/rpc/transaction/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TransactionServiceName is the fully-qualified name of the TransactionService service.
	TransactionServiceName = "transaction.v1.TransactionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TransactionServiceAddTransactionProcedure is the fully-qualified name of the TransactionService's
	// AddTransaction RPC.
	TransactionServiceAddTransactionProcedure = "/transaction.v1.TransactionService/AddTransaction"
	// TransactionServiceGetTransactionProcedure is the fully-qualified name of the TransactionService's
	// GetTransaction RPC.
	TransactionServiceGetTransactionProcedure = "/transaction.v1.TransactionService/GetTransaction"
	// TransactionServiceUpdateTransactionProcedure is the fully-qualified name of the
	// TransactionService's UpdateTransaction RPC.
	TransactionServiceUpdateTransactionProcedure = "/transaction.v1.TransactionService/UpdateTransaction"
	// TransactionServiceDeleteTransactionProcedure is the fully-qualified name of the
	// TransactionService's DeleteTransaction RPC.
	TransactionServiceDeleteTransactionProcedure = "/transaction.v1.TransactionService/DeleteTransaction"
	// TransactionServiceFindTransactionsProcedure is the fully-qualified name of the
	// TransactionService's FindTransactions RPC.
	TransactionServiceFindTransactionsProcedure = "/transaction.v1.TransactionService/FindTransactions"
)

// TransactionServiceClient is a client for the transaction.v1.TransactionService service.
type TransactionServiceClient interface {
	// Adds a transaction.
	AddTransaction(context.Context, *connect.Request[v1.AddTransactionRequest]) (*connect.Response[v1.AddTransactionResponse], error)
	// Gets a transaction by id.
	GetTransaction(context.Context, *connect.Request[v1.GetTransactionRequest]) (*connect.Response[v1.GetTransactionResponse], error)
	// Updates a transaction.
	UpdateTransaction(context.Context, *connect.Request[v1.UpdateTransactionRequest]) (*connect.Response[v1.UpdateTransactionResponse], error)
	// Deletes a transaction.
	DeleteTransaction(context.Context, *connect.Request[v1.DeleteTransactionRequest]) (*connect.Response[v1.DeleteTransactionResponse], error)
	// Find transactions by query.
	FindTransactions(context.Context, *connect.Request[v1.FindTransactionsRequest]) (*connect.Response[v1.FindTransactionsResponse], error)
}

// NewTransactionServiceClient constructs a client for the transaction.v1.TransactionService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTransactionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TransactionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	transactionServiceMethods := v1.File_transaction_v1_transactions_proto.Services().ByName("TransactionService").Methods()
	return &transactionServiceClient{
		addTransaction: connect.NewClient[v1.AddTransactionRequest, v1.AddTransactionResponse](
			httpClient,
			baseURL+TransactionServiceAddTransactionProcedure,
			connect.WithSchema(transactionServiceMethods.ByName("AddTransaction")),
			connect.WithClientOptions(opts...),
		),
		getTransaction: connect.NewClient[v1.GetTransactionRequest, v1.GetTransactionResponse](
			httpClient,
			baseURL+TransactionServiceGetTransactionProcedure,
			connect.WithSchema(transactionServiceMethods.ByName("GetTransaction")),
			connect.WithClientOptions(opts...),
		),
		updateTransaction: connect.NewClient[v1.UpdateTransactionRequest, v1.UpdateTransactionResponse](
			httpClient,
			baseURL+TransactionServiceUpdateTransactionProcedure,
			connect.WithSchema(transactionServiceMethods.ByName("UpdateTransaction")),
			connect.WithClientOptions(opts...),
		),
		deleteTransaction: connect.NewClient[v1.DeleteTransactionRequest, v1.DeleteTransactionResponse](
			httpClient,
			baseURL+TransactionServiceDeleteTransactionProcedure,
			connect.WithSchema(transactionServiceMethods.ByName("DeleteTransaction")),
			connect.WithClientOptions(opts...),
		),
		findTransactions: connect.NewClient[v1.FindTransactionsRequest, v1.FindTransactionsResponse](
			httpClient,
			baseURL+TransactionServiceFindTransactionsProcedure,
			connect.WithSchema(transactionServiceMethods.ByName("FindTransactions")),
			connect.WithClientOptions(opts...),
		),
	}
}

// transactionServiceClient implements TransactionServiceClient.
type transactionServiceClient struct {
	addTransaction    *connect.Client[v1.AddTransactionRequest, v1.AddTransactionResponse]
	getTransaction    *connect.Client[v1.GetTransactionRequest, v1.GetTransactionResponse]
	updateTransaction *connect.Client[v1.UpdateTransactionRequest, v1.UpdateTransactionResponse]
	deleteTransaction *connect.Client[v1.DeleteTransactionRequest, v1.DeleteTransactionResponse]
	findTransactions  *connect.Client[v1.FindTransactionsRequest, v1.FindTransactionsResponse]
}

// AddTransaction calls transaction.v1.TransactionService.AddTransaction.
func (c *transactionServiceClient) AddTransaction(ctx context.Context, req *connect.Request[v1.AddTransactionRequest]) (*connect.Response[v1.AddTransactionResponse], error) {
	return c.addTransaction.CallUnary(ctx, req)
}

// GetTransaction calls transaction.v1.TransactionService.GetTransaction.
func (c *transactionServiceClient) GetTransaction(ctx context.Context, req *connect.Request[v1.GetTransactionRequest]) (*connect.Response[v1.GetTransactionResponse], error) {
	return c.getTransaction.CallUnary(ctx, req)
}

// UpdateTransaction calls transaction.v1.TransactionService.UpdateTransaction.
func (c *transactionServiceClient) UpdateTransaction(ctx context.Context, req *connect.Request[v1.UpdateTransactionRequest]) (*connect.Response[v1.UpdateTransactionResponse], error) {
	return c.updateTransaction.CallUnary(ctx, req)
}

// DeleteTransaction calls transaction.v1.TransactionService.DeleteTransaction.
func (c *transactionServiceClient) DeleteTransaction(ctx context.Context, req *connect.Request[v1.DeleteTransactionRequest]) (*connect.Response[v1.DeleteTransactionResponse], error) {
	return c.deleteTransaction.CallUnary(ctx, req)
}

// FindTransactions calls transaction.v1.TransactionService.FindTransactions.
func (c *transactionServiceClient) FindTransactions(ctx context.Context, req *connect.Request[v1.FindTransactionsRequest]) (*connect.Response[v1.FindTransactionsResponse], error) {
	return c.findTransactions.CallUnary(ctx, req)
}

// TransactionServiceHandler is an implementation of the transaction.v1.TransactionService service.
type TransactionServiceHandler interface {
	// Adds a transaction.
	AddTransaction(context.Context, *connect.Request[v1.AddTransactionRequest]) (*connect.Response[v1.AddTransactionResponse], error)
	// Gets a transaction by id.
	GetTransaction(context.Context, *connect.Request[v1.GetTransactionRequest]) (*connect.Response[v1.GetTransactionResponse], error)
	// Updates a transaction.
	UpdateTransaction(context.Context, *connect.Request[v1.UpdateTransactionRequest]) (*connect.Response[v1.UpdateTransactionResponse], error)
	// Deletes a transaction.
	DeleteTransaction(context.Context, *connect.Request[v1.DeleteTransactionRequest]) (*connect.Response[v1.DeleteTransactionResponse], error)
	// Find transactions by query.
	FindTransactions(context.Context, *connect.Request[v1.FindTransactionsRequest]) (*connect.Response[v1.FindTransactionsResponse], error)
}

// NewTransactionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTransactionServiceHandler(svc TransactionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	transactionServiceMethods := v1.File_transaction_v1_transactions_proto.Services().ByName("TransactionService").Methods()
	transactionServiceAddTransactionHandler := connect.NewUnaryHandler(
		TransactionServiceAddTransactionProcedure,
		svc.AddTransaction,
		connect.WithSchema(transactionServiceMethods.ByName("AddTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	transactionServiceGetTransactionHandler := connect.NewUnaryHandler(
		TransactionServiceGetTransactionProcedure,
		svc.GetTransaction,
		connect.WithSchema(transactionServiceMethods.ByName("GetTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	transactionServiceUpdateTransactionHandler := connect.NewUnaryHandler(
		TransactionServiceUpdateTransactionProcedure,
		svc.UpdateTransaction,
		connect.WithSchema(transactionServiceMethods.ByName("UpdateTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	transactionServiceDeleteTransactionHandler := connect.NewUnaryHandler(
		TransactionServiceDeleteTransactionProcedure,
		svc.DeleteTransaction,
		connect.WithSchema(transactionServiceMethods.ByName("DeleteTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	transactionServiceFindTransactionsHandler := connect.NewUnaryHandler(
		TransactionServiceFindTransactionsProcedure,
		svc.FindTransactions,
		connect.WithSchema(transactionServiceMethods.ByName("FindTransactions")),
		connect.WithHandlerOptions(opts...),
	)
	return "/transaction.v1.TransactionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TransactionServiceAddTransactionProcedure:
			transactionServiceAddTransactionHandler.ServeHTTP(w, r)
		case TransactionServiceGetTransactionProcedure:
			transactionServiceGetTransactionHandler.ServeHTTP(w, r)
		case TransactionServiceUpdateTransactionProcedure:
			transactionServiceUpdateTransactionHandler.ServeHTTP(w, r)
		case TransactionServiceDeleteTransactionProcedure:
			transactionServiceDeleteTransactionHandler.ServeHTTP(w, r)
		case TransactionServiceFindTransactionsProcedure:
			transactionServiceFindTransactionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTransactionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTransactionServiceHandler struct{}

func (UnimplementedTransactionServiceHandler) AddTransaction(context.Context, *connect.Request[v1.AddTransactionRequest]) (*connect.Response[v1.AddTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("transaction.v1.TransactionService.AddTransaction is not implemented"))
}

func (UnimplementedTransactionServiceHandler) GetTransaction(context.Context, *connect.Request[v1.GetTransactionRequest]) (*connect.Response[v1.GetTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("transaction.v1.TransactionService.GetTransaction is not implemented"))
}

func (UnimplementedTransactionServiceHandler) UpdateTransaction(context.Context, *connect.Request[v1.UpdateTransactionRequest]) (*connect.Response[v1.UpdateTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("transaction.v1.TransactionService.UpdateTransaction is not implemented"))
}

func (UnimplementedTransactionServiceHandler) DeleteTransaction(context.Context, *connect.Request[v1.DeleteTransactionRequest]) (*connect.Response[v1.DeleteTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("transaction.v1.TransactionService.DeleteTransaction is not implemented"))
}

func (UnimplementedTransactionServiceHandler) FindTransactions(context.Context, *connect.Request[v1.FindTransactionsRequest]) (*connect.Response[v1.FindTransactionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("transaction.v1.TransactionService.FindTransactions is not implemented"))
}
