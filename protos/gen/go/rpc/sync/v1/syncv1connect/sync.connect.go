// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sync/v1/sync.proto

package syncv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/karibu-cap/sabitou/protos/gen/go/rpc/sync/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SyncServiceName is the fully-qualified name of the SyncService service.
	SyncServiceName = "sync.v1.SyncService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SyncServiceSubmitSyncOperationsProcedure is the fully-qualified name of the SyncService's
	// SubmitSyncOperations RPC.
	SyncServiceSubmitSyncOperationsProcedure = "/sync.v1.SyncService/SubmitSyncOperations"
	// SyncServiceGetSyncOperationsStatusProcedure is the fully-qualified name of the SyncService's
	// GetSyncOperationsStatus RPC.
	SyncServiceGetSyncOperationsStatusProcedure = "/sync.v1.SyncService/GetSyncOperationsStatus"
	// SyncServiceStreamSyncOperationsProcedure is the fully-qualified name of the SyncService's
	// StreamSyncOperations RPC.
	SyncServiceStreamSyncOperationsProcedure = "/sync.v1.SyncService/StreamSyncOperations"
	// SyncServiceRetrySyncOperationsProcedure is the fully-qualified name of the SyncService's
	// RetrySyncOperations RPC.
	SyncServiceRetrySyncOperationsProcedure = "/sync.v1.SyncService/RetrySyncOperations"
)

// SyncServiceClient is a client for the sync.v1.SyncService service.
type SyncServiceClient interface {
	// Submit sync operations for processing
	SubmitSyncOperations(context.Context, *connect.Request[v1.SubmitSyncOperationsRequest]) (*connect.Response[v1.SubmitSyncOperationsResponse], error)
	// Get status of sync operations
	GetSyncOperationsStatus(context.Context, *connect.Request[v1.GetSyncOperationsStatusRequest]) (*connect.Response[v1.GetSyncOperationsStatusResponse], error)
	// Stream sync operations updates in real-time
	StreamSyncOperations(context.Context, *connect.Request[v1.StreamSyncOperationsRequest]) (*connect.ServerStreamForClient[v1.StreamSyncOperationsResponse], error)
	// Retry failed sync operations
	RetrySyncOperations(context.Context, *connect.Request[v1.RetrySyncOperationsRequest]) (*connect.Response[v1.RetrySyncOperationsResponse], error)
}

// NewSyncServiceClient constructs a client for the sync.v1.SyncService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSyncServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SyncServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	syncServiceMethods := v1.File_sync_v1_sync_proto.Services().ByName("SyncService").Methods()
	return &syncServiceClient{
		submitSyncOperations: connect.NewClient[v1.SubmitSyncOperationsRequest, v1.SubmitSyncOperationsResponse](
			httpClient,
			baseURL+SyncServiceSubmitSyncOperationsProcedure,
			connect.WithSchema(syncServiceMethods.ByName("SubmitSyncOperations")),
			connect.WithClientOptions(opts...),
		),
		getSyncOperationsStatus: connect.NewClient[v1.GetSyncOperationsStatusRequest, v1.GetSyncOperationsStatusResponse](
			httpClient,
			baseURL+SyncServiceGetSyncOperationsStatusProcedure,
			connect.WithSchema(syncServiceMethods.ByName("GetSyncOperationsStatus")),
			connect.WithClientOptions(opts...),
		),
		streamSyncOperations: connect.NewClient[v1.StreamSyncOperationsRequest, v1.StreamSyncOperationsResponse](
			httpClient,
			baseURL+SyncServiceStreamSyncOperationsProcedure,
			connect.WithSchema(syncServiceMethods.ByName("StreamSyncOperations")),
			connect.WithClientOptions(opts...),
		),
		retrySyncOperations: connect.NewClient[v1.RetrySyncOperationsRequest, v1.RetrySyncOperationsResponse](
			httpClient,
			baseURL+SyncServiceRetrySyncOperationsProcedure,
			connect.WithSchema(syncServiceMethods.ByName("RetrySyncOperations")),
			connect.WithClientOptions(opts...),
		),
	}
}

// syncServiceClient implements SyncServiceClient.
type syncServiceClient struct {
	submitSyncOperations    *connect.Client[v1.SubmitSyncOperationsRequest, v1.SubmitSyncOperationsResponse]
	getSyncOperationsStatus *connect.Client[v1.GetSyncOperationsStatusRequest, v1.GetSyncOperationsStatusResponse]
	streamSyncOperations    *connect.Client[v1.StreamSyncOperationsRequest, v1.StreamSyncOperationsResponse]
	retrySyncOperations     *connect.Client[v1.RetrySyncOperationsRequest, v1.RetrySyncOperationsResponse]
}

// SubmitSyncOperations calls sync.v1.SyncService.SubmitSyncOperations.
func (c *syncServiceClient) SubmitSyncOperations(ctx context.Context, req *connect.Request[v1.SubmitSyncOperationsRequest]) (*connect.Response[v1.SubmitSyncOperationsResponse], error) {
	return c.submitSyncOperations.CallUnary(ctx, req)
}

// GetSyncOperationsStatus calls sync.v1.SyncService.GetSyncOperationsStatus.
func (c *syncServiceClient) GetSyncOperationsStatus(ctx context.Context, req *connect.Request[v1.GetSyncOperationsStatusRequest]) (*connect.Response[v1.GetSyncOperationsStatusResponse], error) {
	return c.getSyncOperationsStatus.CallUnary(ctx, req)
}

// StreamSyncOperations calls sync.v1.SyncService.StreamSyncOperations.
func (c *syncServiceClient) StreamSyncOperations(ctx context.Context, req *connect.Request[v1.StreamSyncOperationsRequest]) (*connect.ServerStreamForClient[v1.StreamSyncOperationsResponse], error) {
	return c.streamSyncOperations.CallServerStream(ctx, req)
}

// RetrySyncOperations calls sync.v1.SyncService.RetrySyncOperations.
func (c *syncServiceClient) RetrySyncOperations(ctx context.Context, req *connect.Request[v1.RetrySyncOperationsRequest]) (*connect.Response[v1.RetrySyncOperationsResponse], error) {
	return c.retrySyncOperations.CallUnary(ctx, req)
}

// SyncServiceHandler is an implementation of the sync.v1.SyncService service.
type SyncServiceHandler interface {
	// Submit sync operations for processing
	SubmitSyncOperations(context.Context, *connect.Request[v1.SubmitSyncOperationsRequest]) (*connect.Response[v1.SubmitSyncOperationsResponse], error)
	// Get status of sync operations
	GetSyncOperationsStatus(context.Context, *connect.Request[v1.GetSyncOperationsStatusRequest]) (*connect.Response[v1.GetSyncOperationsStatusResponse], error)
	// Stream sync operations updates in real-time
	StreamSyncOperations(context.Context, *connect.Request[v1.StreamSyncOperationsRequest], *connect.ServerStream[v1.StreamSyncOperationsResponse]) error
	// Retry failed sync operations
	RetrySyncOperations(context.Context, *connect.Request[v1.RetrySyncOperationsRequest]) (*connect.Response[v1.RetrySyncOperationsResponse], error)
}

// NewSyncServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSyncServiceHandler(svc SyncServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	syncServiceMethods := v1.File_sync_v1_sync_proto.Services().ByName("SyncService").Methods()
	syncServiceSubmitSyncOperationsHandler := connect.NewUnaryHandler(
		SyncServiceSubmitSyncOperationsProcedure,
		svc.SubmitSyncOperations,
		connect.WithSchema(syncServiceMethods.ByName("SubmitSyncOperations")),
		connect.WithHandlerOptions(opts...),
	)
	syncServiceGetSyncOperationsStatusHandler := connect.NewUnaryHandler(
		SyncServiceGetSyncOperationsStatusProcedure,
		svc.GetSyncOperationsStatus,
		connect.WithSchema(syncServiceMethods.ByName("GetSyncOperationsStatus")),
		connect.WithHandlerOptions(opts...),
	)
	syncServiceStreamSyncOperationsHandler := connect.NewServerStreamHandler(
		SyncServiceStreamSyncOperationsProcedure,
		svc.StreamSyncOperations,
		connect.WithSchema(syncServiceMethods.ByName("StreamSyncOperations")),
		connect.WithHandlerOptions(opts...),
	)
	syncServiceRetrySyncOperationsHandler := connect.NewUnaryHandler(
		SyncServiceRetrySyncOperationsProcedure,
		svc.RetrySyncOperations,
		connect.WithSchema(syncServiceMethods.ByName("RetrySyncOperations")),
		connect.WithHandlerOptions(opts...),
	)
	return "/sync.v1.SyncService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SyncServiceSubmitSyncOperationsProcedure:
			syncServiceSubmitSyncOperationsHandler.ServeHTTP(w, r)
		case SyncServiceGetSyncOperationsStatusProcedure:
			syncServiceGetSyncOperationsStatusHandler.ServeHTTP(w, r)
		case SyncServiceStreamSyncOperationsProcedure:
			syncServiceStreamSyncOperationsHandler.ServeHTTP(w, r)
		case SyncServiceRetrySyncOperationsProcedure:
			syncServiceRetrySyncOperationsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSyncServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSyncServiceHandler struct{}

func (UnimplementedSyncServiceHandler) SubmitSyncOperations(context.Context, *connect.Request[v1.SubmitSyncOperationsRequest]) (*connect.Response[v1.SubmitSyncOperationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sync.v1.SyncService.SubmitSyncOperations is not implemented"))
}

func (UnimplementedSyncServiceHandler) GetSyncOperationsStatus(context.Context, *connect.Request[v1.GetSyncOperationsStatusRequest]) (*connect.Response[v1.GetSyncOperationsStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sync.v1.SyncService.GetSyncOperationsStatus is not implemented"))
}

func (UnimplementedSyncServiceHandler) StreamSyncOperations(context.Context, *connect.Request[v1.StreamSyncOperationsRequest], *connect.ServerStream[v1.StreamSyncOperationsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("sync.v1.SyncService.StreamSyncOperations is not implemented"))
}

func (UnimplementedSyncServiceHandler) RetrySyncOperations(context.Context, *connect.Request[v1.RetrySyncOperationsRequest]) (*connect.Response[v1.RetrySyncOperationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sync.v1.SyncService.RetrySyncOperations is not implemented"))
}
