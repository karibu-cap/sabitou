// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: inventory/v1/stock_in_bound.proto

package inventoryv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/karibu-cap/sabitou/protos/gen/go/rpc/inventory/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StockInboundServiceName is the fully-qualified name of the StockInboundService service.
	StockInboundServiceName = "inventory.v1.StockInboundService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StockInboundServiceCreateStockInboundProcedure is the fully-qualified name of the
	// StockInboundService's CreateStockInbound RPC.
	StockInboundServiceCreateStockInboundProcedure = "/inventory.v1.StockInboundService/CreateStockInbound"
	// StockInboundServiceUpdateStockInboundProcedure is the fully-qualified name of the
	// StockInboundService's UpdateStockInbound RPC.
	StockInboundServiceUpdateStockInboundProcedure = "/inventory.v1.StockInboundService/UpdateStockInbound"
)

// StockInboundServiceClient is a client for the inventory.v1.StockInboundService service.
type StockInboundServiceClient interface {
	// Creates a stock in bound.
	CreateStockInbound(context.Context, *connect.Request[v1.CreateStockInboundRequest]) (*connect.Response[v1.CreateStockInboundResponse], error)
	// Updates the stock in bound.
	UpdateStockInbound(context.Context, *connect.Request[v1.UpdateStockInboundRequest]) (*connect.Response[v1.UpdateStockInboundResponse], error)
}

// NewStockInboundServiceClient constructs a client for the inventory.v1.StockInboundService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStockInboundServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StockInboundServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	stockInboundServiceMethods := v1.File_inventory_v1_stock_in_bound_proto.Services().ByName("StockInboundService").Methods()
	return &stockInboundServiceClient{
		createStockInbound: connect.NewClient[v1.CreateStockInboundRequest, v1.CreateStockInboundResponse](
			httpClient,
			baseURL+StockInboundServiceCreateStockInboundProcedure,
			connect.WithSchema(stockInboundServiceMethods.ByName("CreateStockInbound")),
			connect.WithClientOptions(opts...),
		),
		updateStockInbound: connect.NewClient[v1.UpdateStockInboundRequest, v1.UpdateStockInboundResponse](
			httpClient,
			baseURL+StockInboundServiceUpdateStockInboundProcedure,
			connect.WithSchema(stockInboundServiceMethods.ByName("UpdateStockInbound")),
			connect.WithClientOptions(opts...),
		),
	}
}

// stockInboundServiceClient implements StockInboundServiceClient.
type stockInboundServiceClient struct {
	createStockInbound *connect.Client[v1.CreateStockInboundRequest, v1.CreateStockInboundResponse]
	updateStockInbound *connect.Client[v1.UpdateStockInboundRequest, v1.UpdateStockInboundResponse]
}

// CreateStockInbound calls inventory.v1.StockInboundService.CreateStockInbound.
func (c *stockInboundServiceClient) CreateStockInbound(ctx context.Context, req *connect.Request[v1.CreateStockInboundRequest]) (*connect.Response[v1.CreateStockInboundResponse], error) {
	return c.createStockInbound.CallUnary(ctx, req)
}

// UpdateStockInbound calls inventory.v1.StockInboundService.UpdateStockInbound.
func (c *stockInboundServiceClient) UpdateStockInbound(ctx context.Context, req *connect.Request[v1.UpdateStockInboundRequest]) (*connect.Response[v1.UpdateStockInboundResponse], error) {
	return c.updateStockInbound.CallUnary(ctx, req)
}

// StockInboundServiceHandler is an implementation of the inventory.v1.StockInboundService service.
type StockInboundServiceHandler interface {
	// Creates a stock in bound.
	CreateStockInbound(context.Context, *connect.Request[v1.CreateStockInboundRequest]) (*connect.Response[v1.CreateStockInboundResponse], error)
	// Updates the stock in bound.
	UpdateStockInbound(context.Context, *connect.Request[v1.UpdateStockInboundRequest]) (*connect.Response[v1.UpdateStockInboundResponse], error)
}

// NewStockInboundServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStockInboundServiceHandler(svc StockInboundServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	stockInboundServiceMethods := v1.File_inventory_v1_stock_in_bound_proto.Services().ByName("StockInboundService").Methods()
	stockInboundServiceCreateStockInboundHandler := connect.NewUnaryHandler(
		StockInboundServiceCreateStockInboundProcedure,
		svc.CreateStockInbound,
		connect.WithSchema(stockInboundServiceMethods.ByName("CreateStockInbound")),
		connect.WithHandlerOptions(opts...),
	)
	stockInboundServiceUpdateStockInboundHandler := connect.NewUnaryHandler(
		StockInboundServiceUpdateStockInboundProcedure,
		svc.UpdateStockInbound,
		connect.WithSchema(stockInboundServiceMethods.ByName("UpdateStockInbound")),
		connect.WithHandlerOptions(opts...),
	)
	return "/inventory.v1.StockInboundService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StockInboundServiceCreateStockInboundProcedure:
			stockInboundServiceCreateStockInboundHandler.ServeHTTP(w, r)
		case StockInboundServiceUpdateStockInboundProcedure:
			stockInboundServiceUpdateStockInboundHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStockInboundServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStockInboundServiceHandler struct{}

func (UnimplementedStockInboundServiceHandler) CreateStockInbound(context.Context, *connect.Request[v1.CreateStockInboundRequest]) (*connect.Response[v1.CreateStockInboundResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.StockInboundService.CreateStockInbound is not implemented"))
}

func (UnimplementedStockInboundServiceHandler) UpdateStockInbound(context.Context, *connect.Request[v1.UpdateStockInboundRequest]) (*connect.Response[v1.UpdateStockInboundResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.StockInboundService.UpdateStockInbound is not implemented"))
}
