// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: inventory/v1/store_product.proto

package inventoryv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/karibu-cap/sabitou/protos/gen/go/rpc/inventory/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StoreProductServiceName is the fully-qualified name of the StoreProductService service.
	StoreProductServiceName = "inventory.v1.StoreProductService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StoreProductServiceFindGlobalProductsProcedure is the fully-qualified name of the
	// StoreProductService's FindGlobalProducts RPC.
	StoreProductServiceFindGlobalProductsProcedure = "/inventory.v1.StoreProductService/FindGlobalProducts"
	// StoreProductServiceCreateGlobalProductProcedure is the fully-qualified name of the
	// StoreProductService's CreateGlobalProduct RPC.
	StoreProductServiceCreateGlobalProductProcedure = "/inventory.v1.StoreProductService/CreateGlobalProduct"
	// StoreProductServiceUpdateGlobalProductProcedure is the fully-qualified name of the
	// StoreProductService's UpdateGlobalProduct RPC.
	StoreProductServiceUpdateGlobalProductProcedure = "/inventory.v1.StoreProductService/UpdateGlobalProduct"
	// StoreProductServiceDeleteGlobalProductProcedure is the fully-qualified name of the
	// StoreProductService's DeleteGlobalProduct RPC.
	StoreProductServiceDeleteGlobalProductProcedure = "/inventory.v1.StoreProductService/DeleteGlobalProduct"
	// StoreProductServiceAddProductProcedure is the fully-qualified name of the StoreProductService's
	// AddProduct RPC.
	StoreProductServiceAddProductProcedure = "/inventory.v1.StoreProductService/AddProduct"
	// StoreProductServiceGetStoreProductProcedure is the fully-qualified name of the
	// StoreProductService's GetStoreProduct RPC.
	StoreProductServiceGetStoreProductProcedure = "/inventory.v1.StoreProductService/GetStoreProduct"
	// StoreProductServiceUpdateStoreProductProcedure is the fully-qualified name of the
	// StoreProductService's UpdateStoreProduct RPC.
	StoreProductServiceUpdateStoreProductProcedure = "/inventory.v1.StoreProductService/UpdateStoreProduct"
	// StoreProductServiceDeleteStoreProductProcedure is the fully-qualified name of the
	// StoreProductService's DeleteStoreProduct RPC.
	StoreProductServiceDeleteStoreProductProcedure = "/inventory.v1.StoreProductService/DeleteStoreProduct"
	// StoreProductServiceFindStoreProductsProcedure is the fully-qualified name of the
	// StoreProductService's FindStoreProducts RPC.
	StoreProductServiceFindStoreProductsProcedure = "/inventory.v1.StoreProductService/FindStoreProducts"
	// StoreProductServiceStreamStoreProductsProcedure is the fully-qualified name of the
	// StoreProductService's StreamStoreProducts RPC.
	StoreProductServiceStreamStoreProductsProcedure = "/inventory.v1.StoreProductService/StreamStoreProducts"
	// StoreProductServiceStreamGlobalProductsProcedure is the fully-qualified name of the
	// StoreProductService's StreamGlobalProducts RPC.
	StoreProductServiceStreamGlobalProductsProcedure = "/inventory.v1.StoreProductService/StreamGlobalProducts"
	// StoreProductServiceListStoreProductsProcedure is the fully-qualified name of the
	// StoreProductService's ListStoreProducts RPC.
	StoreProductServiceListStoreProductsProcedure = "/inventory.v1.StoreProductService/ListStoreProducts"
)

// StoreProductServiceClient is a client for the inventory.v1.StoreProductService service.
type StoreProductServiceClient interface {
	// Finds products by name.
	FindGlobalProducts(context.Context, *connect.Request[v1.FindGlobalProductsRequest]) (*connect.Response[v1.FindGlobalProductsResponse], error)
	// Creates a global product.
	CreateGlobalProduct(context.Context, *connect.Request[v1.CreateGlobalProductRequest]) (*connect.Response[v1.CreateGlobalProductResponse], error)
	// Updates a global product.
	UpdateGlobalProduct(context.Context, *connect.Request[v1.UpdateGlobalProductRequest]) (*connect.Response[v1.UpdateGlobalProductResponse], error)
	// Deletes a global product.
	DeleteGlobalProduct(context.Context, *connect.Request[v1.DeleteGlobalProductRequest]) (*connect.Response[v1.DeleteGlobalProductResponse], error)
	// Adds a product to a store.
	AddProduct(context.Context, *connect.Request[v1.AddStoreProductRequest]) (*connect.Response[v1.AddStoreProductResponse], error)
	// Gets a store product by id.
	GetStoreProduct(context.Context, *connect.Request[v1.GetStoreProductRequest]) (*connect.Response[v1.GetStoreProductResponse], error)
	// Updates a store product.
	UpdateStoreProduct(context.Context, *connect.Request[v1.UpdateStoreProductRequest]) (*connect.Response[v1.UpdateStoreProductResponse], error)
	// Deletes a store product.
	// Only store products that are not in any orders can be deleted.
	DeleteStoreProduct(context.Context, *connect.Request[v1.DeleteStoreProductRequest]) (*connect.Response[v1.DeleteStoreProductResponse], error)
	// Finds products by name.
	FindProducts(context.Context, *connect.Request[v1.FindProductsRequest]) (*connect.Response[v1.FindProductsResponse], error)
	// Streams all products for a store for real-time updates.
	StreamStoreProducts(context.Context, *connect.Request[v1.StreamStoreProductsRequest]) (*connect.ServerStreamForClient[v1.StreamStoreProductsResponse], error)
	// Streams all global products for real-time updates.
	StreamGlobalProducts(context.Context, *connect.Request[v1.StreamGlobalProductsRequest]) (*connect.ServerStreamForClient[v1.StreamGlobalProductsResponse], error)
	// Lists products with pagination and filters.
	ListStoreProducts(context.Context, *connect.Request[v1.ListStoreProductsRequest]) (*connect.Response[v1.ListStoreProductsResponse], error)
}

// NewStoreProductServiceClient constructs a client for the inventory.v1.StoreProductService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStoreProductServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StoreProductServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	storeProductServiceMethods := v1.File_inventory_v1_store_product_proto.Services().ByName("StoreProductService").Methods()
	return &storeProductServiceClient{
		findGlobalProducts: connect.NewClient[v1.FindGlobalProductsRequest, v1.FindGlobalProductsResponse](
			httpClient,
			baseURL+StoreProductServiceFindGlobalProductsProcedure,
			connect.WithSchema(storeProductServiceMethods.ByName("FindGlobalProducts")),
			connect.WithClientOptions(opts...),
		),
		createGlobalProduct: connect.NewClient[v1.CreateGlobalProductRequest, v1.CreateGlobalProductResponse](
			httpClient,
			baseURL+StoreProductServiceCreateGlobalProductProcedure,
			connect.WithSchema(storeProductServiceMethods.ByName("CreateGlobalProduct")),
			connect.WithClientOptions(opts...),
		),
		updateGlobalProduct: connect.NewClient[v1.UpdateGlobalProductRequest, v1.UpdateGlobalProductResponse](
			httpClient,
			baseURL+StoreProductServiceUpdateGlobalProductProcedure,
			connect.WithSchema(storeProductServiceMethods.ByName("UpdateGlobalProduct")),
			connect.WithClientOptions(opts...),
		),
		deleteGlobalProduct: connect.NewClient[v1.DeleteGlobalProductRequest, v1.DeleteGlobalProductResponse](
			httpClient,
			baseURL+StoreProductServiceDeleteGlobalProductProcedure,
			connect.WithSchema(storeProductServiceMethods.ByName("DeleteGlobalProduct")),
			connect.WithClientOptions(opts...),
		),
		addProduct: connect.NewClient[v1.AddStoreProductRequest, v1.AddStoreProductResponse](
			httpClient,
			baseURL+StoreProductServiceAddProductProcedure,
			connect.WithSchema(storeProductServiceMethods.ByName("AddProduct")),
			connect.WithClientOptions(opts...),
		),
		getStoreProduct: connect.NewClient[v1.GetStoreProductRequest, v1.GetStoreProductResponse](
			httpClient,
			baseURL+StoreProductServiceGetStoreProductProcedure,
			connect.WithSchema(storeProductServiceMethods.ByName("GetStoreProduct")),
			connect.WithClientOptions(opts...),
		),
		updateStoreProduct: connect.NewClient[v1.UpdateStoreProductRequest, v1.UpdateStoreProductResponse](
			httpClient,
			baseURL+StoreProductServiceUpdateStoreProductProcedure,
			connect.WithSchema(storeProductServiceMethods.ByName("UpdateStoreProduct")),
			connect.WithClientOptions(opts...),
		),
		deleteStoreProduct: connect.NewClient[v1.DeleteStoreProductRequest, v1.DeleteStoreProductResponse](
			httpClient,
			baseURL+StoreProductServiceDeleteStoreProductProcedure,
			connect.WithSchema(storeProductServiceMethods.ByName("DeleteStoreProduct")),
			connect.WithClientOptions(opts...),
		),
		findProducts: connect.NewClient[v1.FindProductsRequest, v1.FindProductsResponse](
			httpClient,
			baseURL+StoreProductServiceFindProductsProcedure,
			connect.WithSchema(storeProductServiceMethods.ByName("FindProducts")),
			connect.WithClientOptions(opts...),
		),
		streamStoreProducts: connect.NewClient[v1.StreamStoreProductsRequest, v1.StreamStoreProductsResponse](
			httpClient,
			baseURL+StoreProductServiceStreamStoreProductsProcedure,
			connect.WithSchema(storeProductServiceMethods.ByName("StreamStoreProducts")),
			connect.WithClientOptions(opts...),
		),
		streamGlobalProducts: connect.NewClient[v1.StreamGlobalProductsRequest, v1.StreamGlobalProductsResponse](
			httpClient,
			baseURL+StoreProductServiceStreamGlobalProductsProcedure,
			connect.WithSchema(storeProductServiceMethods.ByName("StreamGlobalProducts")),
			connect.WithClientOptions(opts...),
		),
		listStoreProducts: connect.NewClient[v1.ListStoreProductsRequest, v1.ListStoreProductsResponse](
			httpClient,
			baseURL+StoreProductServiceListStoreProductsProcedure,
			connect.WithSchema(storeProductServiceMethods.ByName("ListStoreProducts")),
			connect.WithClientOptions(opts...),
		),
	}
}

// storeProductServiceClient implements StoreProductServiceClient.
type storeProductServiceClient struct {
	findGlobalProducts   *connect.Client[v1.FindGlobalProductsRequest, v1.FindGlobalProductsResponse]
	createGlobalProduct  *connect.Client[v1.CreateGlobalProductRequest, v1.CreateGlobalProductResponse]
	updateGlobalProduct  *connect.Client[v1.UpdateGlobalProductRequest, v1.UpdateGlobalProductResponse]
	deleteGlobalProduct  *connect.Client[v1.DeleteGlobalProductRequest, v1.DeleteGlobalProductResponse]
	addProduct           *connect.Client[v1.AddStoreProductRequest, v1.AddStoreProductResponse]
	getStoreProduct      *connect.Client[v1.GetStoreProductRequest, v1.GetStoreProductResponse]
	updateStoreProduct   *connect.Client[v1.UpdateStoreProductRequest, v1.UpdateStoreProductResponse]
	deleteStoreProduct   *connect.Client[v1.DeleteStoreProductRequest, v1.DeleteStoreProductResponse]
	findStoreProducts    *connect.Client[v1.FindStoreProductsRequest, v1.FindStoreProductsResponse]
	streamStoreProducts  *connect.Client[v1.StreamStoreProductsRequest, v1.StreamStoreProductsResponse]
	streamGlobalProducts *connect.Client[v1.StreamGlobalProductsRequest, v1.StreamGlobalProductsResponse]
	listStoreProducts    *connect.Client[v1.ListStoreProductsRequest, v1.ListStoreProductsResponse]
}

// FindGlobalProducts calls inventory.v1.StoreProductService.FindGlobalProducts.
func (c *storeProductServiceClient) FindGlobalProducts(ctx context.Context, req *connect.Request[v1.FindGlobalProductsRequest]) (*connect.Response[v1.FindGlobalProductsResponse], error) {
	return c.findGlobalProducts.CallUnary(ctx, req)
}

// CreateGlobalProduct calls inventory.v1.StoreProductService.CreateGlobalProduct.
func (c *storeProductServiceClient) CreateGlobalProduct(ctx context.Context, req *connect.Request[v1.CreateGlobalProductRequest]) (*connect.Response[v1.CreateGlobalProductResponse], error) {
	return c.createGlobalProduct.CallUnary(ctx, req)
}

// UpdateGlobalProduct calls inventory.v1.StoreProductService.UpdateGlobalProduct.
func (c *storeProductServiceClient) UpdateGlobalProduct(ctx context.Context, req *connect.Request[v1.UpdateGlobalProductRequest]) (*connect.Response[v1.UpdateGlobalProductResponse], error) {
	return c.updateGlobalProduct.CallUnary(ctx, req)
}

// DeleteGlobalProduct calls inventory.v1.StoreProductService.DeleteGlobalProduct.
func (c *storeProductServiceClient) DeleteGlobalProduct(ctx context.Context, req *connect.Request[v1.DeleteGlobalProductRequest]) (*connect.Response[v1.DeleteGlobalProductResponse], error) {
	return c.deleteGlobalProduct.CallUnary(ctx, req)
}

// AddProduct calls inventory.v1.StoreProductService.AddProduct.
func (c *storeProductServiceClient) AddProduct(ctx context.Context, req *connect.Request[v1.AddStoreProductRequest]) (*connect.Response[v1.AddStoreProductResponse], error) {
	return c.addProduct.CallUnary(ctx, req)
}

// GetStoreProduct calls inventory.v1.StoreProductService.GetStoreProduct.
func (c *storeProductServiceClient) GetStoreProduct(ctx context.Context, req *connect.Request[v1.GetStoreProductRequest]) (*connect.Response[v1.GetStoreProductResponse], error) {
	return c.getStoreProduct.CallUnary(ctx, req)
}

// UpdateStoreProduct calls inventory.v1.StoreProductService.UpdateStoreProduct.
func (c *storeProductServiceClient) UpdateStoreProduct(ctx context.Context, req *connect.Request[v1.UpdateStoreProductRequest]) (*connect.Response[v1.UpdateStoreProductResponse], error) {
	return c.updateStoreProduct.CallUnary(ctx, req)
}

// DeleteStoreProduct calls inventory.v1.StoreProductService.DeleteStoreProduct.
func (c *storeProductServiceClient) DeleteStoreProduct(ctx context.Context, req *connect.Request[v1.DeleteStoreProductRequest]) (*connect.Response[v1.DeleteStoreProductResponse], error) {
	return c.deleteStoreProduct.CallUnary(ctx, req)
}

// FindProducts calls inventory.v1.StoreProductService.FindProducts.
func (c *storeProductServiceClient) FindProducts(ctx context.Context, req *connect.Request[v1.FindProductsRequest]) (*connect.Response[v1.FindProductsResponse], error) {
	return c.findProducts.CallUnary(ctx, req)
}

// StreamStoreProducts calls inventory.v1.StoreProductService.StreamStoreProducts.
func (c *storeProductServiceClient) StreamStoreProducts(ctx context.Context, req *connect.Request[v1.StreamStoreProductsRequest]) (*connect.ServerStreamForClient[v1.StreamStoreProductsResponse], error) {
	return c.streamStoreProducts.CallServerStream(ctx, req)
}

// StreamGlobalProducts calls inventory.v1.StoreProductService.StreamGlobalProducts.
func (c *storeProductServiceClient) StreamGlobalProducts(ctx context.Context, req *connect.Request[v1.StreamGlobalProductsRequest]) (*connect.ServerStreamForClient[v1.StreamGlobalProductsResponse], error) {
	return c.streamGlobalProducts.CallServerStream(ctx, req)
}

// ListStoreProducts calls inventory.v1.StoreProductService.ListStoreProducts.
func (c *storeProductServiceClient) ListStoreProducts(ctx context.Context, req *connect.Request[v1.ListStoreProductsRequest]) (*connect.Response[v1.ListStoreProductsResponse], error) {
	return c.listStoreProducts.CallUnary(ctx, req)
}

// StoreProductServiceHandler is an implementation of the inventory.v1.StoreProductService service.
type StoreProductServiceHandler interface {
	// Finds products by name.
	FindGlobalProducts(context.Context, *connect.Request[v1.FindGlobalProductsRequest]) (*connect.Response[v1.FindGlobalProductsResponse], error)
	// Creates a global product.
	CreateGlobalProduct(context.Context, *connect.Request[v1.CreateGlobalProductRequest]) (*connect.Response[v1.CreateGlobalProductResponse], error)
	// Updates a global product.
	UpdateGlobalProduct(context.Context, *connect.Request[v1.UpdateGlobalProductRequest]) (*connect.Response[v1.UpdateGlobalProductResponse], error)
	// Deletes a global product.
	DeleteGlobalProduct(context.Context, *connect.Request[v1.DeleteGlobalProductRequest]) (*connect.Response[v1.DeleteGlobalProductResponse], error)
	// Adds a product to a store.
	AddProduct(context.Context, *connect.Request[v1.AddStoreProductRequest]) (*connect.Response[v1.AddStoreProductResponse], error)
	// Gets a store product by id.
	GetStoreProduct(context.Context, *connect.Request[v1.GetStoreProductRequest]) (*connect.Response[v1.GetStoreProductResponse], error)
	// Updates a store product.
	UpdateStoreProduct(context.Context, *connect.Request[v1.UpdateStoreProductRequest]) (*connect.Response[v1.UpdateStoreProductResponse], error)
	// Deletes a store product.
	// Only store products that are not in any orders can be deleted.
	DeleteStoreProduct(context.Context, *connect.Request[v1.DeleteStoreProductRequest]) (*connect.Response[v1.DeleteStoreProductResponse], error)
	// Finds products by name.
	FindProducts(context.Context, *connect.Request[v1.FindProductsRequest]) (*connect.Response[v1.FindProductsResponse], error)
	// Streams all products for a store for real-time updates.
	StreamStoreProducts(context.Context, *connect.Request[v1.StreamStoreProductsRequest], *connect.ServerStream[v1.StreamStoreProductsResponse]) error
	// Streams all global products for real-time updates.
	StreamGlobalProducts(context.Context, *connect.Request[v1.StreamGlobalProductsRequest], *connect.ServerStream[v1.StreamGlobalProductsResponse]) error
	// Lists products with pagination and filters.
	ListStoreProducts(context.Context, *connect.Request[v1.ListStoreProductsRequest]) (*connect.Response[v1.ListStoreProductsResponse], error)
}

// NewStoreProductServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStoreProductServiceHandler(svc StoreProductServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	storeProductServiceMethods := v1.File_inventory_v1_store_product_proto.Services().ByName("StoreProductService").Methods()
	storeProductServiceFindGlobalProductsHandler := connect.NewUnaryHandler(
		StoreProductServiceFindGlobalProductsProcedure,
		svc.FindGlobalProducts,
		connect.WithSchema(storeProductServiceMethods.ByName("FindGlobalProducts")),
		connect.WithHandlerOptions(opts...),
	)
	storeProductServiceCreateGlobalProductHandler := connect.NewUnaryHandler(
		StoreProductServiceCreateGlobalProductProcedure,
		svc.CreateGlobalProduct,
		connect.WithSchema(storeProductServiceMethods.ByName("CreateGlobalProduct")),
		connect.WithHandlerOptions(opts...),
	)
	storeProductServiceUpdateGlobalProductHandler := connect.NewUnaryHandler(
		StoreProductServiceUpdateGlobalProductProcedure,
		svc.UpdateGlobalProduct,
		connect.WithSchema(storeProductServiceMethods.ByName("UpdateGlobalProduct")),
		connect.WithHandlerOptions(opts...),
	)
	storeProductServiceDeleteGlobalProductHandler := connect.NewUnaryHandler(
		StoreProductServiceDeleteGlobalProductProcedure,
		svc.DeleteGlobalProduct,
		connect.WithSchema(storeProductServiceMethods.ByName("DeleteGlobalProduct")),
		connect.WithHandlerOptions(opts...),
	)
	storeProductServiceAddProductHandler := connect.NewUnaryHandler(
		StoreProductServiceAddProductProcedure,
		svc.AddProduct,
		connect.WithSchema(storeProductServiceMethods.ByName("AddProduct")),
		connect.WithHandlerOptions(opts...),
	)
	storeProductServiceGetStoreProductHandler := connect.NewUnaryHandler(
		StoreProductServiceGetStoreProductProcedure,
		svc.GetStoreProduct,
		connect.WithSchema(storeProductServiceMethods.ByName("GetStoreProduct")),
		connect.WithHandlerOptions(opts...),
	)
	storeProductServiceUpdateStoreProductHandler := connect.NewUnaryHandler(
		StoreProductServiceUpdateStoreProductProcedure,
		svc.UpdateStoreProduct,
		connect.WithSchema(storeProductServiceMethods.ByName("UpdateStoreProduct")),
		connect.WithHandlerOptions(opts...),
	)
	storeProductServiceDeleteStoreProductHandler := connect.NewUnaryHandler(
		StoreProductServiceDeleteStoreProductProcedure,
		svc.DeleteStoreProduct,
		connect.WithSchema(storeProductServiceMethods.ByName("DeleteStoreProduct")),
		connect.WithHandlerOptions(opts...),
	)
	storeProductServiceFindProductsHandler := connect.NewUnaryHandler(
		StoreProductServiceFindProductsProcedure,
		svc.FindProducts,
		connect.WithSchema(storeProductServiceMethods.ByName("FindProducts")),
		connect.WithHandlerOptions(opts...),
	)
	storeProductServiceStreamStoreProductsHandler := connect.NewServerStreamHandler(
		StoreProductServiceStreamStoreProductsProcedure,
		svc.StreamStoreProducts,
		connect.WithSchema(storeProductServiceMethods.ByName("StreamStoreProducts")),
		connect.WithHandlerOptions(opts...),
	)
	storeProductServiceStreamGlobalProductsHandler := connect.NewServerStreamHandler(
		StoreProductServiceStreamGlobalProductsProcedure,
		svc.StreamGlobalProducts,
		connect.WithSchema(storeProductServiceMethods.ByName("StreamGlobalProducts")),
		connect.WithHandlerOptions(opts...),
	)
	storeProductServiceListStoreProductsHandler := connect.NewUnaryHandler(
		StoreProductServiceListStoreProductsProcedure,
		svc.ListStoreProducts,
		connect.WithSchema(storeProductServiceMethods.ByName("ListStoreProducts")),
		connect.WithHandlerOptions(opts...),
	)
	return "/inventory.v1.StoreProductService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StoreProductServiceFindGlobalProductsProcedure:
			storeProductServiceFindGlobalProductsHandler.ServeHTTP(w, r)
		case StoreProductServiceCreateGlobalProductProcedure:
			storeProductServiceCreateGlobalProductHandler.ServeHTTP(w, r)
		case StoreProductServiceUpdateGlobalProductProcedure:
			storeProductServiceUpdateGlobalProductHandler.ServeHTTP(w, r)
		case StoreProductServiceDeleteGlobalProductProcedure:
			storeProductServiceDeleteGlobalProductHandler.ServeHTTP(w, r)
		case StoreProductServiceAddProductProcedure:
			storeProductServiceAddProductHandler.ServeHTTP(w, r)
		case StoreProductServiceGetStoreProductProcedure:
			storeProductServiceGetStoreProductHandler.ServeHTTP(w, r)
		case StoreProductServiceUpdateStoreProductProcedure:
			storeProductServiceUpdateStoreProductHandler.ServeHTTP(w, r)
		case StoreProductServiceDeleteStoreProductProcedure:
			storeProductServiceDeleteStoreProductHandler.ServeHTTP(w, r)
		case StoreProductServiceFindStoreProductsProcedure:
			storeProductServiceFindStoreProductsHandler.ServeHTTP(w, r)
		case StoreProductServiceStreamStoreProductsProcedure:
			storeProductServiceStreamStoreProductsHandler.ServeHTTP(w, r)
		case StoreProductServiceStreamGlobalProductsProcedure:
			storeProductServiceStreamGlobalProductsHandler.ServeHTTP(w, r)
		case StoreProductServiceListStoreProductsProcedure:
			storeProductServiceListStoreProductsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStoreProductServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStoreProductServiceHandler struct{}

func (UnimplementedStoreProductServiceHandler) FindGlobalProducts(context.Context, *connect.Request[v1.FindGlobalProductsRequest]) (*connect.Response[v1.FindGlobalProductsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.StoreProductService.FindGlobalProducts is not implemented"))
}

func (UnimplementedStoreProductServiceHandler) CreateGlobalProduct(context.Context, *connect.Request[v1.CreateGlobalProductRequest]) (*connect.Response[v1.CreateGlobalProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.StoreProductService.CreateGlobalProduct is not implemented"))
}

func (UnimplementedStoreProductServiceHandler) UpdateGlobalProduct(context.Context, *connect.Request[v1.UpdateGlobalProductRequest]) (*connect.Response[v1.UpdateGlobalProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.StoreProductService.UpdateGlobalProduct is not implemented"))
}

func (UnimplementedStoreProductServiceHandler) DeleteGlobalProduct(context.Context, *connect.Request[v1.DeleteGlobalProductRequest]) (*connect.Response[v1.DeleteGlobalProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.StoreProductService.DeleteGlobalProduct is not implemented"))
}

func (UnimplementedStoreProductServiceHandler) AddProduct(context.Context, *connect.Request[v1.AddStoreProductRequest]) (*connect.Response[v1.AddStoreProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.StoreProductService.AddProduct is not implemented"))
}

func (UnimplementedStoreProductServiceHandler) GetStoreProduct(context.Context, *connect.Request[v1.GetStoreProductRequest]) (*connect.Response[v1.GetStoreProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.StoreProductService.GetStoreProduct is not implemented"))
}

func (UnimplementedStoreProductServiceHandler) UpdateStoreProduct(context.Context, *connect.Request[v1.UpdateStoreProductRequest]) (*connect.Response[v1.UpdateStoreProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.StoreProductService.UpdateStoreProduct is not implemented"))
}

func (UnimplementedStoreProductServiceHandler) DeleteStoreProduct(context.Context, *connect.Request[v1.DeleteStoreProductRequest]) (*connect.Response[v1.DeleteStoreProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.StoreProductService.DeleteStoreProduct is not implemented"))
}

func (UnimplementedStoreProductServiceHandler) FindProducts(context.Context, *connect.Request[v1.FindProductsRequest]) (*connect.Response[v1.FindProductsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.StoreProductService.FindProducts is not implemented"))
}

func (UnimplementedStoreProductServiceHandler) StreamStoreProducts(context.Context, *connect.Request[v1.StreamStoreProductsRequest], *connect.ServerStream[v1.StreamStoreProductsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.StoreProductService.StreamStoreProducts is not implemented"))
}

func (UnimplementedStoreProductServiceHandler) StreamGlobalProducts(context.Context, *connect.Request[v1.StreamGlobalProductsRequest], *connect.ServerStream[v1.StreamGlobalProductsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.StoreProductService.StreamGlobalProducts is not implemented"))
}

func (UnimplementedStoreProductServiceHandler) ListStoreProducts(context.Context, *connect.Request[v1.ListStoreProductsRequest]) (*connect.Response[v1.ListStoreProductsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.StoreProductService.ListStoreProducts is not implemented"))
}
