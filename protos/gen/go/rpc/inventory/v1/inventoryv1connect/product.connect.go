// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: inventory/v1/product.proto

package inventoryv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/karibu-cap/sabitou/protos/gen/go/rpc/inventory/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProductServiceName is the fully-qualified name of the ProductService service.
	ProductServiceName = "inventory.v1.ProductService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProductServiceFindGlobalProductsProcedure is the fully-qualified name of the ProductService's
	// FindGlobalProducts RPC.
	ProductServiceFindGlobalProductsProcedure = "/inventory.v1.ProductService/FindGlobalProducts"
	// ProductServiceFindCategoryProcedure is the fully-qualified name of the ProductService's
	// FindCategory RPC.
	ProductServiceFindCategoryProcedure = "/inventory.v1.ProductService/FindCategory"
	// ProductServiceAddProductProcedure is the fully-qualified name of the ProductService's AddProduct
	// RPC.
	ProductServiceAddProductProcedure = "/inventory.v1.ProductService/AddProduct"
	// ProductServiceGetProductProcedure is the fully-qualified name of the ProductService's GetProduct
	// RPC.
	ProductServiceGetProductProcedure = "/inventory.v1.ProductService/GetProduct"
	// ProductServiceUpdateProductProcedure is the fully-qualified name of the ProductService's
	// UpdateProduct RPC.
	ProductServiceUpdateProductProcedure = "/inventory.v1.ProductService/UpdateProduct"
	// ProductServiceDeleteProductProcedure is the fully-qualified name of the ProductService's
	// DeleteProduct RPC.
	ProductServiceDeleteProductProcedure = "/inventory.v1.ProductService/DeleteProduct"
	// ProductServiceFindStoreProductsProcedure is the fully-qualified name of the ProductService's
	// FindStoreProducts RPC.
	ProductServiceFindStoreProductsProcedure = "/inventory.v1.ProductService/FindStoreProducts"
	// ProductServiceStreamStoreProductsProcedure is the fully-qualified name of the ProductService's
	// StreamStoreProducts RPC.
	ProductServiceStreamStoreProductsProcedure = "/inventory.v1.ProductService/StreamStoreProducts"
)

// ProductServiceClient is a client for the inventory.v1.ProductService service.
type ProductServiceClient interface {
	// Finds products by name.
	FindGlobalProducts(context.Context, *connect.Request[v1.FindGlobalProductsRequest]) (*connect.Response[v1.FindGlobalProductsResponse], error)
	// Finds categories by name.
	FindCategory(context.Context, *connect.Request[v1.FindCategoryRequest]) (*connect.Response[v1.FindCategoryResponse], error)
	// Adds a product to a store.
	AddProduct(context.Context, *connect.Request[v1.AddProductRequest]) (*connect.Response[v1.AddProductResponse], error)
	// Gets a store product by id.
	GetProduct(context.Context, *connect.Request[v1.GetProductRequest]) (*connect.Response[v1.GetProductResponse], error)
	// Updates a store product.
	UpdateProduct(context.Context, *connect.Request[v1.UpdateProductRequest]) (*connect.Response[v1.UpdateProductResponse], error)
	// Deletes a store product.
	// Only store products that are not in any orders can be deleted.
	DeleteProduct(context.Context, *connect.Request[v1.DeleteProductRequest]) (*connect.Response[v1.DeleteProductResponse], error)
	// Finds products by name.
	FindStoreProducts(context.Context, *connect.Request[v1.FindStoreProductsRequest]) (*connect.Response[v1.FindStoreProductsResponse], error)
	// Streams all products for a store for real-time updates.
	StreamStoreProducts(context.Context, *connect.Request[v1.StreamStoreProductsRequest]) (*connect.ServerStreamForClient[v1.StreamStoreProductsResponse], error)
}

// NewProductServiceClient constructs a client for the inventory.v1.ProductService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProductServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProductServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	productServiceMethods := v1.File_inventory_v1_product_proto.Services().ByName("ProductService").Methods()
	return &productServiceClient{
		findGlobalProducts: connect.NewClient[v1.FindGlobalProductsRequest, v1.FindGlobalProductsResponse](
			httpClient,
			baseURL+ProductServiceFindGlobalProductsProcedure,
			connect.WithSchema(productServiceMethods.ByName("FindGlobalProducts")),
			connect.WithClientOptions(opts...),
		),
		findCategory: connect.NewClient[v1.FindCategoryRequest, v1.FindCategoryResponse](
			httpClient,
			baseURL+ProductServiceFindCategoryProcedure,
			connect.WithSchema(productServiceMethods.ByName("FindCategory")),
			connect.WithClientOptions(opts...),
		),
		addProduct: connect.NewClient[v1.AddProductRequest, v1.AddProductResponse](
			httpClient,
			baseURL+ProductServiceAddProductProcedure,
			connect.WithSchema(productServiceMethods.ByName("AddProduct")),
			connect.WithClientOptions(opts...),
		),
		getProduct: connect.NewClient[v1.GetProductRequest, v1.GetProductResponse](
			httpClient,
			baseURL+ProductServiceGetProductProcedure,
			connect.WithSchema(productServiceMethods.ByName("GetProduct")),
			connect.WithClientOptions(opts...),
		),
		updateProduct: connect.NewClient[v1.UpdateProductRequest, v1.UpdateProductResponse](
			httpClient,
			baseURL+ProductServiceUpdateProductProcedure,
			connect.WithSchema(productServiceMethods.ByName("UpdateProduct")),
			connect.WithClientOptions(opts...),
		),
		deleteProduct: connect.NewClient[v1.DeleteProductRequest, v1.DeleteProductResponse](
			httpClient,
			baseURL+ProductServiceDeleteProductProcedure,
			connect.WithSchema(productServiceMethods.ByName("DeleteProduct")),
			connect.WithClientOptions(opts...),
		),
		findStoreProducts: connect.NewClient[v1.FindStoreProductsRequest, v1.FindStoreProductsResponse](
			httpClient,
			baseURL+ProductServiceFindStoreProductsProcedure,
			connect.WithSchema(productServiceMethods.ByName("FindStoreProducts")),
			connect.WithClientOptions(opts...),
		),
		streamStoreProducts: connect.NewClient[v1.StreamStoreProductsRequest, v1.StreamStoreProductsResponse](
			httpClient,
			baseURL+ProductServiceStreamStoreProductsProcedure,
			connect.WithSchema(productServiceMethods.ByName("StreamStoreProducts")),
			connect.WithClientOptions(opts...),
		),
	}
}

// productServiceClient implements ProductServiceClient.
type productServiceClient struct {
	findGlobalProducts  *connect.Client[v1.FindGlobalProductsRequest, v1.FindGlobalProductsResponse]
	findCategory        *connect.Client[v1.FindCategoryRequest, v1.FindCategoryResponse]
	addProduct          *connect.Client[v1.AddProductRequest, v1.AddProductResponse]
	getProduct          *connect.Client[v1.GetProductRequest, v1.GetProductResponse]
	updateProduct       *connect.Client[v1.UpdateProductRequest, v1.UpdateProductResponse]
	deleteProduct       *connect.Client[v1.DeleteProductRequest, v1.DeleteProductResponse]
	findStoreProducts   *connect.Client[v1.FindStoreProductsRequest, v1.FindStoreProductsResponse]
	streamStoreProducts *connect.Client[v1.StreamStoreProductsRequest, v1.StreamStoreProductsResponse]
}

// FindGlobalProducts calls inventory.v1.ProductService.FindGlobalProducts.
func (c *productServiceClient) FindGlobalProducts(ctx context.Context, req *connect.Request[v1.FindGlobalProductsRequest]) (*connect.Response[v1.FindGlobalProductsResponse], error) {
	return c.findGlobalProducts.CallUnary(ctx, req)
}

// FindCategory calls inventory.v1.ProductService.FindCategory.
func (c *productServiceClient) FindCategory(ctx context.Context, req *connect.Request[v1.FindCategoryRequest]) (*connect.Response[v1.FindCategoryResponse], error) {
	return c.findCategory.CallUnary(ctx, req)
}

// AddProduct calls inventory.v1.ProductService.AddProduct.
func (c *productServiceClient) AddProduct(ctx context.Context, req *connect.Request[v1.AddProductRequest]) (*connect.Response[v1.AddProductResponse], error) {
	return c.addProduct.CallUnary(ctx, req)
}

// GetProduct calls inventory.v1.ProductService.GetProduct.
func (c *productServiceClient) GetProduct(ctx context.Context, req *connect.Request[v1.GetProductRequest]) (*connect.Response[v1.GetProductResponse], error) {
	return c.getProduct.CallUnary(ctx, req)
}

// UpdateProduct calls inventory.v1.ProductService.UpdateProduct.
func (c *productServiceClient) UpdateProduct(ctx context.Context, req *connect.Request[v1.UpdateProductRequest]) (*connect.Response[v1.UpdateProductResponse], error) {
	return c.updateProduct.CallUnary(ctx, req)
}

// DeleteProduct calls inventory.v1.ProductService.DeleteProduct.
func (c *productServiceClient) DeleteProduct(ctx context.Context, req *connect.Request[v1.DeleteProductRequest]) (*connect.Response[v1.DeleteProductResponse], error) {
	return c.deleteProduct.CallUnary(ctx, req)
}

// FindStoreProducts calls inventory.v1.ProductService.FindStoreProducts.
func (c *productServiceClient) FindStoreProducts(ctx context.Context, req *connect.Request[v1.FindStoreProductsRequest]) (*connect.Response[v1.FindStoreProductsResponse], error) {
	return c.findStoreProducts.CallUnary(ctx, req)
}

// StreamStoreProducts calls inventory.v1.ProductService.StreamStoreProducts.
func (c *productServiceClient) StreamStoreProducts(ctx context.Context, req *connect.Request[v1.StreamStoreProductsRequest]) (*connect.ServerStreamForClient[v1.StreamStoreProductsResponse], error) {
	return c.streamStoreProducts.CallServerStream(ctx, req)
}

// ProductServiceHandler is an implementation of the inventory.v1.ProductService service.
type ProductServiceHandler interface {
	// Finds products by name.
	FindGlobalProducts(context.Context, *connect.Request[v1.FindGlobalProductsRequest]) (*connect.Response[v1.FindGlobalProductsResponse], error)
	// Finds categories by name.
	FindCategory(context.Context, *connect.Request[v1.FindCategoryRequest]) (*connect.Response[v1.FindCategoryResponse], error)
	// Adds a product to a store.
	AddProduct(context.Context, *connect.Request[v1.AddProductRequest]) (*connect.Response[v1.AddProductResponse], error)
	// Gets a store product by id.
	GetProduct(context.Context, *connect.Request[v1.GetProductRequest]) (*connect.Response[v1.GetProductResponse], error)
	// Updates a store product.
	UpdateProduct(context.Context, *connect.Request[v1.UpdateProductRequest]) (*connect.Response[v1.UpdateProductResponse], error)
	// Deletes a store product.
	// Only store products that are not in any orders can be deleted.
	DeleteProduct(context.Context, *connect.Request[v1.DeleteProductRequest]) (*connect.Response[v1.DeleteProductResponse], error)
	// Finds products by name.
	FindStoreProducts(context.Context, *connect.Request[v1.FindStoreProductsRequest]) (*connect.Response[v1.FindStoreProductsResponse], error)
	// Streams all products for a store for real-time updates.
	StreamStoreProducts(context.Context, *connect.Request[v1.StreamStoreProductsRequest], *connect.ServerStream[v1.StreamStoreProductsResponse]) error
}

// NewProductServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProductServiceHandler(svc ProductServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	productServiceMethods := v1.File_inventory_v1_product_proto.Services().ByName("ProductService").Methods()
	productServiceFindGlobalProductsHandler := connect.NewUnaryHandler(
		ProductServiceFindGlobalProductsProcedure,
		svc.FindGlobalProducts,
		connect.WithSchema(productServiceMethods.ByName("FindGlobalProducts")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceFindCategoryHandler := connect.NewUnaryHandler(
		ProductServiceFindCategoryProcedure,
		svc.FindCategory,
		connect.WithSchema(productServiceMethods.ByName("FindCategory")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceAddProductHandler := connect.NewUnaryHandler(
		ProductServiceAddProductProcedure,
		svc.AddProduct,
		connect.WithSchema(productServiceMethods.ByName("AddProduct")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceGetProductHandler := connect.NewUnaryHandler(
		ProductServiceGetProductProcedure,
		svc.GetProduct,
		connect.WithSchema(productServiceMethods.ByName("GetProduct")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceUpdateProductHandler := connect.NewUnaryHandler(
		ProductServiceUpdateProductProcedure,
		svc.UpdateProduct,
		connect.WithSchema(productServiceMethods.ByName("UpdateProduct")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceDeleteProductHandler := connect.NewUnaryHandler(
		ProductServiceDeleteProductProcedure,
		svc.DeleteProduct,
		connect.WithSchema(productServiceMethods.ByName("DeleteProduct")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceFindStoreProductsHandler := connect.NewUnaryHandler(
		ProductServiceFindStoreProductsProcedure,
		svc.FindStoreProducts,
		connect.WithSchema(productServiceMethods.ByName("FindStoreProducts")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceStreamStoreProductsHandler := connect.NewServerStreamHandler(
		ProductServiceStreamStoreProductsProcedure,
		svc.StreamStoreProducts,
		connect.WithSchema(productServiceMethods.ByName("StreamStoreProducts")),
		connect.WithHandlerOptions(opts...),
	)
	return "/inventory.v1.ProductService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProductServiceFindGlobalProductsProcedure:
			productServiceFindGlobalProductsHandler.ServeHTTP(w, r)
		case ProductServiceFindCategoryProcedure:
			productServiceFindCategoryHandler.ServeHTTP(w, r)
		case ProductServiceAddProductProcedure:
			productServiceAddProductHandler.ServeHTTP(w, r)
		case ProductServiceGetProductProcedure:
			productServiceGetProductHandler.ServeHTTP(w, r)
		case ProductServiceUpdateProductProcedure:
			productServiceUpdateProductHandler.ServeHTTP(w, r)
		case ProductServiceDeleteProductProcedure:
			productServiceDeleteProductHandler.ServeHTTP(w, r)
		case ProductServiceFindStoreProductsProcedure:
			productServiceFindStoreProductsHandler.ServeHTTP(w, r)
		case ProductServiceStreamStoreProductsProcedure:
			productServiceStreamStoreProductsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProductServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProductServiceHandler struct{}

func (UnimplementedProductServiceHandler) FindGlobalProducts(context.Context, *connect.Request[v1.FindGlobalProductsRequest]) (*connect.Response[v1.FindGlobalProductsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.ProductService.FindGlobalProducts is not implemented"))
}

func (UnimplementedProductServiceHandler) FindCategory(context.Context, *connect.Request[v1.FindCategoryRequest]) (*connect.Response[v1.FindCategoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.ProductService.FindCategory is not implemented"))
}

func (UnimplementedProductServiceHandler) AddProduct(context.Context, *connect.Request[v1.AddProductRequest]) (*connect.Response[v1.AddProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.ProductService.AddProduct is not implemented"))
}

func (UnimplementedProductServiceHandler) GetProduct(context.Context, *connect.Request[v1.GetProductRequest]) (*connect.Response[v1.GetProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.ProductService.GetProduct is not implemented"))
}

func (UnimplementedProductServiceHandler) UpdateProduct(context.Context, *connect.Request[v1.UpdateProductRequest]) (*connect.Response[v1.UpdateProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.ProductService.UpdateProduct is not implemented"))
}

func (UnimplementedProductServiceHandler) DeleteProduct(context.Context, *connect.Request[v1.DeleteProductRequest]) (*connect.Response[v1.DeleteProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.ProductService.DeleteProduct is not implemented"))
}

func (UnimplementedProductServiceHandler) FindStoreProducts(context.Context, *connect.Request[v1.FindStoreProductsRequest]) (*connect.Response[v1.FindStoreProductsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.ProductService.FindStoreProducts is not implemented"))
}

func (UnimplementedProductServiceHandler) StreamStoreProducts(context.Context, *connect.Request[v1.StreamStoreProductsRequest], *connect.ServerStream[v1.StreamStoreProductsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.ProductService.StreamStoreProducts is not implemented"))
}
