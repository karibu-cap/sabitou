// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: inventory/v1/product.proto

package inventoryv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/karibu-cap/sabitou/protos/gen/go/rpc/inventory/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProductServiceName is the fully-qualified name of the ProductService service.
	ProductServiceName = "inventory.v1.ProductService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProductServiceFindGlobalProductsProcedure is the fully-qualified name of the ProductService's
	// FindGlobalProducts RPC.
	ProductServiceFindGlobalProductsProcedure = "/inventory.v1.ProductService/FindGlobalProducts"
	// ProductServiceFindProductCategoryProcedure is the fully-qualified name of the ProductService's
	// FindProductCategory RPC.
	ProductServiceFindProductCategoryProcedure = "/inventory.v1.ProductService/FindProductCategory"
	// ProductServiceCreateGlobalProductProcedure is the fully-qualified name of the ProductService's
	// CreateGlobalProduct RPC.
	ProductServiceCreateGlobalProductProcedure = "/inventory.v1.ProductService/CreateGlobalProduct"
	// ProductServiceUpdateGlobalProductProcedure is the fully-qualified name of the ProductService's
	// UpdateGlobalProduct RPC.
	ProductServiceUpdateGlobalProductProcedure = "/inventory.v1.ProductService/UpdateGlobalProduct"
	// ProductServiceDeleteGlobalProductProcedure is the fully-qualified name of the ProductService's
	// DeleteGlobalProduct RPC.
	ProductServiceDeleteGlobalProductProcedure = "/inventory.v1.ProductService/DeleteGlobalProduct"
	// ProductServiceAddProductProcedure is the fully-qualified name of the ProductService's AddProduct
	// RPC.
	ProductServiceAddProductProcedure = "/inventory.v1.ProductService/AddProduct"
	// ProductServiceGetProductProcedure is the fully-qualified name of the ProductService's GetProduct
	// RPC.
	ProductServiceGetProductProcedure = "/inventory.v1.ProductService/GetProduct"
	// ProductServiceUpdateProductProcedure is the fully-qualified name of the ProductService's
	// UpdateProduct RPC.
	ProductServiceUpdateProductProcedure = "/inventory.v1.ProductService/UpdateProduct"
	// ProductServiceDeleteProductProcedure is the fully-qualified name of the ProductService's
	// DeleteProduct RPC.
	ProductServiceDeleteProductProcedure = "/inventory.v1.ProductService/DeleteProduct"
	// ProductServiceFindStoreProductsProcedure is the fully-qualified name of the ProductService's
	// FindStoreProducts RPC.
	ProductServiceFindStoreProductsProcedure = "/inventory.v1.ProductService/FindStoreProducts"
	// ProductServiceStreamStoreProductsProcedure is the fully-qualified name of the ProductService's
	// StreamStoreProducts RPC.
	ProductServiceStreamStoreProductsProcedure = "/inventory.v1.ProductService/StreamStoreProducts"
	// ProductServiceStreamGlobalProductsProcedure is the fully-qualified name of the ProductService's
	// StreamGlobalProducts RPC.
	ProductServiceStreamGlobalProductsProcedure = "/inventory.v1.ProductService/StreamGlobalProducts"
)

// ProductServiceClient is a client for the inventory.v1.ProductService service.
type ProductServiceClient interface {
	// Finds products by name.
	FindGlobalProducts(context.Context, *connect.Request[v1.FindGlobalProductsRequest]) (*connect.Response[v1.FindGlobalProductsResponse], error)
	// Finds categories by name.
	FindProductCategory(context.Context, *connect.Request[v1.FindProductCategoryRequest]) (*connect.Response[v1.FindProductCategoryResponse], error)
	// Creates a global product.
	CreateGlobalProduct(context.Context, *connect.Request[v1.CreateGlobalProductRequest]) (*connect.Response[v1.CreateGlobalProductResponse], error)
	// Updates a global product.
	UpdateGlobalProduct(context.Context, *connect.Request[v1.UpdateGlobalProductRequest]) (*connect.Response[v1.UpdateGlobalProductResponse], error)
	// Deletes a global product.
	DeleteGlobalProduct(context.Context, *connect.Request[v1.DeleteGlobalProductRequest]) (*connect.Response[v1.DeleteGlobalProductResponse], error)
	// Adds a product to a store.
	AddProduct(context.Context, *connect.Request[v1.AddStoreProductRequest]) (*connect.Response[v1.AddStoreProductResponse], error)
	// Gets a store product by id.
	GetProduct(context.Context, *connect.Request[v1.GetStoreProductRequest]) (*connect.Response[v1.GetStoreProductResponse], error)
	// Updates a store product.
	UpdateProduct(context.Context, *connect.Request[v1.UpdateStoreProductRequest]) (*connect.Response[v1.UpdateStoreProductResponse], error)
	// Deletes a store product.
	// Only store products that are not in any orders can be deleted.
	DeleteProduct(context.Context, *connect.Request[v1.DeleteStoreProductRequest]) (*connect.Response[v1.DeleteStoreProductResponse], error)
	// Finds products by name.
	FindStoreProducts(context.Context, *connect.Request[v1.FindStoreProductsRequest]) (*connect.Response[v1.FindStoreProductsResponse], error)
	// Streams all products for a store for real-time updates.
	StreamStoreProducts(context.Context, *connect.Request[v1.StreamStoreProductsRequest]) (*connect.ServerStreamForClient[v1.StreamStoreProductsResponse], error)
	// Streams all global products for real-time updates.
	StreamGlobalProducts(context.Context, *connect.Request[v1.StreamGlobalProductsRequest]) (*connect.ServerStreamForClient[v1.StreamGlobalProductsResponse], error)
}

// NewProductServiceClient constructs a client for the inventory.v1.ProductService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProductServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProductServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	productServiceMethods := v1.File_inventory_v1_product_proto.Services().ByName("ProductService").Methods()
	return &productServiceClient{
		findGlobalProducts: connect.NewClient[v1.FindGlobalProductsRequest, v1.FindGlobalProductsResponse](
			httpClient,
			baseURL+ProductServiceFindGlobalProductsProcedure,
			connect.WithSchema(productServiceMethods.ByName("FindGlobalProducts")),
			connect.WithClientOptions(opts...),
		),
		findProductCategory: connect.NewClient[v1.FindProductCategoryRequest, v1.FindProductCategoryResponse](
			httpClient,
			baseURL+ProductServiceFindProductCategoryProcedure,
			connect.WithSchema(productServiceMethods.ByName("FindProductCategory")),
			connect.WithClientOptions(opts...),
		),
		createGlobalProduct: connect.NewClient[v1.CreateGlobalProductRequest, v1.CreateGlobalProductResponse](
			httpClient,
			baseURL+ProductServiceCreateGlobalProductProcedure,
			connect.WithSchema(productServiceMethods.ByName("CreateGlobalProduct")),
			connect.WithClientOptions(opts...),
		),
		updateGlobalProduct: connect.NewClient[v1.UpdateGlobalProductRequest, v1.UpdateGlobalProductResponse](
			httpClient,
			baseURL+ProductServiceUpdateGlobalProductProcedure,
			connect.WithSchema(productServiceMethods.ByName("UpdateGlobalProduct")),
			connect.WithClientOptions(opts...),
		),
		deleteGlobalProduct: connect.NewClient[v1.DeleteGlobalProductRequest, v1.DeleteGlobalProductResponse](
			httpClient,
			baseURL+ProductServiceDeleteGlobalProductProcedure,
			connect.WithSchema(productServiceMethods.ByName("DeleteGlobalProduct")),
			connect.WithClientOptions(opts...),
		),
		addProduct: connect.NewClient[v1.AddStoreProductRequest, v1.AddStoreProductResponse](
			httpClient,
			baseURL+ProductServiceAddProductProcedure,
			connect.WithSchema(productServiceMethods.ByName("AddProduct")),
			connect.WithClientOptions(opts...),
		),
		getProduct: connect.NewClient[v1.GetStoreProductRequest, v1.GetStoreProductResponse](
			httpClient,
			baseURL+ProductServiceGetProductProcedure,
			connect.WithSchema(productServiceMethods.ByName("GetProduct")),
			connect.WithClientOptions(opts...),
		),
		updateProduct: connect.NewClient[v1.UpdateStoreProductRequest, v1.UpdateStoreProductResponse](
			httpClient,
			baseURL+ProductServiceUpdateProductProcedure,
			connect.WithSchema(productServiceMethods.ByName("UpdateProduct")),
			connect.WithClientOptions(opts...),
		),
		deleteProduct: connect.NewClient[v1.DeleteStoreProductRequest, v1.DeleteStoreProductResponse](
			httpClient,
			baseURL+ProductServiceDeleteProductProcedure,
			connect.WithSchema(productServiceMethods.ByName("DeleteProduct")),
			connect.WithClientOptions(opts...),
		),
		findStoreProducts: connect.NewClient[v1.FindStoreProductsRequest, v1.FindStoreProductsResponse](
			httpClient,
			baseURL+ProductServiceFindStoreProductsProcedure,
			connect.WithSchema(productServiceMethods.ByName("FindStoreProducts")),
			connect.WithClientOptions(opts...),
		),
		streamStoreProducts: connect.NewClient[v1.StreamStoreProductsRequest, v1.StreamStoreProductsResponse](
			httpClient,
			baseURL+ProductServiceStreamStoreProductsProcedure,
			connect.WithSchema(productServiceMethods.ByName("StreamStoreProducts")),
			connect.WithClientOptions(opts...),
		),
		streamGlobalProducts: connect.NewClient[v1.StreamGlobalProductsRequest, v1.StreamGlobalProductsResponse](
			httpClient,
			baseURL+ProductServiceStreamGlobalProductsProcedure,
			connect.WithSchema(productServiceMethods.ByName("StreamGlobalProducts")),
			connect.WithClientOptions(opts...),
		),
	}
}

// productServiceClient implements ProductServiceClient.
type productServiceClient struct {
	findGlobalProducts   *connect.Client[v1.FindGlobalProductsRequest, v1.FindGlobalProductsResponse]
	findProductCategory  *connect.Client[v1.FindProductCategoryRequest, v1.FindProductCategoryResponse]
	createGlobalProduct  *connect.Client[v1.CreateGlobalProductRequest, v1.CreateGlobalProductResponse]
	updateGlobalProduct  *connect.Client[v1.UpdateGlobalProductRequest, v1.UpdateGlobalProductResponse]
	deleteGlobalProduct  *connect.Client[v1.DeleteGlobalProductRequest, v1.DeleteGlobalProductResponse]
	addProduct           *connect.Client[v1.AddStoreProductRequest, v1.AddStoreProductResponse]
	getProduct           *connect.Client[v1.GetStoreProductRequest, v1.GetStoreProductResponse]
	updateProduct        *connect.Client[v1.UpdateStoreProductRequest, v1.UpdateStoreProductResponse]
	deleteProduct        *connect.Client[v1.DeleteStoreProductRequest, v1.DeleteStoreProductResponse]
	findStoreProducts    *connect.Client[v1.FindStoreProductsRequest, v1.FindStoreProductsResponse]
	streamStoreProducts  *connect.Client[v1.StreamStoreProductsRequest, v1.StreamStoreProductsResponse]
	streamGlobalProducts *connect.Client[v1.StreamGlobalProductsRequest, v1.StreamGlobalProductsResponse]
}

// FindGlobalProducts calls inventory.v1.ProductService.FindGlobalProducts.
func (c *productServiceClient) FindGlobalProducts(ctx context.Context, req *connect.Request[v1.FindGlobalProductsRequest]) (*connect.Response[v1.FindGlobalProductsResponse], error) {
	return c.findGlobalProducts.CallUnary(ctx, req)
}

// FindProductCategory calls inventory.v1.ProductService.FindProductCategory.
func (c *productServiceClient) FindProductCategory(ctx context.Context, req *connect.Request[v1.FindProductCategoryRequest]) (*connect.Response[v1.FindProductCategoryResponse], error) {
	return c.findProductCategory.CallUnary(ctx, req)
}

// CreateGlobalProduct calls inventory.v1.ProductService.CreateGlobalProduct.
func (c *productServiceClient) CreateGlobalProduct(ctx context.Context, req *connect.Request[v1.CreateGlobalProductRequest]) (*connect.Response[v1.CreateGlobalProductResponse], error) {
	return c.createGlobalProduct.CallUnary(ctx, req)
}

// UpdateGlobalProduct calls inventory.v1.ProductService.UpdateGlobalProduct.
func (c *productServiceClient) UpdateGlobalProduct(ctx context.Context, req *connect.Request[v1.UpdateGlobalProductRequest]) (*connect.Response[v1.UpdateGlobalProductResponse], error) {
	return c.updateGlobalProduct.CallUnary(ctx, req)
}

// DeleteGlobalProduct calls inventory.v1.ProductService.DeleteGlobalProduct.
func (c *productServiceClient) DeleteGlobalProduct(ctx context.Context, req *connect.Request[v1.DeleteGlobalProductRequest]) (*connect.Response[v1.DeleteGlobalProductResponse], error) {
	return c.deleteGlobalProduct.CallUnary(ctx, req)
}

// AddProduct calls inventory.v1.ProductService.AddProduct.
func (c *productServiceClient) AddProduct(ctx context.Context, req *connect.Request[v1.AddStoreProductRequest]) (*connect.Response[v1.AddStoreProductResponse], error) {
	return c.addProduct.CallUnary(ctx, req)
}

// GetProduct calls inventory.v1.ProductService.GetProduct.
func (c *productServiceClient) GetProduct(ctx context.Context, req *connect.Request[v1.GetStoreProductRequest]) (*connect.Response[v1.GetStoreProductResponse], error) {
	return c.getProduct.CallUnary(ctx, req)
}

// UpdateProduct calls inventory.v1.ProductService.UpdateProduct.
func (c *productServiceClient) UpdateProduct(ctx context.Context, req *connect.Request[v1.UpdateStoreProductRequest]) (*connect.Response[v1.UpdateStoreProductResponse], error) {
	return c.updateProduct.CallUnary(ctx, req)
}

// DeleteProduct calls inventory.v1.ProductService.DeleteProduct.
func (c *productServiceClient) DeleteProduct(ctx context.Context, req *connect.Request[v1.DeleteStoreProductRequest]) (*connect.Response[v1.DeleteStoreProductResponse], error) {
	return c.deleteProduct.CallUnary(ctx, req)
}

// FindStoreProducts calls inventory.v1.ProductService.FindStoreProducts.
func (c *productServiceClient) FindStoreProducts(ctx context.Context, req *connect.Request[v1.FindStoreProductsRequest]) (*connect.Response[v1.FindStoreProductsResponse], error) {
	return c.findStoreProducts.CallUnary(ctx, req)
}

// StreamStoreProducts calls inventory.v1.ProductService.StreamStoreProducts.
func (c *productServiceClient) StreamStoreProducts(ctx context.Context, req *connect.Request[v1.StreamStoreProductsRequest]) (*connect.ServerStreamForClient[v1.StreamStoreProductsResponse], error) {
	return c.streamStoreProducts.CallServerStream(ctx, req)
}

// StreamGlobalProducts calls inventory.v1.ProductService.StreamGlobalProducts.
func (c *productServiceClient) StreamGlobalProducts(ctx context.Context, req *connect.Request[v1.StreamGlobalProductsRequest]) (*connect.ServerStreamForClient[v1.StreamGlobalProductsResponse], error) {
	return c.streamGlobalProducts.CallServerStream(ctx, req)
}

// ProductServiceHandler is an implementation of the inventory.v1.ProductService service.
type ProductServiceHandler interface {
	// Finds products by name.
	FindGlobalProducts(context.Context, *connect.Request[v1.FindGlobalProductsRequest]) (*connect.Response[v1.FindGlobalProductsResponse], error)
	// Finds categories by name.
	FindProductCategory(context.Context, *connect.Request[v1.FindProductCategoryRequest]) (*connect.Response[v1.FindProductCategoryResponse], error)
	// Creates a global product.
	CreateGlobalProduct(context.Context, *connect.Request[v1.CreateGlobalProductRequest]) (*connect.Response[v1.CreateGlobalProductResponse], error)
	// Updates a global product.
	UpdateGlobalProduct(context.Context, *connect.Request[v1.UpdateGlobalProductRequest]) (*connect.Response[v1.UpdateGlobalProductResponse], error)
	// Deletes a global product.
	DeleteGlobalProduct(context.Context, *connect.Request[v1.DeleteGlobalProductRequest]) (*connect.Response[v1.DeleteGlobalProductResponse], error)
	// Adds a product to a store.
	AddProduct(context.Context, *connect.Request[v1.AddStoreProductRequest]) (*connect.Response[v1.AddStoreProductResponse], error)
	// Gets a store product by id.
	GetProduct(context.Context, *connect.Request[v1.GetStoreProductRequest]) (*connect.Response[v1.GetStoreProductResponse], error)
	// Updates a store product.
	UpdateProduct(context.Context, *connect.Request[v1.UpdateStoreProductRequest]) (*connect.Response[v1.UpdateStoreProductResponse], error)
	// Deletes a store product.
	// Only store products that are not in any orders can be deleted.
	DeleteProduct(context.Context, *connect.Request[v1.DeleteStoreProductRequest]) (*connect.Response[v1.DeleteStoreProductResponse], error)
	// Finds products by name.
	FindStoreProducts(context.Context, *connect.Request[v1.FindStoreProductsRequest]) (*connect.Response[v1.FindStoreProductsResponse], error)
	// Streams all products for a store for real-time updates.
	StreamStoreProducts(context.Context, *connect.Request[v1.StreamStoreProductsRequest], *connect.ServerStream[v1.StreamStoreProductsResponse]) error
	// Streams all global products for real-time updates.
	StreamGlobalProducts(context.Context, *connect.Request[v1.StreamGlobalProductsRequest], *connect.ServerStream[v1.StreamGlobalProductsResponse]) error
}

// NewProductServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProductServiceHandler(svc ProductServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	productServiceMethods := v1.File_inventory_v1_product_proto.Services().ByName("ProductService").Methods()
	productServiceFindGlobalProductsHandler := connect.NewUnaryHandler(
		ProductServiceFindGlobalProductsProcedure,
		svc.FindGlobalProducts,
		connect.WithSchema(productServiceMethods.ByName("FindGlobalProducts")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceFindProductCategoryHandler := connect.NewUnaryHandler(
		ProductServiceFindProductCategoryProcedure,
		svc.FindProductCategory,
		connect.WithSchema(productServiceMethods.ByName("FindProductCategory")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceCreateGlobalProductHandler := connect.NewUnaryHandler(
		ProductServiceCreateGlobalProductProcedure,
		svc.CreateGlobalProduct,
		connect.WithSchema(productServiceMethods.ByName("CreateGlobalProduct")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceUpdateGlobalProductHandler := connect.NewUnaryHandler(
		ProductServiceUpdateGlobalProductProcedure,
		svc.UpdateGlobalProduct,
		connect.WithSchema(productServiceMethods.ByName("UpdateGlobalProduct")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceDeleteGlobalProductHandler := connect.NewUnaryHandler(
		ProductServiceDeleteGlobalProductProcedure,
		svc.DeleteGlobalProduct,
		connect.WithSchema(productServiceMethods.ByName("DeleteGlobalProduct")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceAddProductHandler := connect.NewUnaryHandler(
		ProductServiceAddProductProcedure,
		svc.AddProduct,
		connect.WithSchema(productServiceMethods.ByName("AddProduct")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceGetProductHandler := connect.NewUnaryHandler(
		ProductServiceGetProductProcedure,
		svc.GetProduct,
		connect.WithSchema(productServiceMethods.ByName("GetProduct")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceUpdateProductHandler := connect.NewUnaryHandler(
		ProductServiceUpdateProductProcedure,
		svc.UpdateProduct,
		connect.WithSchema(productServiceMethods.ByName("UpdateProduct")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceDeleteProductHandler := connect.NewUnaryHandler(
		ProductServiceDeleteProductProcedure,
		svc.DeleteProduct,
		connect.WithSchema(productServiceMethods.ByName("DeleteProduct")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceFindStoreProductsHandler := connect.NewUnaryHandler(
		ProductServiceFindStoreProductsProcedure,
		svc.FindStoreProducts,
		connect.WithSchema(productServiceMethods.ByName("FindStoreProducts")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceStreamStoreProductsHandler := connect.NewServerStreamHandler(
		ProductServiceStreamStoreProductsProcedure,
		svc.StreamStoreProducts,
		connect.WithSchema(productServiceMethods.ByName("StreamStoreProducts")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceStreamGlobalProductsHandler := connect.NewServerStreamHandler(
		ProductServiceStreamGlobalProductsProcedure,
		svc.StreamGlobalProducts,
		connect.WithSchema(productServiceMethods.ByName("StreamGlobalProducts")),
		connect.WithHandlerOptions(opts...),
	)
	return "/inventory.v1.ProductService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProductServiceFindGlobalProductsProcedure:
			productServiceFindGlobalProductsHandler.ServeHTTP(w, r)
		case ProductServiceFindProductCategoryProcedure:
			productServiceFindProductCategoryHandler.ServeHTTP(w, r)
		case ProductServiceCreateGlobalProductProcedure:
			productServiceCreateGlobalProductHandler.ServeHTTP(w, r)
		case ProductServiceUpdateGlobalProductProcedure:
			productServiceUpdateGlobalProductHandler.ServeHTTP(w, r)
		case ProductServiceDeleteGlobalProductProcedure:
			productServiceDeleteGlobalProductHandler.ServeHTTP(w, r)
		case ProductServiceAddProductProcedure:
			productServiceAddProductHandler.ServeHTTP(w, r)
		case ProductServiceGetProductProcedure:
			productServiceGetProductHandler.ServeHTTP(w, r)
		case ProductServiceUpdateProductProcedure:
			productServiceUpdateProductHandler.ServeHTTP(w, r)
		case ProductServiceDeleteProductProcedure:
			productServiceDeleteProductHandler.ServeHTTP(w, r)
		case ProductServiceFindStoreProductsProcedure:
			productServiceFindStoreProductsHandler.ServeHTTP(w, r)
		case ProductServiceStreamStoreProductsProcedure:
			productServiceStreamStoreProductsHandler.ServeHTTP(w, r)
		case ProductServiceStreamGlobalProductsProcedure:
			productServiceStreamGlobalProductsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProductServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProductServiceHandler struct{}

func (UnimplementedProductServiceHandler) FindGlobalProducts(context.Context, *connect.Request[v1.FindGlobalProductsRequest]) (*connect.Response[v1.FindGlobalProductsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.ProductService.FindGlobalProducts is not implemented"))
}

func (UnimplementedProductServiceHandler) FindProductCategory(context.Context, *connect.Request[v1.FindProductCategoryRequest]) (*connect.Response[v1.FindProductCategoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.ProductService.FindProductCategory is not implemented"))
}

func (UnimplementedProductServiceHandler) CreateGlobalProduct(context.Context, *connect.Request[v1.CreateGlobalProductRequest]) (*connect.Response[v1.CreateGlobalProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.ProductService.CreateGlobalProduct is not implemented"))
}

func (UnimplementedProductServiceHandler) UpdateGlobalProduct(context.Context, *connect.Request[v1.UpdateGlobalProductRequest]) (*connect.Response[v1.UpdateGlobalProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.ProductService.UpdateGlobalProduct is not implemented"))
}

func (UnimplementedProductServiceHandler) DeleteGlobalProduct(context.Context, *connect.Request[v1.DeleteGlobalProductRequest]) (*connect.Response[v1.DeleteGlobalProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.ProductService.DeleteGlobalProduct is not implemented"))
}

func (UnimplementedProductServiceHandler) AddProduct(context.Context, *connect.Request[v1.AddStoreProductRequest]) (*connect.Response[v1.AddStoreProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.ProductService.AddProduct is not implemented"))
}

func (UnimplementedProductServiceHandler) GetProduct(context.Context, *connect.Request[v1.GetStoreProductRequest]) (*connect.Response[v1.GetStoreProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.ProductService.GetProduct is not implemented"))
}

func (UnimplementedProductServiceHandler) UpdateProduct(context.Context, *connect.Request[v1.UpdateStoreProductRequest]) (*connect.Response[v1.UpdateStoreProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.ProductService.UpdateProduct is not implemented"))
}

func (UnimplementedProductServiceHandler) DeleteProduct(context.Context, *connect.Request[v1.DeleteStoreProductRequest]) (*connect.Response[v1.DeleteStoreProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.ProductService.DeleteProduct is not implemented"))
}

func (UnimplementedProductServiceHandler) FindStoreProducts(context.Context, *connect.Request[v1.FindStoreProductsRequest]) (*connect.Response[v1.FindStoreProductsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.ProductService.FindStoreProducts is not implemented"))
}

func (UnimplementedProductServiceHandler) StreamStoreProducts(context.Context, *connect.Request[v1.StreamStoreProductsRequest], *connect.ServerStream[v1.StreamStoreProductsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.ProductService.StreamStoreProducts is not implemented"))
}

func (UnimplementedProductServiceHandler) StreamGlobalProducts(context.Context, *connect.Request[v1.StreamGlobalProductsRequest], *connect.ServerStream[v1.StreamGlobalProductsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.ProductService.StreamGlobalProducts is not implemented"))
}
