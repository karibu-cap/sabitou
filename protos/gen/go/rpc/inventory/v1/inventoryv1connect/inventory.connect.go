// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: inventory/v1/inventory.proto

package inventoryv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/karibu-cap/sabitou/protos/gen/go/rpc/inventory/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// InventoryServiceName is the fully-qualified name of the InventoryService service.
	InventoryServiceName = "inventory.v1.InventoryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InventoryServiceGetProductInventoryLevelsProcedure is the fully-qualified name of the
	// InventoryService's GetProductInventoryLevels RPC.
	InventoryServiceGetProductInventoryLevelsProcedure = "/inventory.v1.InventoryService/GetProductInventoryLevels"
	// InventoryServiceCheckProductAvailabilityProcedure is the fully-qualified name of the
	// InventoryService's CheckProductAvailability RPC.
	InventoryServiceCheckProductAvailabilityProcedure = "/inventory.v1.InventoryService/CheckProductAvailability"
	// InventoryServiceGetLowStockItemsProcedure is the fully-qualified name of the InventoryService's
	// GetLowStockItems RPC.
	InventoryServiceGetLowStockItemsProcedure = "/inventory.v1.InventoryService/GetLowStockItems"
	// InventoryServiceGetResourceInventoryProcedure is the fully-qualified name of the
	// InventoryService's GetResourceInventory RPC.
	InventoryServiceGetResourceInventoryProcedure = "/inventory.v1.InventoryService/GetResourceInventory"
	// InventoryServiceGetRecentInventoryTransactionsProcedure is the fully-qualified name of the
	// InventoryService's GetRecentInventoryTransactions RPC.
	InventoryServiceGetRecentInventoryTransactionsProcedure = "/inventory.v1.InventoryService/GetRecentInventoryTransactions"
	// InventoryServiceGetProductTransactionHistoryProcedure is the fully-qualified name of the
	// InventoryService's GetProductTransactionHistory RPC.
	InventoryServiceGetProductTransactionHistoryProcedure = "/inventory.v1.InventoryService/GetProductTransactionHistory"
	// InventoryServiceListProductsBySupplierProcedure is the fully-qualified name of the
	// InventoryService's ListProductsBySupplier RPC.
	InventoryServiceListProductsBySupplierProcedure = "/inventory.v1.InventoryService/ListProductsBySupplier"
)

// InventoryServiceClient is a client for the inventory.v1.InventoryService service.
type InventoryServiceClient interface {
	// Gets the inventory levels of a product.
	GetProductInventoryLevels(context.Context, *connect.Request[v1.GetProductInventoryLevelsRequest]) (*connect.Response[v1.GetProductInventoryLevelsResponse], error)
	// Checks if a product is available in a warehouse.
	CheckProductAvailability(context.Context, *connect.Request[v1.CheckProductAvailabilityRequest]) (*connect.Response[v1.CheckProductAvailabilityResponse], error)
	// Gets low stock items for a store.
	GetLowStockItems(context.Context, *connect.Request[v1.GetLowStockItemsRequest]) (*connect.Response[v1.GetLowStockItemsResponse], error)
	// Gets a snapshot of store inventory.
	GetResourceInventory(context.Context, *connect.Request[v1.GetResourceInventoryRequest]) (*connect.Response[v1.GetResourceInventoryResponse], error)
	// Gets recent inventory transactions for a store (for dashboard activity).
	GetRecentInventoryTransactions(context.Context, *connect.Request[v1.GetInventoryTransactionHistoryRequest]) (*connect.Response[v1.GetInventoryTransactionHistoryResponse], error)
	// Gets the transaction history of a product.
	GetProductTransactionHistory(context.Context, *connect.Request[v1.GetProductTransactionHistoryRequest]) (*connect.Response[v1.GetProductTransactionHistoryResponse], error)
	// Gets the products by supplier.
	ListProductsBySupplier(context.Context, *connect.Request[v1.ListProductsBySupplierRequest]) (*connect.Response[v1.ListProductsBySupplierResponse], error)
}

// NewInventoryServiceClient constructs a client for the inventory.v1.InventoryService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInventoryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InventoryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	inventoryServiceMethods := v1.File_inventory_v1_inventory_proto.Services().ByName("InventoryService").Methods()
	return &inventoryServiceClient{
		getProductInventoryLevels: connect.NewClient[v1.GetProductInventoryLevelsRequest, v1.GetProductInventoryLevelsResponse](
			httpClient,
			baseURL+InventoryServiceGetProductInventoryLevelsProcedure,
			connect.WithSchema(inventoryServiceMethods.ByName("GetProductInventoryLevels")),
			connect.WithClientOptions(opts...),
		),
		checkProductAvailability: connect.NewClient[v1.CheckProductAvailabilityRequest, v1.CheckProductAvailabilityResponse](
			httpClient,
			baseURL+InventoryServiceCheckProductAvailabilityProcedure,
			connect.WithSchema(inventoryServiceMethods.ByName("CheckProductAvailability")),
			connect.WithClientOptions(opts...),
		),
		getLowStockItems: connect.NewClient[v1.GetLowStockItemsRequest, v1.GetLowStockItemsResponse](
			httpClient,
			baseURL+InventoryServiceGetLowStockItemsProcedure,
			connect.WithSchema(inventoryServiceMethods.ByName("GetLowStockItems")),
			connect.WithClientOptions(opts...),
		),
		getResourceInventory: connect.NewClient[v1.GetResourceInventoryRequest, v1.GetResourceInventoryResponse](
			httpClient,
			baseURL+InventoryServiceGetResourceInventoryProcedure,
			connect.WithSchema(inventoryServiceMethods.ByName("GetResourceInventory")),
			connect.WithClientOptions(opts...),
		),
		getRecentInventoryTransactions: connect.NewClient[v1.GetInventoryTransactionHistoryRequest, v1.GetInventoryTransactionHistoryResponse](
			httpClient,
			baseURL+InventoryServiceGetRecentInventoryTransactionsProcedure,
			connect.WithSchema(inventoryServiceMethods.ByName("GetRecentInventoryTransactions")),
			connect.WithClientOptions(opts...),
		),
		getProductTransactionHistory: connect.NewClient[v1.GetProductTransactionHistoryRequest, v1.GetProductTransactionHistoryResponse](
			httpClient,
			baseURL+InventoryServiceGetProductTransactionHistoryProcedure,
			connect.WithSchema(inventoryServiceMethods.ByName("GetProductTransactionHistory")),
			connect.WithClientOptions(opts...),
		),
		listProductsBySupplier: connect.NewClient[v1.ListProductsBySupplierRequest, v1.ListProductsBySupplierResponse](
			httpClient,
			baseURL+InventoryServiceListProductsBySupplierProcedure,
			connect.WithSchema(inventoryServiceMethods.ByName("ListProductsBySupplier")),
			connect.WithClientOptions(opts...),
		),
	}
}

// inventoryServiceClient implements InventoryServiceClient.
type inventoryServiceClient struct {
	getProductInventoryLevels      *connect.Client[v1.GetProductInventoryLevelsRequest, v1.GetProductInventoryLevelsResponse]
	checkProductAvailability       *connect.Client[v1.CheckProductAvailabilityRequest, v1.CheckProductAvailabilityResponse]
	getLowStockItems               *connect.Client[v1.GetLowStockItemsRequest, v1.GetLowStockItemsResponse]
	getResourceInventory           *connect.Client[v1.GetResourceInventoryRequest, v1.GetResourceInventoryResponse]
	getRecentInventoryTransactions *connect.Client[v1.GetInventoryTransactionHistoryRequest, v1.GetInventoryTransactionHistoryResponse]
	getProductTransactionHistory   *connect.Client[v1.GetProductTransactionHistoryRequest, v1.GetProductTransactionHistoryResponse]
	listProductsBySupplier         *connect.Client[v1.ListProductsBySupplierRequest, v1.ListProductsBySupplierResponse]
}

// GetProductInventoryLevels calls inventory.v1.InventoryService.GetProductInventoryLevels.
func (c *inventoryServiceClient) GetProductInventoryLevels(ctx context.Context, req *connect.Request[v1.GetProductInventoryLevelsRequest]) (*connect.Response[v1.GetProductInventoryLevelsResponse], error) {
	return c.getProductInventoryLevels.CallUnary(ctx, req)
}

// CheckProductAvailability calls inventory.v1.InventoryService.CheckProductAvailability.
func (c *inventoryServiceClient) CheckProductAvailability(ctx context.Context, req *connect.Request[v1.CheckProductAvailabilityRequest]) (*connect.Response[v1.CheckProductAvailabilityResponse], error) {
	return c.checkProductAvailability.CallUnary(ctx, req)
}

// GetLowStockItems calls inventory.v1.InventoryService.GetLowStockItems.
func (c *inventoryServiceClient) GetLowStockItems(ctx context.Context, req *connect.Request[v1.GetLowStockItemsRequest]) (*connect.Response[v1.GetLowStockItemsResponse], error) {
	return c.getLowStockItems.CallUnary(ctx, req)
}

// GetResourceInventory calls inventory.v1.InventoryService.GetResourceInventory.
func (c *inventoryServiceClient) GetResourceInventory(ctx context.Context, req *connect.Request[v1.GetResourceInventoryRequest]) (*connect.Response[v1.GetResourceInventoryResponse], error) {
	return c.getResourceInventory.CallUnary(ctx, req)
}

// GetRecentInventoryTransactions calls
// inventory.v1.InventoryService.GetRecentInventoryTransactions.
func (c *inventoryServiceClient) GetRecentInventoryTransactions(ctx context.Context, req *connect.Request[v1.GetInventoryTransactionHistoryRequest]) (*connect.Response[v1.GetInventoryTransactionHistoryResponse], error) {
	return c.getRecentInventoryTransactions.CallUnary(ctx, req)
}

// GetProductTransactionHistory calls inventory.v1.InventoryService.GetProductTransactionHistory.
func (c *inventoryServiceClient) GetProductTransactionHistory(ctx context.Context, req *connect.Request[v1.GetProductTransactionHistoryRequest]) (*connect.Response[v1.GetProductTransactionHistoryResponse], error) {
	return c.getProductTransactionHistory.CallUnary(ctx, req)
}

// ListProductsBySupplier calls inventory.v1.InventoryService.ListProductsBySupplier.
func (c *inventoryServiceClient) ListProductsBySupplier(ctx context.Context, req *connect.Request[v1.ListProductsBySupplierRequest]) (*connect.Response[v1.ListProductsBySupplierResponse], error) {
	return c.listProductsBySupplier.CallUnary(ctx, req)
}

// InventoryServiceHandler is an implementation of the inventory.v1.InventoryService service.
type InventoryServiceHandler interface {
	// Gets the inventory levels of a product.
	GetProductInventoryLevels(context.Context, *connect.Request[v1.GetProductInventoryLevelsRequest]) (*connect.Response[v1.GetProductInventoryLevelsResponse], error)
	// Checks if a product is available in a warehouse.
	CheckProductAvailability(context.Context, *connect.Request[v1.CheckProductAvailabilityRequest]) (*connect.Response[v1.CheckProductAvailabilityResponse], error)
	// Gets low stock items for a store.
	GetLowStockItems(context.Context, *connect.Request[v1.GetLowStockItemsRequest]) (*connect.Response[v1.GetLowStockItemsResponse], error)
	// Gets a snapshot of store inventory.
	GetResourceInventory(context.Context, *connect.Request[v1.GetResourceInventoryRequest]) (*connect.Response[v1.GetResourceInventoryResponse], error)
	// Gets recent inventory transactions for a store (for dashboard activity).
	GetRecentInventoryTransactions(context.Context, *connect.Request[v1.GetInventoryTransactionHistoryRequest]) (*connect.Response[v1.GetInventoryTransactionHistoryResponse], error)
	// Gets the transaction history of a product.
	GetProductTransactionHistory(context.Context, *connect.Request[v1.GetProductTransactionHistoryRequest]) (*connect.Response[v1.GetProductTransactionHistoryResponse], error)
	// Gets the products by supplier.
	ListProductsBySupplier(context.Context, *connect.Request[v1.ListProductsBySupplierRequest]) (*connect.Response[v1.ListProductsBySupplierResponse], error)
}

// NewInventoryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInventoryServiceHandler(svc InventoryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	inventoryServiceMethods := v1.File_inventory_v1_inventory_proto.Services().ByName("InventoryService").Methods()
	inventoryServiceGetProductInventoryLevelsHandler := connect.NewUnaryHandler(
		InventoryServiceGetProductInventoryLevelsProcedure,
		svc.GetProductInventoryLevels,
		connect.WithSchema(inventoryServiceMethods.ByName("GetProductInventoryLevels")),
		connect.WithHandlerOptions(opts...),
	)
	inventoryServiceCheckProductAvailabilityHandler := connect.NewUnaryHandler(
		InventoryServiceCheckProductAvailabilityProcedure,
		svc.CheckProductAvailability,
		connect.WithSchema(inventoryServiceMethods.ByName("CheckProductAvailability")),
		connect.WithHandlerOptions(opts...),
	)
	inventoryServiceGetLowStockItemsHandler := connect.NewUnaryHandler(
		InventoryServiceGetLowStockItemsProcedure,
		svc.GetLowStockItems,
		connect.WithSchema(inventoryServiceMethods.ByName("GetLowStockItems")),
		connect.WithHandlerOptions(opts...),
	)
	inventoryServiceGetResourceInventoryHandler := connect.NewUnaryHandler(
		InventoryServiceGetResourceInventoryProcedure,
		svc.GetResourceInventory,
		connect.WithSchema(inventoryServiceMethods.ByName("GetResourceInventory")),
		connect.WithHandlerOptions(opts...),
	)
	inventoryServiceGetRecentInventoryTransactionsHandler := connect.NewUnaryHandler(
		InventoryServiceGetRecentInventoryTransactionsProcedure,
		svc.GetRecentInventoryTransactions,
		connect.WithSchema(inventoryServiceMethods.ByName("GetRecentInventoryTransactions")),
		connect.WithHandlerOptions(opts...),
	)
	inventoryServiceGetProductTransactionHistoryHandler := connect.NewUnaryHandler(
		InventoryServiceGetProductTransactionHistoryProcedure,
		svc.GetProductTransactionHistory,
		connect.WithSchema(inventoryServiceMethods.ByName("GetProductTransactionHistory")),
		connect.WithHandlerOptions(opts...),
	)
	inventoryServiceListProductsBySupplierHandler := connect.NewUnaryHandler(
		InventoryServiceListProductsBySupplierProcedure,
		svc.ListProductsBySupplier,
		connect.WithSchema(inventoryServiceMethods.ByName("ListProductsBySupplier")),
		connect.WithHandlerOptions(opts...),
	)
	return "/inventory.v1.InventoryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InventoryServiceGetProductInventoryLevelsProcedure:
			inventoryServiceGetProductInventoryLevelsHandler.ServeHTTP(w, r)
		case InventoryServiceCheckProductAvailabilityProcedure:
			inventoryServiceCheckProductAvailabilityHandler.ServeHTTP(w, r)
		case InventoryServiceGetLowStockItemsProcedure:
			inventoryServiceGetLowStockItemsHandler.ServeHTTP(w, r)
		case InventoryServiceGetResourceInventoryProcedure:
			inventoryServiceGetResourceInventoryHandler.ServeHTTP(w, r)
		case InventoryServiceGetRecentInventoryTransactionsProcedure:
			inventoryServiceGetRecentInventoryTransactionsHandler.ServeHTTP(w, r)
		case InventoryServiceGetProductTransactionHistoryProcedure:
			inventoryServiceGetProductTransactionHistoryHandler.ServeHTTP(w, r)
		case InventoryServiceListProductsBySupplierProcedure:
			inventoryServiceListProductsBySupplierHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInventoryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInventoryServiceHandler struct{}

func (UnimplementedInventoryServiceHandler) GetProductInventoryLevels(context.Context, *connect.Request[v1.GetProductInventoryLevelsRequest]) (*connect.Response[v1.GetProductInventoryLevelsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.InventoryService.GetProductInventoryLevels is not implemented"))
}

func (UnimplementedInventoryServiceHandler) CheckProductAvailability(context.Context, *connect.Request[v1.CheckProductAvailabilityRequest]) (*connect.Response[v1.CheckProductAvailabilityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.InventoryService.CheckProductAvailability is not implemented"))
}

func (UnimplementedInventoryServiceHandler) GetLowStockItems(context.Context, *connect.Request[v1.GetLowStockItemsRequest]) (*connect.Response[v1.GetLowStockItemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.InventoryService.GetLowStockItems is not implemented"))
}

func (UnimplementedInventoryServiceHandler) GetResourceInventory(context.Context, *connect.Request[v1.GetResourceInventoryRequest]) (*connect.Response[v1.GetResourceInventoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.InventoryService.GetResourceInventory is not implemented"))
}

func (UnimplementedInventoryServiceHandler) GetRecentInventoryTransactions(context.Context, *connect.Request[v1.GetInventoryTransactionHistoryRequest]) (*connect.Response[v1.GetInventoryTransactionHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.InventoryService.GetRecentInventoryTransactions is not implemented"))
}

func (UnimplementedInventoryServiceHandler) GetProductTransactionHistory(context.Context, *connect.Request[v1.GetProductTransactionHistoryRequest]) (*connect.Response[v1.GetProductTransactionHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.InventoryService.GetProductTransactionHistory is not implemented"))
}

func (UnimplementedInventoryServiceHandler) ListProductsBySupplier(context.Context, *connect.Request[v1.ListProductsBySupplierRequest]) (*connect.Response[v1.ListProductsBySupplierResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.InventoryService.ListProductsBySupplier is not implemented"))
}
