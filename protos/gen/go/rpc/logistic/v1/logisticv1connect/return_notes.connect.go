// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: logistic/v1/return_notes.proto

package logisticv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/karibu-cap/sabitou/protos/gen/go/rpc/logistic/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ReturnServiceName is the fully-qualified name of the ReturnService service.
	ReturnServiceName = "logistic.v1.ReturnService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ReturnServiceCreateCustomerReturnProcedure is the fully-qualified name of the ReturnService's
	// CreateCustomerReturn RPC.
	ReturnServiceCreateCustomerReturnProcedure = "/logistic.v1.ReturnService/CreateCustomerReturn"
	// ReturnServiceProcessReturnRequestProcedure is the fully-qualified name of the ReturnService's
	// ProcessReturnRequest RPC.
	ReturnServiceProcessReturnRequestProcedure = "/logistic.v1.ReturnService/ProcessReturnRequest"
	// ReturnServiceCreateCreditNoteFromReturnProcedure is the fully-qualified name of the
	// ReturnService's CreateCreditNoteFromReturn RPC.
	ReturnServiceCreateCreditNoteFromReturnProcedure = "/logistic.v1.ReturnService/CreateCreditNoteFromReturn"
	// ReturnServiceCreateDebitNoteFromReturnProcedure is the fully-qualified name of the
	// ReturnService's CreateDebitNoteFromReturn RPC.
	ReturnServiceCreateDebitNoteFromReturnProcedure = "/logistic.v1.ReturnService/CreateDebitNoteFromReturn"
	// ReturnServiceGetReturnProcedure is the fully-qualified name of the ReturnService's GetReturn RPC.
	ReturnServiceGetReturnProcedure = "/logistic.v1.ReturnService/GetReturn"
	// ReturnServiceListReturnsProcedure is the fully-qualified name of the ReturnService's ListReturns
	// RPC.
	ReturnServiceListReturnsProcedure = "/logistic.v1.ReturnService/ListReturns"
)

// ReturnServiceClient is a client for the logistic.v1.ReturnService service.
type ReturnServiceClient interface {
	// Create a return note (customer returning to you)
	CreateCustomerReturn(context.Context, *connect.Request[v1.CreateCustomerReturnRequest]) (*connect.Response[v1.CreateCustomerReturnResponse], error)
	// Approve/reject a return request
	ProcessReturnRequest(context.Context, *connect.Request[v1.ProcessReturnRequestRequest]) (*connect.Response[v1.ProcessReturnRequestResponse], error)
	// Create credit note from return
	CreateCreditNoteFromReturn(context.Context, *connect.Request[v1.CreateCreditNoteFromReturnRequest]) (*connect.Response[v1.CreateCreditNoteFromReturnResponse], error)
	// Create debit note for supplier return
	CreateDebitNoteFromReturn(context.Context, *connect.Request[v1.CreateDebitNoteFromReturnRequest]) (*connect.Response[v1.CreateDebitNoteFromReturnResponse], error)
	// Get return details
	GetReturn(context.Context, *connect.Request[v1.GetReturnRequest]) (*connect.Response[v1.GetReturnResponse], error)
	// List returns
	ListReturns(context.Context, *connect.Request[v1.ListReturnsRequest]) (*connect.Response[v1.ListReturnsResponse], error)
}

// NewReturnServiceClient constructs a client for the logistic.v1.ReturnService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReturnServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ReturnServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	returnServiceMethods := v1.File_logistic_v1_return_notes_proto.Services().ByName("ReturnService").Methods()
	return &returnServiceClient{
		createCustomerReturn: connect.NewClient[v1.CreateCustomerReturnRequest, v1.CreateCustomerReturnResponse](
			httpClient,
			baseURL+ReturnServiceCreateCustomerReturnProcedure,
			connect.WithSchema(returnServiceMethods.ByName("CreateCustomerReturn")),
			connect.WithClientOptions(opts...),
		),
		processReturnRequest: connect.NewClient[v1.ProcessReturnRequestRequest, v1.ProcessReturnRequestResponse](
			httpClient,
			baseURL+ReturnServiceProcessReturnRequestProcedure,
			connect.WithSchema(returnServiceMethods.ByName("ProcessReturnRequest")),
			connect.WithClientOptions(opts...),
		),
		createCreditNoteFromReturn: connect.NewClient[v1.CreateCreditNoteFromReturnRequest, v1.CreateCreditNoteFromReturnResponse](
			httpClient,
			baseURL+ReturnServiceCreateCreditNoteFromReturnProcedure,
			connect.WithSchema(returnServiceMethods.ByName("CreateCreditNoteFromReturn")),
			connect.WithClientOptions(opts...),
		),
		createDebitNoteFromReturn: connect.NewClient[v1.CreateDebitNoteFromReturnRequest, v1.CreateDebitNoteFromReturnResponse](
			httpClient,
			baseURL+ReturnServiceCreateDebitNoteFromReturnProcedure,
			connect.WithSchema(returnServiceMethods.ByName("CreateDebitNoteFromReturn")),
			connect.WithClientOptions(opts...),
		),
		getReturn: connect.NewClient[v1.GetReturnRequest, v1.GetReturnResponse](
			httpClient,
			baseURL+ReturnServiceGetReturnProcedure,
			connect.WithSchema(returnServiceMethods.ByName("GetReturn")),
			connect.WithClientOptions(opts...),
		),
		listReturns: connect.NewClient[v1.ListReturnsRequest, v1.ListReturnsResponse](
			httpClient,
			baseURL+ReturnServiceListReturnsProcedure,
			connect.WithSchema(returnServiceMethods.ByName("ListReturns")),
			connect.WithClientOptions(opts...),
		),
	}
}

// returnServiceClient implements ReturnServiceClient.
type returnServiceClient struct {
	createCustomerReturn       *connect.Client[v1.CreateCustomerReturnRequest, v1.CreateCustomerReturnResponse]
	processReturnRequest       *connect.Client[v1.ProcessReturnRequestRequest, v1.ProcessReturnRequestResponse]
	createCreditNoteFromReturn *connect.Client[v1.CreateCreditNoteFromReturnRequest, v1.CreateCreditNoteFromReturnResponse]
	createDebitNoteFromReturn  *connect.Client[v1.CreateDebitNoteFromReturnRequest, v1.CreateDebitNoteFromReturnResponse]
	getReturn                  *connect.Client[v1.GetReturnRequest, v1.GetReturnResponse]
	listReturns                *connect.Client[v1.ListReturnsRequest, v1.ListReturnsResponse]
}

// CreateCustomerReturn calls logistic.v1.ReturnService.CreateCustomerReturn.
func (c *returnServiceClient) CreateCustomerReturn(ctx context.Context, req *connect.Request[v1.CreateCustomerReturnRequest]) (*connect.Response[v1.CreateCustomerReturnResponse], error) {
	return c.createCustomerReturn.CallUnary(ctx, req)
}

// ProcessReturnRequest calls logistic.v1.ReturnService.ProcessReturnRequest.
func (c *returnServiceClient) ProcessReturnRequest(ctx context.Context, req *connect.Request[v1.ProcessReturnRequestRequest]) (*connect.Response[v1.ProcessReturnRequestResponse], error) {
	return c.processReturnRequest.CallUnary(ctx, req)
}

// CreateCreditNoteFromReturn calls logistic.v1.ReturnService.CreateCreditNoteFromReturn.
func (c *returnServiceClient) CreateCreditNoteFromReturn(ctx context.Context, req *connect.Request[v1.CreateCreditNoteFromReturnRequest]) (*connect.Response[v1.CreateCreditNoteFromReturnResponse], error) {
	return c.createCreditNoteFromReturn.CallUnary(ctx, req)
}

// CreateDebitNoteFromReturn calls logistic.v1.ReturnService.CreateDebitNoteFromReturn.
func (c *returnServiceClient) CreateDebitNoteFromReturn(ctx context.Context, req *connect.Request[v1.CreateDebitNoteFromReturnRequest]) (*connect.Response[v1.CreateDebitNoteFromReturnResponse], error) {
	return c.createDebitNoteFromReturn.CallUnary(ctx, req)
}

// GetReturn calls logistic.v1.ReturnService.GetReturn.
func (c *returnServiceClient) GetReturn(ctx context.Context, req *connect.Request[v1.GetReturnRequest]) (*connect.Response[v1.GetReturnResponse], error) {
	return c.getReturn.CallUnary(ctx, req)
}

// ListReturns calls logistic.v1.ReturnService.ListReturns.
func (c *returnServiceClient) ListReturns(ctx context.Context, req *connect.Request[v1.ListReturnsRequest]) (*connect.Response[v1.ListReturnsResponse], error) {
	return c.listReturns.CallUnary(ctx, req)
}

// ReturnServiceHandler is an implementation of the logistic.v1.ReturnService service.
type ReturnServiceHandler interface {
	// Create a return note (customer returning to you)
	CreateCustomerReturn(context.Context, *connect.Request[v1.CreateCustomerReturnRequest]) (*connect.Response[v1.CreateCustomerReturnResponse], error)
	// Approve/reject a return request
	ProcessReturnRequest(context.Context, *connect.Request[v1.ProcessReturnRequestRequest]) (*connect.Response[v1.ProcessReturnRequestResponse], error)
	// Create credit note from return
	CreateCreditNoteFromReturn(context.Context, *connect.Request[v1.CreateCreditNoteFromReturnRequest]) (*connect.Response[v1.CreateCreditNoteFromReturnResponse], error)
	// Create debit note for supplier return
	CreateDebitNoteFromReturn(context.Context, *connect.Request[v1.CreateDebitNoteFromReturnRequest]) (*connect.Response[v1.CreateDebitNoteFromReturnResponse], error)
	// Get return details
	GetReturn(context.Context, *connect.Request[v1.GetReturnRequest]) (*connect.Response[v1.GetReturnResponse], error)
	// List returns
	ListReturns(context.Context, *connect.Request[v1.ListReturnsRequest]) (*connect.Response[v1.ListReturnsResponse], error)
}

// NewReturnServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReturnServiceHandler(svc ReturnServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	returnServiceMethods := v1.File_logistic_v1_return_notes_proto.Services().ByName("ReturnService").Methods()
	returnServiceCreateCustomerReturnHandler := connect.NewUnaryHandler(
		ReturnServiceCreateCustomerReturnProcedure,
		svc.CreateCustomerReturn,
		connect.WithSchema(returnServiceMethods.ByName("CreateCustomerReturn")),
		connect.WithHandlerOptions(opts...),
	)
	returnServiceProcessReturnRequestHandler := connect.NewUnaryHandler(
		ReturnServiceProcessReturnRequestProcedure,
		svc.ProcessReturnRequest,
		connect.WithSchema(returnServiceMethods.ByName("ProcessReturnRequest")),
		connect.WithHandlerOptions(opts...),
	)
	returnServiceCreateCreditNoteFromReturnHandler := connect.NewUnaryHandler(
		ReturnServiceCreateCreditNoteFromReturnProcedure,
		svc.CreateCreditNoteFromReturn,
		connect.WithSchema(returnServiceMethods.ByName("CreateCreditNoteFromReturn")),
		connect.WithHandlerOptions(opts...),
	)
	returnServiceCreateDebitNoteFromReturnHandler := connect.NewUnaryHandler(
		ReturnServiceCreateDebitNoteFromReturnProcedure,
		svc.CreateDebitNoteFromReturn,
		connect.WithSchema(returnServiceMethods.ByName("CreateDebitNoteFromReturn")),
		connect.WithHandlerOptions(opts...),
	)
	returnServiceGetReturnHandler := connect.NewUnaryHandler(
		ReturnServiceGetReturnProcedure,
		svc.GetReturn,
		connect.WithSchema(returnServiceMethods.ByName("GetReturn")),
		connect.WithHandlerOptions(opts...),
	)
	returnServiceListReturnsHandler := connect.NewUnaryHandler(
		ReturnServiceListReturnsProcedure,
		svc.ListReturns,
		connect.WithSchema(returnServiceMethods.ByName("ListReturns")),
		connect.WithHandlerOptions(opts...),
	)
	return "/logistic.v1.ReturnService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ReturnServiceCreateCustomerReturnProcedure:
			returnServiceCreateCustomerReturnHandler.ServeHTTP(w, r)
		case ReturnServiceProcessReturnRequestProcedure:
			returnServiceProcessReturnRequestHandler.ServeHTTP(w, r)
		case ReturnServiceCreateCreditNoteFromReturnProcedure:
			returnServiceCreateCreditNoteFromReturnHandler.ServeHTTP(w, r)
		case ReturnServiceCreateDebitNoteFromReturnProcedure:
			returnServiceCreateDebitNoteFromReturnHandler.ServeHTTP(w, r)
		case ReturnServiceGetReturnProcedure:
			returnServiceGetReturnHandler.ServeHTTP(w, r)
		case ReturnServiceListReturnsProcedure:
			returnServiceListReturnsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedReturnServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReturnServiceHandler struct{}

func (UnimplementedReturnServiceHandler) CreateCustomerReturn(context.Context, *connect.Request[v1.CreateCustomerReturnRequest]) (*connect.Response[v1.CreateCustomerReturnResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("logistic.v1.ReturnService.CreateCustomerReturn is not implemented"))
}

func (UnimplementedReturnServiceHandler) ProcessReturnRequest(context.Context, *connect.Request[v1.ProcessReturnRequestRequest]) (*connect.Response[v1.ProcessReturnRequestResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("logistic.v1.ReturnService.ProcessReturnRequest is not implemented"))
}

func (UnimplementedReturnServiceHandler) CreateCreditNoteFromReturn(context.Context, *connect.Request[v1.CreateCreditNoteFromReturnRequest]) (*connect.Response[v1.CreateCreditNoteFromReturnResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("logistic.v1.ReturnService.CreateCreditNoteFromReturn is not implemented"))
}

func (UnimplementedReturnServiceHandler) CreateDebitNoteFromReturn(context.Context, *connect.Request[v1.CreateDebitNoteFromReturnRequest]) (*connect.Response[v1.CreateDebitNoteFromReturnResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("logistic.v1.ReturnService.CreateDebitNoteFromReturn is not implemented"))
}

func (UnimplementedReturnServiceHandler) GetReturn(context.Context, *connect.Request[v1.GetReturnRequest]) (*connect.Response[v1.GetReturnResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("logistic.v1.ReturnService.GetReturn is not implemented"))
}

func (UnimplementedReturnServiceHandler) ListReturns(context.Context, *connect.Request[v1.ListReturnsRequest]) (*connect.Response[v1.ListReturnsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("logistic.v1.ReturnService.ListReturns is not implemented"))
}
