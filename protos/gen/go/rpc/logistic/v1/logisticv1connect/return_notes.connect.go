// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: logistic/v1/return_notes.proto

package logisticv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/karibu-cap/sabitou/protos/gen/go/rpc/logistic/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ReturnNotesServiceName is the fully-qualified name of the ReturnNotesService service.
	ReturnNotesServiceName = "logistic.v1.ReturnNotesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ReturnNotesServiceCreateReturnNotesProcedure is the fully-qualified name of the
	// ReturnNotesService's CreateReturnNotes RPC.
	ReturnNotesServiceCreateReturnNotesProcedure = "/logistic.v1.ReturnNotesService/CreateReturnNotes"
)

// ReturnNotesServiceClient is a client for the logistic.v1.ReturnNotesService service.
type ReturnNotesServiceClient interface {
	// Create a return note (customer returning to you)
	CreateReturnNotes(context.Context, *connect.Request[v1.CreateReturnNotesRequest]) (*connect.Response[v1.CreateReturnNotesResponse], error)
}

// NewReturnNotesServiceClient constructs a client for the logistic.v1.ReturnNotesService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReturnNotesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ReturnNotesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	returnNotesServiceMethods := v1.File_logistic_v1_return_notes_proto.Services().ByName("ReturnNotesService").Methods()
	return &returnNotesServiceClient{
		createReturnNotes: connect.NewClient[v1.CreateReturnNotesRequest, v1.CreateReturnNotesResponse](
			httpClient,
			baseURL+ReturnNotesServiceCreateReturnNotesProcedure,
			connect.WithSchema(returnNotesServiceMethods.ByName("CreateReturnNotes")),
			connect.WithClientOptions(opts...),
		),
	}
}

// returnNotesServiceClient implements ReturnNotesServiceClient.
type returnNotesServiceClient struct {
	createReturnNotes *connect.Client[v1.CreateReturnNotesRequest, v1.CreateReturnNotesResponse]
}

// CreateReturnNotes calls logistic.v1.ReturnNotesService.CreateReturnNotes.
func (c *returnNotesServiceClient) CreateReturnNotes(ctx context.Context, req *connect.Request[v1.CreateReturnNotesRequest]) (*connect.Response[v1.CreateReturnNotesResponse], error) {
	return c.createReturnNotes.CallUnary(ctx, req)
}

// ReturnNotesServiceHandler is an implementation of the logistic.v1.ReturnNotesService service.
type ReturnNotesServiceHandler interface {
	// Create a return note (customer returning to you)
	CreateReturnNotes(context.Context, *connect.Request[v1.CreateReturnNotesRequest]) (*connect.Response[v1.CreateReturnNotesResponse], error)
}

// NewReturnNotesServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReturnNotesServiceHandler(svc ReturnNotesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	returnNotesServiceMethods := v1.File_logistic_v1_return_notes_proto.Services().ByName("ReturnNotesService").Methods()
	returnNotesServiceCreateReturnNotesHandler := connect.NewUnaryHandler(
		ReturnNotesServiceCreateReturnNotesProcedure,
		svc.CreateReturnNotes,
		connect.WithSchema(returnNotesServiceMethods.ByName("CreateReturnNotes")),
		connect.WithHandlerOptions(opts...),
	)
	return "/logistic.v1.ReturnNotesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ReturnNotesServiceCreateReturnNotesProcedure:
			returnNotesServiceCreateReturnNotesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedReturnNotesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReturnNotesServiceHandler struct{}

func (UnimplementedReturnNotesServiceHandler) CreateReturnNotes(context.Context, *connect.Request[v1.CreateReturnNotesRequest]) (*connect.Response[v1.CreateReturnNotesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("logistic.v1.ReturnNotesService.CreateReturnNotes is not implemented"))
}
