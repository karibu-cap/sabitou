// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: payments/v1/gift_voucher.proto

package paymentsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/karibu-cap/sabitou/protos/gen/go/rpc/payments/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GiftVoucherServiceName is the fully-qualified name of the GiftVoucherService service.
	GiftVoucherServiceName = "payments.v1.GiftVoucherService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GiftVoucherServiceValidateVoucherProcedure is the fully-qualified name of the
	// GiftVoucherService's ValidateVoucher RPC.
	GiftVoucherServiceValidateVoucherProcedure = "/payments.v1.GiftVoucherService/ValidateVoucher"
	// GiftVoucherServiceGetVoucherProcedure is the fully-qualified name of the GiftVoucherService's
	// GetVoucher RPC.
	GiftVoucherServiceGetVoucherProcedure = "/payments.v1.GiftVoucherService/GetVoucher"
	// GiftVoucherServiceListVouchersProcedure is the fully-qualified name of the GiftVoucherService's
	// ListVouchers RPC.
	GiftVoucherServiceListVouchersProcedure = "/payments.v1.GiftVoucherService/ListVouchers"
)

// GiftVoucherServiceClient is a client for the payments.v1.GiftVoucherService service.
type GiftVoucherServiceClient interface {
	// Validate voucher before use
	ValidateVoucher(context.Context, *connect.Request[v1.ValidateVoucherRequest]) (*connect.Response[v1.ValidateVoucherResponse], error)
	// Get voucher details
	GetVoucher(context.Context, *connect.Request[v1.GetVoucherRequest]) (*connect.Response[v1.GetVoucherResponse], error)
	// List vouchers with filtering
	ListVouchers(context.Context, *connect.Request[v1.ListVouchersRequest]) (*connect.Response[v1.ListVouchersResponse], error)
}

// NewGiftVoucherServiceClient constructs a client for the payments.v1.GiftVoucherService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGiftVoucherServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GiftVoucherServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	giftVoucherServiceMethods := v1.File_payments_v1_gift_voucher_proto.Services().ByName("GiftVoucherService").Methods()
	return &giftVoucherServiceClient{
		validateVoucher: connect.NewClient[v1.ValidateVoucherRequest, v1.ValidateVoucherResponse](
			httpClient,
			baseURL+GiftVoucherServiceValidateVoucherProcedure,
			connect.WithSchema(giftVoucherServiceMethods.ByName("ValidateVoucher")),
			connect.WithClientOptions(opts...),
		),
		getVoucher: connect.NewClient[v1.GetVoucherRequest, v1.GetVoucherResponse](
			httpClient,
			baseURL+GiftVoucherServiceGetVoucherProcedure,
			connect.WithSchema(giftVoucherServiceMethods.ByName("GetVoucher")),
			connect.WithClientOptions(opts...),
		),
		listVouchers: connect.NewClient[v1.ListVouchersRequest, v1.ListVouchersResponse](
			httpClient,
			baseURL+GiftVoucherServiceListVouchersProcedure,
			connect.WithSchema(giftVoucherServiceMethods.ByName("ListVouchers")),
			connect.WithClientOptions(opts...),
		),
	}
}

// giftVoucherServiceClient implements GiftVoucherServiceClient.
type giftVoucherServiceClient struct {
	validateVoucher *connect.Client[v1.ValidateVoucherRequest, v1.ValidateVoucherResponse]
	getVoucher      *connect.Client[v1.GetVoucherRequest, v1.GetVoucherResponse]
	listVouchers    *connect.Client[v1.ListVouchersRequest, v1.ListVouchersResponse]
}

// ValidateVoucher calls payments.v1.GiftVoucherService.ValidateVoucher.
func (c *giftVoucherServiceClient) ValidateVoucher(ctx context.Context, req *connect.Request[v1.ValidateVoucherRequest]) (*connect.Response[v1.ValidateVoucherResponse], error) {
	return c.validateVoucher.CallUnary(ctx, req)
}

// GetVoucher calls payments.v1.GiftVoucherService.GetVoucher.
func (c *giftVoucherServiceClient) GetVoucher(ctx context.Context, req *connect.Request[v1.GetVoucherRequest]) (*connect.Response[v1.GetVoucherResponse], error) {
	return c.getVoucher.CallUnary(ctx, req)
}

// ListVouchers calls payments.v1.GiftVoucherService.ListVouchers.
func (c *giftVoucherServiceClient) ListVouchers(ctx context.Context, req *connect.Request[v1.ListVouchersRequest]) (*connect.Response[v1.ListVouchersResponse], error) {
	return c.listVouchers.CallUnary(ctx, req)
}

// GiftVoucherServiceHandler is an implementation of the payments.v1.GiftVoucherService service.
type GiftVoucherServiceHandler interface {
	// Validate voucher before use
	ValidateVoucher(context.Context, *connect.Request[v1.ValidateVoucherRequest]) (*connect.Response[v1.ValidateVoucherResponse], error)
	// Get voucher details
	GetVoucher(context.Context, *connect.Request[v1.GetVoucherRequest]) (*connect.Response[v1.GetVoucherResponse], error)
	// List vouchers with filtering
	ListVouchers(context.Context, *connect.Request[v1.ListVouchersRequest]) (*connect.Response[v1.ListVouchersResponse], error)
}

// NewGiftVoucherServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGiftVoucherServiceHandler(svc GiftVoucherServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	giftVoucherServiceMethods := v1.File_payments_v1_gift_voucher_proto.Services().ByName("GiftVoucherService").Methods()
	giftVoucherServiceValidateVoucherHandler := connect.NewUnaryHandler(
		GiftVoucherServiceValidateVoucherProcedure,
		svc.ValidateVoucher,
		connect.WithSchema(giftVoucherServiceMethods.ByName("ValidateVoucher")),
		connect.WithHandlerOptions(opts...),
	)
	giftVoucherServiceGetVoucherHandler := connect.NewUnaryHandler(
		GiftVoucherServiceGetVoucherProcedure,
		svc.GetVoucher,
		connect.WithSchema(giftVoucherServiceMethods.ByName("GetVoucher")),
		connect.WithHandlerOptions(opts...),
	)
	giftVoucherServiceListVouchersHandler := connect.NewUnaryHandler(
		GiftVoucherServiceListVouchersProcedure,
		svc.ListVouchers,
		connect.WithSchema(giftVoucherServiceMethods.ByName("ListVouchers")),
		connect.WithHandlerOptions(opts...),
	)
	return "/payments.v1.GiftVoucherService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GiftVoucherServiceValidateVoucherProcedure:
			giftVoucherServiceValidateVoucherHandler.ServeHTTP(w, r)
		case GiftVoucherServiceGetVoucherProcedure:
			giftVoucherServiceGetVoucherHandler.ServeHTTP(w, r)
		case GiftVoucherServiceListVouchersProcedure:
			giftVoucherServiceListVouchersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGiftVoucherServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGiftVoucherServiceHandler struct{}

func (UnimplementedGiftVoucherServiceHandler) ValidateVoucher(context.Context, *connect.Request[v1.ValidateVoucherRequest]) (*connect.Response[v1.ValidateVoucherResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payments.v1.GiftVoucherService.ValidateVoucher is not implemented"))
}

func (UnimplementedGiftVoucherServiceHandler) GetVoucher(context.Context, *connect.Request[v1.GetVoucherRequest]) (*connect.Response[v1.GetVoucherResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payments.v1.GiftVoucherService.GetVoucher is not implemented"))
}

func (UnimplementedGiftVoucherServiceHandler) ListVouchers(context.Context, *connect.Request[v1.ListVouchersRequest]) (*connect.Response[v1.ListVouchersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payments.v1.GiftVoucherService.ListVouchers is not implemented"))
}
