// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: payments/v1/payments.proto

package paymentsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/karibu-cap/sabitou/protos/gen/go/rpc/payments/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PaymentServiceName is the fully-qualified name of the PaymentService service.
	PaymentServiceName = "payments.v1.PaymentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PaymentServiceCreatePaymentProcedure is the fully-qualified name of the PaymentService's
	// CreatePayment RPC.
	PaymentServiceCreatePaymentProcedure = "/payments.v1.PaymentService/CreatePayment"
	// PaymentServiceGetPaymentProcedure is the fully-qualified name of the PaymentService's GetPayment
	// RPC.
	PaymentServiceGetPaymentProcedure = "/payments.v1.PaymentService/GetPayment"
	// PaymentServiceListPaymentsProcedure is the fully-qualified name of the PaymentService's
	// ListPayments RPC.
	PaymentServiceListPaymentsProcedure = "/payments.v1.PaymentService/ListPayments"
	// PaymentServiceCreateRefundProcedure is the fully-qualified name of the PaymentService's
	// CreateRefund RPC.
	PaymentServiceCreateRefundProcedure = "/payments.v1.PaymentService/CreateRefund"
)

// PaymentServiceClient is a client for the payments.v1.PaymentService service.
type PaymentServiceClient interface {
	// Record a payment
	CreatePayment(context.Context, *connect.Request[v1.CreatePaymentRequest]) (*connect.Response[v1.CreatePaymentResponse], error)
	// Get payment details
	GetPayment(context.Context, *connect.Request[v1.GetPaymentRequest]) (*connect.Response[v1.GetPaymentResponse], error)
	// List payments with filtering
	ListPayments(context.Context, *connect.Request[v1.ListPaymentsRequest]) (*connect.Response[v1.ListPaymentsResponse], error)
	// Process refund
	CreateRefund(context.Context, *connect.Request[v1.CreateRefundRequest]) (*connect.Response[v1.CreateRefundResponse], error)
}

// NewPaymentServiceClient constructs a client for the payments.v1.PaymentService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPaymentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PaymentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	paymentServiceMethods := v1.File_payments_v1_payments_proto.Services().ByName("PaymentService").Methods()
	return &paymentServiceClient{
		createPayment: connect.NewClient[v1.CreatePaymentRequest, v1.CreatePaymentResponse](
			httpClient,
			baseURL+PaymentServiceCreatePaymentProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("CreatePayment")),
			connect.WithClientOptions(opts...),
		),
		getPayment: connect.NewClient[v1.GetPaymentRequest, v1.GetPaymentResponse](
			httpClient,
			baseURL+PaymentServiceGetPaymentProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("GetPayment")),
			connect.WithClientOptions(opts...),
		),
		listPayments: connect.NewClient[v1.ListPaymentsRequest, v1.ListPaymentsResponse](
			httpClient,
			baseURL+PaymentServiceListPaymentsProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("ListPayments")),
			connect.WithClientOptions(opts...),
		),
		createRefund: connect.NewClient[v1.CreateRefundRequest, v1.CreateRefundResponse](
			httpClient,
			baseURL+PaymentServiceCreateRefundProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("CreateRefund")),
			connect.WithClientOptions(opts...),
		),
	}
}

// paymentServiceClient implements PaymentServiceClient.
type paymentServiceClient struct {
	createPayment *connect.Client[v1.CreatePaymentRequest, v1.CreatePaymentResponse]
	getPayment    *connect.Client[v1.GetPaymentRequest, v1.GetPaymentResponse]
	listPayments  *connect.Client[v1.ListPaymentsRequest, v1.ListPaymentsResponse]
	createRefund  *connect.Client[v1.CreateRefundRequest, v1.CreateRefundResponse]
}

// CreatePayment calls payments.v1.PaymentService.CreatePayment.
func (c *paymentServiceClient) CreatePayment(ctx context.Context, req *connect.Request[v1.CreatePaymentRequest]) (*connect.Response[v1.CreatePaymentResponse], error) {
	return c.createPayment.CallUnary(ctx, req)
}

// GetPayment calls payments.v1.PaymentService.GetPayment.
func (c *paymentServiceClient) GetPayment(ctx context.Context, req *connect.Request[v1.GetPaymentRequest]) (*connect.Response[v1.GetPaymentResponse], error) {
	return c.getPayment.CallUnary(ctx, req)
}

// ListPayments calls payments.v1.PaymentService.ListPayments.
func (c *paymentServiceClient) ListPayments(ctx context.Context, req *connect.Request[v1.ListPaymentsRequest]) (*connect.Response[v1.ListPaymentsResponse], error) {
	return c.listPayments.CallUnary(ctx, req)
}

// CreateRefund calls payments.v1.PaymentService.CreateRefund.
func (c *paymentServiceClient) CreateRefund(ctx context.Context, req *connect.Request[v1.CreateRefundRequest]) (*connect.Response[v1.CreateRefundResponse], error) {
	return c.createRefund.CallUnary(ctx, req)
}

// PaymentServiceHandler is an implementation of the payments.v1.PaymentService service.
type PaymentServiceHandler interface {
	// Record a payment
	CreatePayment(context.Context, *connect.Request[v1.CreatePaymentRequest]) (*connect.Response[v1.CreatePaymentResponse], error)
	// Get payment details
	GetPayment(context.Context, *connect.Request[v1.GetPaymentRequest]) (*connect.Response[v1.GetPaymentResponse], error)
	// List payments with filtering
	ListPayments(context.Context, *connect.Request[v1.ListPaymentsRequest]) (*connect.Response[v1.ListPaymentsResponse], error)
	// Process refund
	CreateRefund(context.Context, *connect.Request[v1.CreateRefundRequest]) (*connect.Response[v1.CreateRefundResponse], error)
}

// NewPaymentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPaymentServiceHandler(svc PaymentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	paymentServiceMethods := v1.File_payments_v1_payments_proto.Services().ByName("PaymentService").Methods()
	paymentServiceCreatePaymentHandler := connect.NewUnaryHandler(
		PaymentServiceCreatePaymentProcedure,
		svc.CreatePayment,
		connect.WithSchema(paymentServiceMethods.ByName("CreatePayment")),
		connect.WithHandlerOptions(opts...),
	)
	paymentServiceGetPaymentHandler := connect.NewUnaryHandler(
		PaymentServiceGetPaymentProcedure,
		svc.GetPayment,
		connect.WithSchema(paymentServiceMethods.ByName("GetPayment")),
		connect.WithHandlerOptions(opts...),
	)
	paymentServiceListPaymentsHandler := connect.NewUnaryHandler(
		PaymentServiceListPaymentsProcedure,
		svc.ListPayments,
		connect.WithSchema(paymentServiceMethods.ByName("ListPayments")),
		connect.WithHandlerOptions(opts...),
	)
	paymentServiceCreateRefundHandler := connect.NewUnaryHandler(
		PaymentServiceCreateRefundProcedure,
		svc.CreateRefund,
		connect.WithSchema(paymentServiceMethods.ByName("CreateRefund")),
		connect.WithHandlerOptions(opts...),
	)
	return "/payments.v1.PaymentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PaymentServiceCreatePaymentProcedure:
			paymentServiceCreatePaymentHandler.ServeHTTP(w, r)
		case PaymentServiceGetPaymentProcedure:
			paymentServiceGetPaymentHandler.ServeHTTP(w, r)
		case PaymentServiceListPaymentsProcedure:
			paymentServiceListPaymentsHandler.ServeHTTP(w, r)
		case PaymentServiceCreateRefundProcedure:
			paymentServiceCreateRefundHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPaymentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPaymentServiceHandler struct{}

func (UnimplementedPaymentServiceHandler) CreatePayment(context.Context, *connect.Request[v1.CreatePaymentRequest]) (*connect.Response[v1.CreatePaymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payments.v1.PaymentService.CreatePayment is not implemented"))
}

func (UnimplementedPaymentServiceHandler) GetPayment(context.Context, *connect.Request[v1.GetPaymentRequest]) (*connect.Response[v1.GetPaymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payments.v1.PaymentService.GetPayment is not implemented"))
}

func (UnimplementedPaymentServiceHandler) ListPayments(context.Context, *connect.Request[v1.ListPaymentsRequest]) (*connect.Response[v1.ListPaymentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payments.v1.PaymentService.ListPayments is not implemented"))
}

func (UnimplementedPaymentServiceHandler) CreateRefund(context.Context, *connect.Request[v1.CreateRefundRequest]) (*connect.Response[v1.CreateRefundResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payments.v1.PaymentService.CreateRefund is not implemented"))
}
