// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: payments/v1/payments.proto

package paymentsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/karibu-cap/sabitou/protos/gen/go/rpc/payments/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PaymentsServiceName is the fully-qualified name of the PaymentsService service.
	PaymentsServiceName = "payments.v1.PaymentsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PaymentsServiceCreatePaymentProcedure is the fully-qualified name of the PaymentsService's
	// CreatePayment RPC.
	PaymentsServiceCreatePaymentProcedure = "/payments.v1.PaymentsService/CreatePayment"
	// PaymentsServiceGetPaymentProcedure is the fully-qualified name of the PaymentsService's
	// GetPayment RPC.
	PaymentsServiceGetPaymentProcedure = "/payments.v1.PaymentsService/GetPayment"
	// PaymentsServiceListPaymentsProcedure is the fully-qualified name of the PaymentsService's
	// ListPayments RPC.
	PaymentsServiceListPaymentsProcedure = "/payments.v1.PaymentsService/ListPayments"
)

// PaymentsServiceClient is a client for the payments.v1.PaymentsService service.
type PaymentsServiceClient interface {
	// Record a payment
	CreatePayment(context.Context, *connect.Request[v1.CreatePaymentRequest]) (*connect.Response[v1.CreatePaymentResponse], error)
	// Get payment details
	GetPayment(context.Context, *connect.Request[v1.GetPaymentRequest]) (*connect.Response[v1.GetPaymentResponse], error)
	// List payments with filtering
	ListPayments(context.Context, *connect.Request[v1.ListPaymentsRequest]) (*connect.Response[v1.ListPaymentsResponse], error)
}

// NewPaymentsServiceClient constructs a client for the payments.v1.PaymentsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPaymentsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PaymentsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	paymentsServiceMethods := v1.File_payments_v1_payments_proto.Services().ByName("PaymentsService").Methods()
	return &paymentsServiceClient{
		createPayment: connect.NewClient[v1.CreatePaymentRequest, v1.CreatePaymentResponse](
			httpClient,
			baseURL+PaymentsServiceCreatePaymentProcedure,
			connect.WithSchema(paymentsServiceMethods.ByName("CreatePayment")),
			connect.WithClientOptions(opts...),
		),
		getPayment: connect.NewClient[v1.GetPaymentRequest, v1.GetPaymentResponse](
			httpClient,
			baseURL+PaymentsServiceGetPaymentProcedure,
			connect.WithSchema(paymentsServiceMethods.ByName("GetPayment")),
			connect.WithClientOptions(opts...),
		),
		listPayments: connect.NewClient[v1.ListPaymentsRequest, v1.ListPaymentsResponse](
			httpClient,
			baseURL+PaymentsServiceListPaymentsProcedure,
			connect.WithSchema(paymentsServiceMethods.ByName("ListPayments")),
			connect.WithClientOptions(opts...),
		),
	}
}

// paymentsServiceClient implements PaymentsServiceClient.
type paymentsServiceClient struct {
	createPayment *connect.Client[v1.CreatePaymentRequest, v1.CreatePaymentResponse]
	getPayment    *connect.Client[v1.GetPaymentRequest, v1.GetPaymentResponse]
	listPayments  *connect.Client[v1.ListPaymentsRequest, v1.ListPaymentsResponse]
}

// CreatePayment calls payments.v1.PaymentsService.CreatePayment.
func (c *paymentsServiceClient) CreatePayment(ctx context.Context, req *connect.Request[v1.CreatePaymentRequest]) (*connect.Response[v1.CreatePaymentResponse], error) {
	return c.createPayment.CallUnary(ctx, req)
}

// GetPayment calls payments.v1.PaymentsService.GetPayment.
func (c *paymentsServiceClient) GetPayment(ctx context.Context, req *connect.Request[v1.GetPaymentRequest]) (*connect.Response[v1.GetPaymentResponse], error) {
	return c.getPayment.CallUnary(ctx, req)
}

// ListPayments calls payments.v1.PaymentsService.ListPayments.
func (c *paymentsServiceClient) ListPayments(ctx context.Context, req *connect.Request[v1.ListPaymentsRequest]) (*connect.Response[v1.ListPaymentsResponse], error) {
	return c.listPayments.CallUnary(ctx, req)
}

// PaymentsServiceHandler is an implementation of the payments.v1.PaymentsService service.
type PaymentsServiceHandler interface {
	// Record a payment
	CreatePayment(context.Context, *connect.Request[v1.CreatePaymentRequest]) (*connect.Response[v1.CreatePaymentResponse], error)
	// Get payment details
	GetPayment(context.Context, *connect.Request[v1.GetPaymentRequest]) (*connect.Response[v1.GetPaymentResponse], error)
	// List payments with filtering
	ListPayments(context.Context, *connect.Request[v1.ListPaymentsRequest]) (*connect.Response[v1.ListPaymentsResponse], error)
}

// NewPaymentsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPaymentsServiceHandler(svc PaymentsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	paymentsServiceMethods := v1.File_payments_v1_payments_proto.Services().ByName("PaymentsService").Methods()
	paymentsServiceCreatePaymentHandler := connect.NewUnaryHandler(
		PaymentsServiceCreatePaymentProcedure,
		svc.CreatePayment,
		connect.WithSchema(paymentsServiceMethods.ByName("CreatePayment")),
		connect.WithHandlerOptions(opts...),
	)
	paymentsServiceGetPaymentHandler := connect.NewUnaryHandler(
		PaymentsServiceGetPaymentProcedure,
		svc.GetPayment,
		connect.WithSchema(paymentsServiceMethods.ByName("GetPayment")),
		connect.WithHandlerOptions(opts...),
	)
	paymentsServiceListPaymentsHandler := connect.NewUnaryHandler(
		PaymentsServiceListPaymentsProcedure,
		svc.ListPayments,
		connect.WithSchema(paymentsServiceMethods.ByName("ListPayments")),
		connect.WithHandlerOptions(opts...),
	)
	return "/payments.v1.PaymentsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PaymentsServiceCreatePaymentProcedure:
			paymentsServiceCreatePaymentHandler.ServeHTTP(w, r)
		case PaymentsServiceGetPaymentProcedure:
			paymentsServiceGetPaymentHandler.ServeHTTP(w, r)
		case PaymentsServiceListPaymentsProcedure:
			paymentsServiceListPaymentsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPaymentsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPaymentsServiceHandler struct{}

func (UnimplementedPaymentsServiceHandler) CreatePayment(context.Context, *connect.Request[v1.CreatePaymentRequest]) (*connect.Response[v1.CreatePaymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payments.v1.PaymentsService.CreatePayment is not implemented"))
}

func (UnimplementedPaymentsServiceHandler) GetPayment(context.Context, *connect.Request[v1.GetPaymentRequest]) (*connect.Response[v1.GetPaymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payments.v1.PaymentsService.GetPayment is not implemented"))
}

func (UnimplementedPaymentsServiceHandler) ListPayments(context.Context, *connect.Request[v1.ListPaymentsRequest]) (*connect.Response[v1.ListPaymentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payments.v1.PaymentsService.ListPayments is not implemented"))
}
