// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: payments/v1/cash_receipt.proto

package paymentsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/karibu-cap/sabitou/protos/gen/go/rpc/payments/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CashReceiptServiceName is the fully-qualified name of the CashReceiptService service.
	CashReceiptServiceName = "payments.v1.CashReceiptService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CashReceiptServiceCreateCashReceiptProcedure is the fully-qualified name of the
	// CashReceiptService's CreateCashReceipt RPC.
	CashReceiptServiceCreateCashReceiptProcedure = "/payments.v1.CashReceiptService/CreateCashReceipt"
)

// CashReceiptServiceClient is a client for the payments.v1.CashReceiptService service.
type CashReceiptServiceClient interface {
	// Create a cash receipt (most common - 95% of transactions)
	CreateCashReceipt(context.Context, *connect.Request[v1.CreateCashReceiptRequest]) (*connect.Response[v1.CreateCashReceiptResponse], error)
}

// NewCashReceiptServiceClient constructs a client for the payments.v1.CashReceiptService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCashReceiptServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CashReceiptServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	cashReceiptServiceMethods := v1.File_payments_v1_cash_receipt_proto.Services().ByName("CashReceiptService").Methods()
	return &cashReceiptServiceClient{
		createCashReceipt: connect.NewClient[v1.CreateCashReceiptRequest, v1.CreateCashReceiptResponse](
			httpClient,
			baseURL+CashReceiptServiceCreateCashReceiptProcedure,
			connect.WithSchema(cashReceiptServiceMethods.ByName("CreateCashReceipt")),
			connect.WithClientOptions(opts...),
		),
	}
}

// cashReceiptServiceClient implements CashReceiptServiceClient.
type cashReceiptServiceClient struct {
	createCashReceipt *connect.Client[v1.CreateCashReceiptRequest, v1.CreateCashReceiptResponse]
}

// CreateCashReceipt calls payments.v1.CashReceiptService.CreateCashReceipt.
func (c *cashReceiptServiceClient) CreateCashReceipt(ctx context.Context, req *connect.Request[v1.CreateCashReceiptRequest]) (*connect.Response[v1.CreateCashReceiptResponse], error) {
	return c.createCashReceipt.CallUnary(ctx, req)
}

// CashReceiptServiceHandler is an implementation of the payments.v1.CashReceiptService service.
type CashReceiptServiceHandler interface {
	// Create a cash receipt (most common - 95% of transactions)
	CreateCashReceipt(context.Context, *connect.Request[v1.CreateCashReceiptRequest]) (*connect.Response[v1.CreateCashReceiptResponse], error)
}

// NewCashReceiptServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCashReceiptServiceHandler(svc CashReceiptServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	cashReceiptServiceMethods := v1.File_payments_v1_cash_receipt_proto.Services().ByName("CashReceiptService").Methods()
	cashReceiptServiceCreateCashReceiptHandler := connect.NewUnaryHandler(
		CashReceiptServiceCreateCashReceiptProcedure,
		svc.CreateCashReceipt,
		connect.WithSchema(cashReceiptServiceMethods.ByName("CreateCashReceipt")),
		connect.WithHandlerOptions(opts...),
	)
	return "/payments.v1.CashReceiptService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CashReceiptServiceCreateCashReceiptProcedure:
			cashReceiptServiceCreateCashReceiptHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCashReceiptServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCashReceiptServiceHandler struct{}

func (UnimplementedCashReceiptServiceHandler) CreateCashReceipt(context.Context, *connect.Request[v1.CreateCashReceiptRequest]) (*connect.Response[v1.CreateCashReceiptResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payments.v1.CashReceiptService.CreateCashReceipt is not implemented"))
}
