// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: payments/v1/pos_service.proto

package paymentsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/karibu-cap/sabitou/protos/gen/go/rpc/payments/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PointOfSaleServiceName is the fully-qualified name of the PointOfSaleService service.
	PointOfSaleServiceName = "payments.v1.PointOfSaleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PointOfSaleServiceCreateCashReceiptProcedure is the fully-qualified name of the
	// PointOfSaleService's CreateCashReceipt RPC.
	PointOfSaleServiceCreateCashReceiptProcedure = "/payments.v1.PointOfSaleService/CreateCashReceipt"
	// PointOfSaleServiceProcessSaleWithVoucherProcedure is the fully-qualified name of the
	// PointOfSaleService's ProcessSaleWithVoucher RPC.
	PointOfSaleServiceProcessSaleWithVoucherProcedure = "/payments.v1.PointOfSaleService/ProcessSaleWithVoucher"
	// PointOfSaleServicePayWithVoucherProcedure is the fully-qualified name of the PointOfSaleService's
	// PayWithVoucher RPC.
	PointOfSaleServicePayWithVoucherProcedure = "/payments.v1.PointOfSaleService/PayWithVoucher"
	// PointOfSaleServiceGetCashierDailySummaryProcedure is the fully-qualified name of the
	// PointOfSaleService's GetCashierDailySummary RPC.
	PointOfSaleServiceGetCashierDailySummaryProcedure = "/payments.v1.PointOfSaleService/GetCashierDailySummary"
)

// PointOfSaleServiceClient is a client for the payments.v1.PointOfSaleService service.
type PointOfSaleServiceClient interface {
	// Create a cash receipt (most common - 95% of transactions)
	CreateCashReceipt(context.Context, *connect.Request[v1.CreateCashReceiptRequest]) (*connect.Response[v1.CreateCashReceiptResponse], error)
	// Handle insufficient change scenario (create invoice + gift voucher)
	ProcessSaleWithVoucher(context.Context, *connect.Request[v1.ProcessSaleWithVoucherRequest]) (*connect.Response[v1.ProcessSaleWithVoucherResponse], error)
	// Use gift voucher in payment
	PayWithVoucher(context.Context, *connect.Request[v1.PayWithVoucherRequest]) (*connect.Response[v1.PayWithVoucherResponse], error)
	// Get daily sales summary for a cashier
	GetCashierDailySummary(context.Context, *connect.Request[v1.GetCashierDailySummaryRequest]) (*connect.Response[v1.GetCashierDailySummaryResponse], error)
}

// NewPointOfSaleServiceClient constructs a client for the payments.v1.PointOfSaleService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPointOfSaleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PointOfSaleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	pointOfSaleServiceMethods := v1.File_payments_v1_pos_service_proto.Services().ByName("PointOfSaleService").Methods()
	return &pointOfSaleServiceClient{
		createCashReceipt: connect.NewClient[v1.CreateCashReceiptRequest, v1.CreateCashReceiptResponse](
			httpClient,
			baseURL+PointOfSaleServiceCreateCashReceiptProcedure,
			connect.WithSchema(pointOfSaleServiceMethods.ByName("CreateCashReceipt")),
			connect.WithClientOptions(opts...),
		),
		processSaleWithVoucher: connect.NewClient[v1.ProcessSaleWithVoucherRequest, v1.ProcessSaleWithVoucherResponse](
			httpClient,
			baseURL+PointOfSaleServiceProcessSaleWithVoucherProcedure,
			connect.WithSchema(pointOfSaleServiceMethods.ByName("ProcessSaleWithVoucher")),
			connect.WithClientOptions(opts...),
		),
		payWithVoucher: connect.NewClient[v1.PayWithVoucherRequest, v1.PayWithVoucherResponse](
			httpClient,
			baseURL+PointOfSaleServicePayWithVoucherProcedure,
			connect.WithSchema(pointOfSaleServiceMethods.ByName("PayWithVoucher")),
			connect.WithClientOptions(opts...),
		),
		getCashierDailySummary: connect.NewClient[v1.GetCashierDailySummaryRequest, v1.GetCashierDailySummaryResponse](
			httpClient,
			baseURL+PointOfSaleServiceGetCashierDailySummaryProcedure,
			connect.WithSchema(pointOfSaleServiceMethods.ByName("GetCashierDailySummary")),
			connect.WithClientOptions(opts...),
		),
	}
}

// pointOfSaleServiceClient implements PointOfSaleServiceClient.
type pointOfSaleServiceClient struct {
	createCashReceipt      *connect.Client[v1.CreateCashReceiptRequest, v1.CreateCashReceiptResponse]
	processSaleWithVoucher *connect.Client[v1.ProcessSaleWithVoucherRequest, v1.ProcessSaleWithVoucherResponse]
	payWithVoucher         *connect.Client[v1.PayWithVoucherRequest, v1.PayWithVoucherResponse]
	getCashierDailySummary *connect.Client[v1.GetCashierDailySummaryRequest, v1.GetCashierDailySummaryResponse]
}

// CreateCashReceipt calls payments.v1.PointOfSaleService.CreateCashReceipt.
func (c *pointOfSaleServiceClient) CreateCashReceipt(ctx context.Context, req *connect.Request[v1.CreateCashReceiptRequest]) (*connect.Response[v1.CreateCashReceiptResponse], error) {
	return c.createCashReceipt.CallUnary(ctx, req)
}

// ProcessSaleWithVoucher calls payments.v1.PointOfSaleService.ProcessSaleWithVoucher.
func (c *pointOfSaleServiceClient) ProcessSaleWithVoucher(ctx context.Context, req *connect.Request[v1.ProcessSaleWithVoucherRequest]) (*connect.Response[v1.ProcessSaleWithVoucherResponse], error) {
	return c.processSaleWithVoucher.CallUnary(ctx, req)
}

// PayWithVoucher calls payments.v1.PointOfSaleService.PayWithVoucher.
func (c *pointOfSaleServiceClient) PayWithVoucher(ctx context.Context, req *connect.Request[v1.PayWithVoucherRequest]) (*connect.Response[v1.PayWithVoucherResponse], error) {
	return c.payWithVoucher.CallUnary(ctx, req)
}

// GetCashierDailySummary calls payments.v1.PointOfSaleService.GetCashierDailySummary.
func (c *pointOfSaleServiceClient) GetCashierDailySummary(ctx context.Context, req *connect.Request[v1.GetCashierDailySummaryRequest]) (*connect.Response[v1.GetCashierDailySummaryResponse], error) {
	return c.getCashierDailySummary.CallUnary(ctx, req)
}

// PointOfSaleServiceHandler is an implementation of the payments.v1.PointOfSaleService service.
type PointOfSaleServiceHandler interface {
	// Create a cash receipt (most common - 95% of transactions)
	CreateCashReceipt(context.Context, *connect.Request[v1.CreateCashReceiptRequest]) (*connect.Response[v1.CreateCashReceiptResponse], error)
	// Handle insufficient change scenario (create invoice + gift voucher)
	ProcessSaleWithVoucher(context.Context, *connect.Request[v1.ProcessSaleWithVoucherRequest]) (*connect.Response[v1.ProcessSaleWithVoucherResponse], error)
	// Use gift voucher in payment
	PayWithVoucher(context.Context, *connect.Request[v1.PayWithVoucherRequest]) (*connect.Response[v1.PayWithVoucherResponse], error)
	// Get daily sales summary for a cashier
	GetCashierDailySummary(context.Context, *connect.Request[v1.GetCashierDailySummaryRequest]) (*connect.Response[v1.GetCashierDailySummaryResponse], error)
}

// NewPointOfSaleServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPointOfSaleServiceHandler(svc PointOfSaleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	pointOfSaleServiceMethods := v1.File_payments_v1_pos_service_proto.Services().ByName("PointOfSaleService").Methods()
	pointOfSaleServiceCreateCashReceiptHandler := connect.NewUnaryHandler(
		PointOfSaleServiceCreateCashReceiptProcedure,
		svc.CreateCashReceipt,
		connect.WithSchema(pointOfSaleServiceMethods.ByName("CreateCashReceipt")),
		connect.WithHandlerOptions(opts...),
	)
	pointOfSaleServiceProcessSaleWithVoucherHandler := connect.NewUnaryHandler(
		PointOfSaleServiceProcessSaleWithVoucherProcedure,
		svc.ProcessSaleWithVoucher,
		connect.WithSchema(pointOfSaleServiceMethods.ByName("ProcessSaleWithVoucher")),
		connect.WithHandlerOptions(opts...),
	)
	pointOfSaleServicePayWithVoucherHandler := connect.NewUnaryHandler(
		PointOfSaleServicePayWithVoucherProcedure,
		svc.PayWithVoucher,
		connect.WithSchema(pointOfSaleServiceMethods.ByName("PayWithVoucher")),
		connect.WithHandlerOptions(opts...),
	)
	pointOfSaleServiceGetCashierDailySummaryHandler := connect.NewUnaryHandler(
		PointOfSaleServiceGetCashierDailySummaryProcedure,
		svc.GetCashierDailySummary,
		connect.WithSchema(pointOfSaleServiceMethods.ByName("GetCashierDailySummary")),
		connect.WithHandlerOptions(opts...),
	)
	return "/payments.v1.PointOfSaleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PointOfSaleServiceCreateCashReceiptProcedure:
			pointOfSaleServiceCreateCashReceiptHandler.ServeHTTP(w, r)
		case PointOfSaleServiceProcessSaleWithVoucherProcedure:
			pointOfSaleServiceProcessSaleWithVoucherHandler.ServeHTTP(w, r)
		case PointOfSaleServicePayWithVoucherProcedure:
			pointOfSaleServicePayWithVoucherHandler.ServeHTTP(w, r)
		case PointOfSaleServiceGetCashierDailySummaryProcedure:
			pointOfSaleServiceGetCashierDailySummaryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPointOfSaleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPointOfSaleServiceHandler struct{}

func (UnimplementedPointOfSaleServiceHandler) CreateCashReceipt(context.Context, *connect.Request[v1.CreateCashReceiptRequest]) (*connect.Response[v1.CreateCashReceiptResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payments.v1.PointOfSaleService.CreateCashReceipt is not implemented"))
}

func (UnimplementedPointOfSaleServiceHandler) ProcessSaleWithVoucher(context.Context, *connect.Request[v1.ProcessSaleWithVoucherRequest]) (*connect.Response[v1.ProcessSaleWithVoucherResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payments.v1.PointOfSaleService.ProcessSaleWithVoucher is not implemented"))
}

func (UnimplementedPointOfSaleServiceHandler) PayWithVoucher(context.Context, *connect.Request[v1.PayWithVoucherRequest]) (*connect.Response[v1.PayWithVoucherResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payments.v1.PointOfSaleService.PayWithVoucher is not implemented"))
}

func (UnimplementedPointOfSaleServiceHandler) GetCashierDailySummary(context.Context, *connect.Request[v1.GetCashierDailySummaryRequest]) (*connect.Response[v1.GetCashierDailySummaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payments.v1.PointOfSaleService.GetCashierDailySummary is not implemented"))
}
