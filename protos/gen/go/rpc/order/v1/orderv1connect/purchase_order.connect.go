// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: order/v1/purchase_order.proto

package orderv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/karibu-cap/sabitou/protos/gen/go/rpc/order/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PurchaseOrderServiceName is the fully-qualified name of the PurchaseOrderService service.
	PurchaseOrderServiceName = "order.v1.PurchaseOrderService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PurchaseOrderServiceCreatePurchaseOrderProcedure is the fully-qualified name of the
	// PurchaseOrderService's CreatePurchaseOrder RPC.
	PurchaseOrderServiceCreatePurchaseOrderProcedure = "/order.v1.PurchaseOrderService/CreatePurchaseOrder"
	// PurchaseOrderServiceGetPurchaseOrderProcedure is the fully-qualified name of the
	// PurchaseOrderService's GetPurchaseOrder RPC.
	PurchaseOrderServiceGetPurchaseOrderProcedure = "/order.v1.PurchaseOrderService/GetPurchaseOrder"
	// PurchaseOrderServiceListPurchaseOrdersProcedure is the fully-qualified name of the
	// PurchaseOrderService's ListPurchaseOrders RPC.
	PurchaseOrderServiceListPurchaseOrdersProcedure = "/order.v1.PurchaseOrderService/ListPurchaseOrders"
	// PurchaseOrderServiceUpdatePurchaseOrderStatusProcedure is the fully-qualified name of the
	// PurchaseOrderService's UpdatePurchaseOrderStatus RPC.
	PurchaseOrderServiceUpdatePurchaseOrderStatusProcedure = "/order.v1.PurchaseOrderService/UpdatePurchaseOrderStatus"
	// PurchaseOrderServiceCancelPurchaseOrderProcedure is the fully-qualified name of the
	// PurchaseOrderService's CancelPurchaseOrder RPC.
	PurchaseOrderServiceCancelPurchaseOrderProcedure = "/order.v1.PurchaseOrderService/CancelPurchaseOrder"
	// PurchaseOrderServiceCreateReceivingNoteProcedure is the fully-qualified name of the
	// PurchaseOrderService's CreateReceivingNote RPC.
	PurchaseOrderServiceCreateReceivingNoteProcedure = "/order.v1.PurchaseOrderService/CreateReceivingNote"
)

// PurchaseOrderServiceClient is a client for the order.v1.PurchaseOrderService service.
type PurchaseOrderServiceClient interface {
	// Create a purchase order to supplier
	CreatePurchaseOrder(context.Context, *connect.Request[v1.CreatePurchaseOrderRequest]) (*connect.Response[v1.CreatePurchaseOrderResponse], error)
	// Get purchase order details
	GetPurchaseOrder(context.Context, *connect.Request[v1.GetPurchaseOrderRequest]) (*connect.Response[v1.GetPurchaseOrderResponse], error)
	// List purchase orders
	ListPurchaseOrders(context.Context, *connect.Request[v1.ListPurchaseOrdersRequest]) (*connect.Response[v1.ListPurchaseOrdersResponse], error)
	// Update purchase order status
	UpdatePurchaseOrderStatus(context.Context, *connect.Request[v1.UpdatePurchaseOrderStatusRequest]) (*connect.Response[v1.UpdatePurchaseOrderStatusResponse], error)
	// Cancel purchase order
	CancelPurchaseOrder(context.Context, *connect.Request[v1.CancelPurchaseOrderRequest]) (*connect.Response[v1.CancelPurchaseOrderResponse], error)
	// Create receiving note when goods arrive
	CreateReceivingNote(context.Context, *connect.Request[v1.CreateReceivingNoteRequest]) (*connect.Response[v1.CreateReceivingNoteResponse], error)
}

// NewPurchaseOrderServiceClient constructs a client for the order.v1.PurchaseOrderService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPurchaseOrderServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PurchaseOrderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	purchaseOrderServiceMethods := v1.File_order_v1_purchase_order_proto.Services().ByName("PurchaseOrderService").Methods()
	return &purchaseOrderServiceClient{
		createPurchaseOrder: connect.NewClient[v1.CreatePurchaseOrderRequest, v1.CreatePurchaseOrderResponse](
			httpClient,
			baseURL+PurchaseOrderServiceCreatePurchaseOrderProcedure,
			connect.WithSchema(purchaseOrderServiceMethods.ByName("CreatePurchaseOrder")),
			connect.WithClientOptions(opts...),
		),
		getPurchaseOrder: connect.NewClient[v1.GetPurchaseOrderRequest, v1.GetPurchaseOrderResponse](
			httpClient,
			baseURL+PurchaseOrderServiceGetPurchaseOrderProcedure,
			connect.WithSchema(purchaseOrderServiceMethods.ByName("GetPurchaseOrder")),
			connect.WithClientOptions(opts...),
		),
		listPurchaseOrders: connect.NewClient[v1.ListPurchaseOrdersRequest, v1.ListPurchaseOrdersResponse](
			httpClient,
			baseURL+PurchaseOrderServiceListPurchaseOrdersProcedure,
			connect.WithSchema(purchaseOrderServiceMethods.ByName("ListPurchaseOrders")),
			connect.WithClientOptions(opts...),
		),
		updatePurchaseOrderStatus: connect.NewClient[v1.UpdatePurchaseOrderStatusRequest, v1.UpdatePurchaseOrderStatusResponse](
			httpClient,
			baseURL+PurchaseOrderServiceUpdatePurchaseOrderStatusProcedure,
			connect.WithSchema(purchaseOrderServiceMethods.ByName("UpdatePurchaseOrderStatus")),
			connect.WithClientOptions(opts...),
		),
		cancelPurchaseOrder: connect.NewClient[v1.CancelPurchaseOrderRequest, v1.CancelPurchaseOrderResponse](
			httpClient,
			baseURL+PurchaseOrderServiceCancelPurchaseOrderProcedure,
			connect.WithSchema(purchaseOrderServiceMethods.ByName("CancelPurchaseOrder")),
			connect.WithClientOptions(opts...),
		),
		createReceivingNote: connect.NewClient[v1.CreateReceivingNoteRequest, v1.CreateReceivingNoteResponse](
			httpClient,
			baseURL+PurchaseOrderServiceCreateReceivingNoteProcedure,
			connect.WithSchema(purchaseOrderServiceMethods.ByName("CreateReceivingNote")),
			connect.WithClientOptions(opts...),
		),
	}
}

// purchaseOrderServiceClient implements PurchaseOrderServiceClient.
type purchaseOrderServiceClient struct {
	createPurchaseOrder       *connect.Client[v1.CreatePurchaseOrderRequest, v1.CreatePurchaseOrderResponse]
	getPurchaseOrder          *connect.Client[v1.GetPurchaseOrderRequest, v1.GetPurchaseOrderResponse]
	listPurchaseOrders        *connect.Client[v1.ListPurchaseOrdersRequest, v1.ListPurchaseOrdersResponse]
	updatePurchaseOrderStatus *connect.Client[v1.UpdatePurchaseOrderStatusRequest, v1.UpdatePurchaseOrderStatusResponse]
	cancelPurchaseOrder       *connect.Client[v1.CancelPurchaseOrderRequest, v1.CancelPurchaseOrderResponse]
	createReceivingNote       *connect.Client[v1.CreateReceivingNoteRequest, v1.CreateReceivingNoteResponse]
}

// CreatePurchaseOrder calls order.v1.PurchaseOrderService.CreatePurchaseOrder.
func (c *purchaseOrderServiceClient) CreatePurchaseOrder(ctx context.Context, req *connect.Request[v1.CreatePurchaseOrderRequest]) (*connect.Response[v1.CreatePurchaseOrderResponse], error) {
	return c.createPurchaseOrder.CallUnary(ctx, req)
}

// GetPurchaseOrder calls order.v1.PurchaseOrderService.GetPurchaseOrder.
func (c *purchaseOrderServiceClient) GetPurchaseOrder(ctx context.Context, req *connect.Request[v1.GetPurchaseOrderRequest]) (*connect.Response[v1.GetPurchaseOrderResponse], error) {
	return c.getPurchaseOrder.CallUnary(ctx, req)
}

// ListPurchaseOrders calls order.v1.PurchaseOrderService.ListPurchaseOrders.
func (c *purchaseOrderServiceClient) ListPurchaseOrders(ctx context.Context, req *connect.Request[v1.ListPurchaseOrdersRequest]) (*connect.Response[v1.ListPurchaseOrdersResponse], error) {
	return c.listPurchaseOrders.CallUnary(ctx, req)
}

// UpdatePurchaseOrderStatus calls order.v1.PurchaseOrderService.UpdatePurchaseOrderStatus.
func (c *purchaseOrderServiceClient) UpdatePurchaseOrderStatus(ctx context.Context, req *connect.Request[v1.UpdatePurchaseOrderStatusRequest]) (*connect.Response[v1.UpdatePurchaseOrderStatusResponse], error) {
	return c.updatePurchaseOrderStatus.CallUnary(ctx, req)
}

// CancelPurchaseOrder calls order.v1.PurchaseOrderService.CancelPurchaseOrder.
func (c *purchaseOrderServiceClient) CancelPurchaseOrder(ctx context.Context, req *connect.Request[v1.CancelPurchaseOrderRequest]) (*connect.Response[v1.CancelPurchaseOrderResponse], error) {
	return c.cancelPurchaseOrder.CallUnary(ctx, req)
}

// CreateReceivingNote calls order.v1.PurchaseOrderService.CreateReceivingNote.
func (c *purchaseOrderServiceClient) CreateReceivingNote(ctx context.Context, req *connect.Request[v1.CreateReceivingNoteRequest]) (*connect.Response[v1.CreateReceivingNoteResponse], error) {
	return c.createReceivingNote.CallUnary(ctx, req)
}

// PurchaseOrderServiceHandler is an implementation of the order.v1.PurchaseOrderService service.
type PurchaseOrderServiceHandler interface {
	// Create a purchase order to supplier
	CreatePurchaseOrder(context.Context, *connect.Request[v1.CreatePurchaseOrderRequest]) (*connect.Response[v1.CreatePurchaseOrderResponse], error)
	// Get purchase order details
	GetPurchaseOrder(context.Context, *connect.Request[v1.GetPurchaseOrderRequest]) (*connect.Response[v1.GetPurchaseOrderResponse], error)
	// List purchase orders
	ListPurchaseOrders(context.Context, *connect.Request[v1.ListPurchaseOrdersRequest]) (*connect.Response[v1.ListPurchaseOrdersResponse], error)
	// Update purchase order status
	UpdatePurchaseOrderStatus(context.Context, *connect.Request[v1.UpdatePurchaseOrderStatusRequest]) (*connect.Response[v1.UpdatePurchaseOrderStatusResponse], error)
	// Cancel purchase order
	CancelPurchaseOrder(context.Context, *connect.Request[v1.CancelPurchaseOrderRequest]) (*connect.Response[v1.CancelPurchaseOrderResponse], error)
	// Create receiving note when goods arrive
	CreateReceivingNote(context.Context, *connect.Request[v1.CreateReceivingNoteRequest]) (*connect.Response[v1.CreateReceivingNoteResponse], error)
}

// NewPurchaseOrderServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPurchaseOrderServiceHandler(svc PurchaseOrderServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	purchaseOrderServiceMethods := v1.File_order_v1_purchase_order_proto.Services().ByName("PurchaseOrderService").Methods()
	purchaseOrderServiceCreatePurchaseOrderHandler := connect.NewUnaryHandler(
		PurchaseOrderServiceCreatePurchaseOrderProcedure,
		svc.CreatePurchaseOrder,
		connect.WithSchema(purchaseOrderServiceMethods.ByName("CreatePurchaseOrder")),
		connect.WithHandlerOptions(opts...),
	)
	purchaseOrderServiceGetPurchaseOrderHandler := connect.NewUnaryHandler(
		PurchaseOrderServiceGetPurchaseOrderProcedure,
		svc.GetPurchaseOrder,
		connect.WithSchema(purchaseOrderServiceMethods.ByName("GetPurchaseOrder")),
		connect.WithHandlerOptions(opts...),
	)
	purchaseOrderServiceListPurchaseOrdersHandler := connect.NewUnaryHandler(
		PurchaseOrderServiceListPurchaseOrdersProcedure,
		svc.ListPurchaseOrders,
		connect.WithSchema(purchaseOrderServiceMethods.ByName("ListPurchaseOrders")),
		connect.WithHandlerOptions(opts...),
	)
	purchaseOrderServiceUpdatePurchaseOrderStatusHandler := connect.NewUnaryHandler(
		PurchaseOrderServiceUpdatePurchaseOrderStatusProcedure,
		svc.UpdatePurchaseOrderStatus,
		connect.WithSchema(purchaseOrderServiceMethods.ByName("UpdatePurchaseOrderStatus")),
		connect.WithHandlerOptions(opts...),
	)
	purchaseOrderServiceCancelPurchaseOrderHandler := connect.NewUnaryHandler(
		PurchaseOrderServiceCancelPurchaseOrderProcedure,
		svc.CancelPurchaseOrder,
		connect.WithSchema(purchaseOrderServiceMethods.ByName("CancelPurchaseOrder")),
		connect.WithHandlerOptions(opts...),
	)
	purchaseOrderServiceCreateReceivingNoteHandler := connect.NewUnaryHandler(
		PurchaseOrderServiceCreateReceivingNoteProcedure,
		svc.CreateReceivingNote,
		connect.WithSchema(purchaseOrderServiceMethods.ByName("CreateReceivingNote")),
		connect.WithHandlerOptions(opts...),
	)
	return "/order.v1.PurchaseOrderService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PurchaseOrderServiceCreatePurchaseOrderProcedure:
			purchaseOrderServiceCreatePurchaseOrderHandler.ServeHTTP(w, r)
		case PurchaseOrderServiceGetPurchaseOrderProcedure:
			purchaseOrderServiceGetPurchaseOrderHandler.ServeHTTP(w, r)
		case PurchaseOrderServiceListPurchaseOrdersProcedure:
			purchaseOrderServiceListPurchaseOrdersHandler.ServeHTTP(w, r)
		case PurchaseOrderServiceUpdatePurchaseOrderStatusProcedure:
			purchaseOrderServiceUpdatePurchaseOrderStatusHandler.ServeHTTP(w, r)
		case PurchaseOrderServiceCancelPurchaseOrderProcedure:
			purchaseOrderServiceCancelPurchaseOrderHandler.ServeHTTP(w, r)
		case PurchaseOrderServiceCreateReceivingNoteProcedure:
			purchaseOrderServiceCreateReceivingNoteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPurchaseOrderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPurchaseOrderServiceHandler struct{}

func (UnimplementedPurchaseOrderServiceHandler) CreatePurchaseOrder(context.Context, *connect.Request[v1.CreatePurchaseOrderRequest]) (*connect.Response[v1.CreatePurchaseOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.v1.PurchaseOrderService.CreatePurchaseOrder is not implemented"))
}

func (UnimplementedPurchaseOrderServiceHandler) GetPurchaseOrder(context.Context, *connect.Request[v1.GetPurchaseOrderRequest]) (*connect.Response[v1.GetPurchaseOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.v1.PurchaseOrderService.GetPurchaseOrder is not implemented"))
}

func (UnimplementedPurchaseOrderServiceHandler) ListPurchaseOrders(context.Context, *connect.Request[v1.ListPurchaseOrdersRequest]) (*connect.Response[v1.ListPurchaseOrdersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.v1.PurchaseOrderService.ListPurchaseOrders is not implemented"))
}

func (UnimplementedPurchaseOrderServiceHandler) UpdatePurchaseOrderStatus(context.Context, *connect.Request[v1.UpdatePurchaseOrderStatusRequest]) (*connect.Response[v1.UpdatePurchaseOrderStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.v1.PurchaseOrderService.UpdatePurchaseOrderStatus is not implemented"))
}

func (UnimplementedPurchaseOrderServiceHandler) CancelPurchaseOrder(context.Context, *connect.Request[v1.CancelPurchaseOrderRequest]) (*connect.Response[v1.CancelPurchaseOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.v1.PurchaseOrderService.CancelPurchaseOrder is not implemented"))
}

func (UnimplementedPurchaseOrderServiceHandler) CreateReceivingNote(context.Context, *connect.Request[v1.CreateReceivingNoteRequest]) (*connect.Response[v1.CreateReceivingNoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.v1.PurchaseOrderService.CreateReceivingNote is not implemented"))
}
