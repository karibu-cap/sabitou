// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: order/v1/voucher.proto

package orderv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/karibu-cap/sabitou/protos/gen/go/rpc/order/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VoucherServiceName is the fully-qualified name of the VoucherService service.
	VoucherServiceName = "order.v1.VoucherService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VoucherServiceCreateVoucherProcedure is the fully-qualified name of the VoucherService's
	// CreateVoucher RPC.
	VoucherServiceCreateVoucherProcedure = "/order.v1.VoucherService/CreateVoucher"
	// VoucherServiceGetVoucherProcedure is the fully-qualified name of the VoucherService's GetVoucher
	// RPC.
	VoucherServiceGetVoucherProcedure = "/order.v1.VoucherService/GetVoucher"
	// VoucherServiceRedeemVoucherProcedure is the fully-qualified name of the VoucherService's
	// RedeemVoucher RPC.
	VoucherServiceRedeemVoucherProcedure = "/order.v1.VoucherService/RedeemVoucher"
	// VoucherServiceFindVouchersProcedure is the fully-qualified name of the VoucherService's
	// FindVouchers RPC.
	VoucherServiceFindVouchersProcedure = "/order.v1.VoucherService/FindVouchers"
)

// VoucherServiceClient is a client for the order.v1.VoucherService service.
type VoucherServiceClient interface {
	CreateVoucher(context.Context, *connect.Request[v1.CreateVoucherRequest]) (*connect.Response[v1.CreateVoucherResponse], error)
	GetVoucher(context.Context, *connect.Request[v1.GetVoucherRequest]) (*connect.Response[v1.GetVoucherResponse], error)
	RedeemVoucher(context.Context, *connect.Request[v1.RedeemVoucherRequest]) (*connect.Response[v1.RedeemVoucherResponse], error)
	FindVouchers(context.Context, *connect.Request[v1.FindVouchersRequest]) (*connect.Response[v1.FindVouchersResponse], error)
}

// NewVoucherServiceClient constructs a client for the order.v1.VoucherService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVoucherServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VoucherServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	voucherServiceMethods := v1.File_order_v1_voucher_proto.Services().ByName("VoucherService").Methods()
	return &voucherServiceClient{
		createVoucher: connect.NewClient[v1.CreateVoucherRequest, v1.CreateVoucherResponse](
			httpClient,
			baseURL+VoucherServiceCreateVoucherProcedure,
			connect.WithSchema(voucherServiceMethods.ByName("CreateVoucher")),
			connect.WithClientOptions(opts...),
		),
		getVoucher: connect.NewClient[v1.GetVoucherRequest, v1.GetVoucherResponse](
			httpClient,
			baseURL+VoucherServiceGetVoucherProcedure,
			connect.WithSchema(voucherServiceMethods.ByName("GetVoucher")),
			connect.WithClientOptions(opts...),
		),
		redeemVoucher: connect.NewClient[v1.RedeemVoucherRequest, v1.RedeemVoucherResponse](
			httpClient,
			baseURL+VoucherServiceRedeemVoucherProcedure,
			connect.WithSchema(voucherServiceMethods.ByName("RedeemVoucher")),
			connect.WithClientOptions(opts...),
		),
		findVouchers: connect.NewClient[v1.FindVouchersRequest, v1.FindVouchersResponse](
			httpClient,
			baseURL+VoucherServiceFindVouchersProcedure,
			connect.WithSchema(voucherServiceMethods.ByName("FindVouchers")),
			connect.WithClientOptions(opts...),
		),
	}
}

// voucherServiceClient implements VoucherServiceClient.
type voucherServiceClient struct {
	createVoucher *connect.Client[v1.CreateVoucherRequest, v1.CreateVoucherResponse]
	getVoucher    *connect.Client[v1.GetVoucherRequest, v1.GetVoucherResponse]
	redeemVoucher *connect.Client[v1.RedeemVoucherRequest, v1.RedeemVoucherResponse]
	findVouchers  *connect.Client[v1.FindVouchersRequest, v1.FindVouchersResponse]
}

// CreateVoucher calls order.v1.VoucherService.CreateVoucher.
func (c *voucherServiceClient) CreateVoucher(ctx context.Context, req *connect.Request[v1.CreateVoucherRequest]) (*connect.Response[v1.CreateVoucherResponse], error) {
	return c.createVoucher.CallUnary(ctx, req)
}

// GetVoucher calls order.v1.VoucherService.GetVoucher.
func (c *voucherServiceClient) GetVoucher(ctx context.Context, req *connect.Request[v1.GetVoucherRequest]) (*connect.Response[v1.GetVoucherResponse], error) {
	return c.getVoucher.CallUnary(ctx, req)
}

// RedeemVoucher calls order.v1.VoucherService.RedeemVoucher.
func (c *voucherServiceClient) RedeemVoucher(ctx context.Context, req *connect.Request[v1.RedeemVoucherRequest]) (*connect.Response[v1.RedeemVoucherResponse], error) {
	return c.redeemVoucher.CallUnary(ctx, req)
}

// FindVouchers calls order.v1.VoucherService.FindVouchers.
func (c *voucherServiceClient) FindVouchers(ctx context.Context, req *connect.Request[v1.FindVouchersRequest]) (*connect.Response[v1.FindVouchersResponse], error) {
	return c.findVouchers.CallUnary(ctx, req)
}

// VoucherServiceHandler is an implementation of the order.v1.VoucherService service.
type VoucherServiceHandler interface {
	CreateVoucher(context.Context, *connect.Request[v1.CreateVoucherRequest]) (*connect.Response[v1.CreateVoucherResponse], error)
	GetVoucher(context.Context, *connect.Request[v1.GetVoucherRequest]) (*connect.Response[v1.GetVoucherResponse], error)
	RedeemVoucher(context.Context, *connect.Request[v1.RedeemVoucherRequest]) (*connect.Response[v1.RedeemVoucherResponse], error)
	FindVouchers(context.Context, *connect.Request[v1.FindVouchersRequest]) (*connect.Response[v1.FindVouchersResponse], error)
}

// NewVoucherServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVoucherServiceHandler(svc VoucherServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	voucherServiceMethods := v1.File_order_v1_voucher_proto.Services().ByName("VoucherService").Methods()
	voucherServiceCreateVoucherHandler := connect.NewUnaryHandler(
		VoucherServiceCreateVoucherProcedure,
		svc.CreateVoucher,
		connect.WithSchema(voucherServiceMethods.ByName("CreateVoucher")),
		connect.WithHandlerOptions(opts...),
	)
	voucherServiceGetVoucherHandler := connect.NewUnaryHandler(
		VoucherServiceGetVoucherProcedure,
		svc.GetVoucher,
		connect.WithSchema(voucherServiceMethods.ByName("GetVoucher")),
		connect.WithHandlerOptions(opts...),
	)
	voucherServiceRedeemVoucherHandler := connect.NewUnaryHandler(
		VoucherServiceRedeemVoucherProcedure,
		svc.RedeemVoucher,
		connect.WithSchema(voucherServiceMethods.ByName("RedeemVoucher")),
		connect.WithHandlerOptions(opts...),
	)
	voucherServiceFindVouchersHandler := connect.NewUnaryHandler(
		VoucherServiceFindVouchersProcedure,
		svc.FindVouchers,
		connect.WithSchema(voucherServiceMethods.ByName("FindVouchers")),
		connect.WithHandlerOptions(opts...),
	)
	return "/order.v1.VoucherService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VoucherServiceCreateVoucherProcedure:
			voucherServiceCreateVoucherHandler.ServeHTTP(w, r)
		case VoucherServiceGetVoucherProcedure:
			voucherServiceGetVoucherHandler.ServeHTTP(w, r)
		case VoucherServiceRedeemVoucherProcedure:
			voucherServiceRedeemVoucherHandler.ServeHTTP(w, r)
		case VoucherServiceFindVouchersProcedure:
			voucherServiceFindVouchersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVoucherServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVoucherServiceHandler struct{}

func (UnimplementedVoucherServiceHandler) CreateVoucher(context.Context, *connect.Request[v1.CreateVoucherRequest]) (*connect.Response[v1.CreateVoucherResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.v1.VoucherService.CreateVoucher is not implemented"))
}

func (UnimplementedVoucherServiceHandler) GetVoucher(context.Context, *connect.Request[v1.GetVoucherRequest]) (*connect.Response[v1.GetVoucherResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.v1.VoucherService.GetVoucher is not implemented"))
}

func (UnimplementedVoucherServiceHandler) RedeemVoucher(context.Context, *connect.Request[v1.RedeemVoucherRequest]) (*connect.Response[v1.RedeemVoucherResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.v1.VoucherService.RedeemVoucher is not implemented"))
}

func (UnimplementedVoucherServiceHandler) FindVouchers(context.Context, *connect.Request[v1.FindVouchersRequest]) (*connect.Response[v1.FindVouchersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.v1.VoucherService.FindVouchers is not implemented"))
}
