// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: order/v1/invoice.proto

package orderv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/karibu-cap/sabitou/protos/gen/go/rpc/order/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// InvoiceServiceName is the fully-qualified name of the InvoiceService service.
	InvoiceServiceName = "order.v1.InvoiceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InvoiceServiceGenerateInvoiceProcedure is the fully-qualified name of the InvoiceService's
	// GenerateInvoice RPC.
	InvoiceServiceGenerateInvoiceProcedure = "/order.v1.InvoiceService/GenerateInvoice"
)

// InvoiceServiceClient is a client for the order.v1.InvoiceService service.
type InvoiceServiceClient interface {
	// Generates an invoice for the order.
	GenerateInvoice(context.Context, *connect.Request[v1.GenerateInvoiceRequest]) (*connect.Response[v1.GenerateInvoiceResponse], error)
}

// NewInvoiceServiceClient constructs a client for the order.v1.InvoiceService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInvoiceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InvoiceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	invoiceServiceMethods := v1.File_order_v1_invoice_proto.Services().ByName("InvoiceService").Methods()
	return &invoiceServiceClient{
		generateInvoice: connect.NewClient[v1.GenerateInvoiceRequest, v1.GenerateInvoiceResponse](
			httpClient,
			baseURL+InvoiceServiceGenerateInvoiceProcedure,
			connect.WithSchema(invoiceServiceMethods.ByName("GenerateInvoice")),
			connect.WithClientOptions(opts...),
		),
	}
}

// invoiceServiceClient implements InvoiceServiceClient.
type invoiceServiceClient struct {
	generateInvoice *connect.Client[v1.GenerateInvoiceRequest, v1.GenerateInvoiceResponse]
}

// GenerateInvoice calls order.v1.InvoiceService.GenerateInvoice.
func (c *invoiceServiceClient) GenerateInvoice(ctx context.Context, req *connect.Request[v1.GenerateInvoiceRequest]) (*connect.Response[v1.GenerateInvoiceResponse], error) {
	return c.generateInvoice.CallUnary(ctx, req)
}

// InvoiceServiceHandler is an implementation of the order.v1.InvoiceService service.
type InvoiceServiceHandler interface {
	// Generates an invoice for the order.
	GenerateInvoice(context.Context, *connect.Request[v1.GenerateInvoiceRequest]) (*connect.Response[v1.GenerateInvoiceResponse], error)
}

// NewInvoiceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInvoiceServiceHandler(svc InvoiceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	invoiceServiceMethods := v1.File_order_v1_invoice_proto.Services().ByName("InvoiceService").Methods()
	invoiceServiceGenerateInvoiceHandler := connect.NewUnaryHandler(
		InvoiceServiceGenerateInvoiceProcedure,
		svc.GenerateInvoice,
		connect.WithSchema(invoiceServiceMethods.ByName("GenerateInvoice")),
		connect.WithHandlerOptions(opts...),
	)
	return "/order.v1.InvoiceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InvoiceServiceGenerateInvoiceProcedure:
			invoiceServiceGenerateInvoiceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInvoiceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInvoiceServiceHandler struct{}

func (UnimplementedInvoiceServiceHandler) GenerateInvoice(context.Context, *connect.Request[v1.GenerateInvoiceRequest]) (*connect.Response[v1.GenerateInvoiceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.v1.InvoiceService.GenerateInvoice is not implemented"))
}
