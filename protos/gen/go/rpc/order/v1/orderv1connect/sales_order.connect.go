// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: order/v1/sales_order.proto

package orderv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/karibu-cap/sabitou/protos/gen/go/rpc/order/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SalesOrderServiceName is the fully-qualified name of the SalesOrderService service.
	SalesOrderServiceName = "order.v1.SalesOrderService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SalesOrderServiceCreateSalesOrderProcedure is the fully-qualified name of the SalesOrderService's
	// CreateSalesOrder RPC.
	SalesOrderServiceCreateSalesOrderProcedure = "/order.v1.SalesOrderService/CreateSalesOrder"
	// SalesOrderServiceGetSalesOrderProcedure is the fully-qualified name of the SalesOrderService's
	// GetSalesOrder RPC.
	SalesOrderServiceGetSalesOrderProcedure = "/order.v1.SalesOrderService/GetSalesOrder"
	// SalesOrderServiceListSalesOrdersProcedure is the fully-qualified name of the SalesOrderService's
	// ListSalesOrders RPC.
	SalesOrderServiceListSalesOrdersProcedure = "/order.v1.SalesOrderService/ListSalesOrders"
	// SalesOrderServiceUpdateSalesOrderStatusProcedure is the fully-qualified name of the
	// SalesOrderService's UpdateSalesOrderStatus RPC.
	SalesOrderServiceUpdateSalesOrderStatusProcedure = "/order.v1.SalesOrderService/UpdateSalesOrderStatus"
	// SalesOrderServiceCancelSalesOrderProcedure is the fully-qualified name of the SalesOrderService's
	// CancelSalesOrder RPC.
	SalesOrderServiceCancelSalesOrderProcedure = "/order.v1.SalesOrderService/CancelSalesOrder"
	// SalesOrderServiceCreateDeliveryNoteProcedure is the fully-qualified name of the
	// SalesOrderService's CreateDeliveryNote RPC.
	SalesOrderServiceCreateDeliveryNoteProcedure = "/order.v1.SalesOrderService/CreateDeliveryNote"
	// SalesOrderServiceCreateInvoiceFromSalesOrderProcedure is the fully-qualified name of the
	// SalesOrderService's CreateInvoiceFromSalesOrder RPC.
	SalesOrderServiceCreateInvoiceFromSalesOrderProcedure = "/order.v1.SalesOrderService/CreateInvoiceFromSalesOrder"
)

// SalesOrderServiceClient is a client for the order.v1.SalesOrderService service.
type SalesOrderServiceClient interface {
	// Create a sales order (customer order)
	CreateSalesOrder(context.Context, *connect.Request[v1.CreateSalesOrderRequest]) (*connect.Response[v1.CreateSalesOrderResponse], error)
	// Get sales order details
	GetSalesOrder(context.Context, *connect.Request[v1.GetSalesOrderRequest]) (*connect.Response[v1.GetSalesOrderResponse], error)
	// List sales orders with filtering
	ListSalesOrders(context.Context, *connect.Request[v1.ListSalesOrdersRequest]) (*connect.Response[v1.ListSalesOrdersResponse], error)
	// Update sales order status
	UpdateSalesOrderStatus(context.Context, *connect.Request[v1.UpdateSalesOrderStatusRequest]) (*connect.Response[v1.UpdateSalesOrderStatusResponse], error)
	// Cancel a sales order
	CancelSalesOrder(context.Context, *connect.Request[v1.CancelSalesOrderRequest]) (*connect.Response[v1.CancelSalesOrderResponse], error)
	// Create delivery note from sales order
	CreateDeliveryNote(context.Context, *connect.Request[v1.CreateDeliveryNoteRequest]) (*connect.Response[v1.CreateDeliveryNoteResponse], error)
	// Create invoice from sales order
	CreateInvoiceFromSalesOrder(context.Context, *connect.Request[v1.CreateInvoiceFromSalesOrderRequest]) (*connect.Response[v1.CreateInvoiceFromSalesOrderResponse], error)
}

// NewSalesOrderServiceClient constructs a client for the order.v1.SalesOrderService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSalesOrderServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SalesOrderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	salesOrderServiceMethods := v1.File_order_v1_sales_order_proto.Services().ByName("SalesOrderService").Methods()
	return &salesOrderServiceClient{
		createSalesOrder: connect.NewClient[v1.CreateSalesOrderRequest, v1.CreateSalesOrderResponse](
			httpClient,
			baseURL+SalesOrderServiceCreateSalesOrderProcedure,
			connect.WithSchema(salesOrderServiceMethods.ByName("CreateSalesOrder")),
			connect.WithClientOptions(opts...),
		),
		getSalesOrder: connect.NewClient[v1.GetSalesOrderRequest, v1.GetSalesOrderResponse](
			httpClient,
			baseURL+SalesOrderServiceGetSalesOrderProcedure,
			connect.WithSchema(salesOrderServiceMethods.ByName("GetSalesOrder")),
			connect.WithClientOptions(opts...),
		),
		listSalesOrders: connect.NewClient[v1.ListSalesOrdersRequest, v1.ListSalesOrdersResponse](
			httpClient,
			baseURL+SalesOrderServiceListSalesOrdersProcedure,
			connect.WithSchema(salesOrderServiceMethods.ByName("ListSalesOrders")),
			connect.WithClientOptions(opts...),
		),
		updateSalesOrderStatus: connect.NewClient[v1.UpdateSalesOrderStatusRequest, v1.UpdateSalesOrderStatusResponse](
			httpClient,
			baseURL+SalesOrderServiceUpdateSalesOrderStatusProcedure,
			connect.WithSchema(salesOrderServiceMethods.ByName("UpdateSalesOrderStatus")),
			connect.WithClientOptions(opts...),
		),
		cancelSalesOrder: connect.NewClient[v1.CancelSalesOrderRequest, v1.CancelSalesOrderResponse](
			httpClient,
			baseURL+SalesOrderServiceCancelSalesOrderProcedure,
			connect.WithSchema(salesOrderServiceMethods.ByName("CancelSalesOrder")),
			connect.WithClientOptions(opts...),
		),
		createDeliveryNote: connect.NewClient[v1.CreateDeliveryNoteRequest, v1.CreateDeliveryNoteResponse](
			httpClient,
			baseURL+SalesOrderServiceCreateDeliveryNoteProcedure,
			connect.WithSchema(salesOrderServiceMethods.ByName("CreateDeliveryNote")),
			connect.WithClientOptions(opts...),
		),
		createInvoiceFromSalesOrder: connect.NewClient[v1.CreateInvoiceFromSalesOrderRequest, v1.CreateInvoiceFromSalesOrderResponse](
			httpClient,
			baseURL+SalesOrderServiceCreateInvoiceFromSalesOrderProcedure,
			connect.WithSchema(salesOrderServiceMethods.ByName("CreateInvoiceFromSalesOrder")),
			connect.WithClientOptions(opts...),
		),
	}
}

// salesOrderServiceClient implements SalesOrderServiceClient.
type salesOrderServiceClient struct {
	createSalesOrder            *connect.Client[v1.CreateSalesOrderRequest, v1.CreateSalesOrderResponse]
	getSalesOrder               *connect.Client[v1.GetSalesOrderRequest, v1.GetSalesOrderResponse]
	listSalesOrders             *connect.Client[v1.ListSalesOrdersRequest, v1.ListSalesOrdersResponse]
	updateSalesOrderStatus      *connect.Client[v1.UpdateSalesOrderStatusRequest, v1.UpdateSalesOrderStatusResponse]
	cancelSalesOrder            *connect.Client[v1.CancelSalesOrderRequest, v1.CancelSalesOrderResponse]
	createDeliveryNote          *connect.Client[v1.CreateDeliveryNoteRequest, v1.CreateDeliveryNoteResponse]
	createInvoiceFromSalesOrder *connect.Client[v1.CreateInvoiceFromSalesOrderRequest, v1.CreateInvoiceFromSalesOrderResponse]
}

// CreateSalesOrder calls order.v1.SalesOrderService.CreateSalesOrder.
func (c *salesOrderServiceClient) CreateSalesOrder(ctx context.Context, req *connect.Request[v1.CreateSalesOrderRequest]) (*connect.Response[v1.CreateSalesOrderResponse], error) {
	return c.createSalesOrder.CallUnary(ctx, req)
}

// GetSalesOrder calls order.v1.SalesOrderService.GetSalesOrder.
func (c *salesOrderServiceClient) GetSalesOrder(ctx context.Context, req *connect.Request[v1.GetSalesOrderRequest]) (*connect.Response[v1.GetSalesOrderResponse], error) {
	return c.getSalesOrder.CallUnary(ctx, req)
}

// ListSalesOrders calls order.v1.SalesOrderService.ListSalesOrders.
func (c *salesOrderServiceClient) ListSalesOrders(ctx context.Context, req *connect.Request[v1.ListSalesOrdersRequest]) (*connect.Response[v1.ListSalesOrdersResponse], error) {
	return c.listSalesOrders.CallUnary(ctx, req)
}

// UpdateSalesOrderStatus calls order.v1.SalesOrderService.UpdateSalesOrderStatus.
func (c *salesOrderServiceClient) UpdateSalesOrderStatus(ctx context.Context, req *connect.Request[v1.UpdateSalesOrderStatusRequest]) (*connect.Response[v1.UpdateSalesOrderStatusResponse], error) {
	return c.updateSalesOrderStatus.CallUnary(ctx, req)
}

// CancelSalesOrder calls order.v1.SalesOrderService.CancelSalesOrder.
func (c *salesOrderServiceClient) CancelSalesOrder(ctx context.Context, req *connect.Request[v1.CancelSalesOrderRequest]) (*connect.Response[v1.CancelSalesOrderResponse], error) {
	return c.cancelSalesOrder.CallUnary(ctx, req)
}

// CreateDeliveryNote calls order.v1.SalesOrderService.CreateDeliveryNote.
func (c *salesOrderServiceClient) CreateDeliveryNote(ctx context.Context, req *connect.Request[v1.CreateDeliveryNoteRequest]) (*connect.Response[v1.CreateDeliveryNoteResponse], error) {
	return c.createDeliveryNote.CallUnary(ctx, req)
}

// CreateInvoiceFromSalesOrder calls order.v1.SalesOrderService.CreateInvoiceFromSalesOrder.
func (c *salesOrderServiceClient) CreateInvoiceFromSalesOrder(ctx context.Context, req *connect.Request[v1.CreateInvoiceFromSalesOrderRequest]) (*connect.Response[v1.CreateInvoiceFromSalesOrderResponse], error) {
	return c.createInvoiceFromSalesOrder.CallUnary(ctx, req)
}

// SalesOrderServiceHandler is an implementation of the order.v1.SalesOrderService service.
type SalesOrderServiceHandler interface {
	// Create a sales order (customer order)
	CreateSalesOrder(context.Context, *connect.Request[v1.CreateSalesOrderRequest]) (*connect.Response[v1.CreateSalesOrderResponse], error)
	// Get sales order details
	GetSalesOrder(context.Context, *connect.Request[v1.GetSalesOrderRequest]) (*connect.Response[v1.GetSalesOrderResponse], error)
	// List sales orders with filtering
	ListSalesOrders(context.Context, *connect.Request[v1.ListSalesOrdersRequest]) (*connect.Response[v1.ListSalesOrdersResponse], error)
	// Update sales order status
	UpdateSalesOrderStatus(context.Context, *connect.Request[v1.UpdateSalesOrderStatusRequest]) (*connect.Response[v1.UpdateSalesOrderStatusResponse], error)
	// Cancel a sales order
	CancelSalesOrder(context.Context, *connect.Request[v1.CancelSalesOrderRequest]) (*connect.Response[v1.CancelSalesOrderResponse], error)
	// Create delivery note from sales order
	CreateDeliveryNote(context.Context, *connect.Request[v1.CreateDeliveryNoteRequest]) (*connect.Response[v1.CreateDeliveryNoteResponse], error)
	// Create invoice from sales order
	CreateInvoiceFromSalesOrder(context.Context, *connect.Request[v1.CreateInvoiceFromSalesOrderRequest]) (*connect.Response[v1.CreateInvoiceFromSalesOrderResponse], error)
}

// NewSalesOrderServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSalesOrderServiceHandler(svc SalesOrderServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	salesOrderServiceMethods := v1.File_order_v1_sales_order_proto.Services().ByName("SalesOrderService").Methods()
	salesOrderServiceCreateSalesOrderHandler := connect.NewUnaryHandler(
		SalesOrderServiceCreateSalesOrderProcedure,
		svc.CreateSalesOrder,
		connect.WithSchema(salesOrderServiceMethods.ByName("CreateSalesOrder")),
		connect.WithHandlerOptions(opts...),
	)
	salesOrderServiceGetSalesOrderHandler := connect.NewUnaryHandler(
		SalesOrderServiceGetSalesOrderProcedure,
		svc.GetSalesOrder,
		connect.WithSchema(salesOrderServiceMethods.ByName("GetSalesOrder")),
		connect.WithHandlerOptions(opts...),
	)
	salesOrderServiceListSalesOrdersHandler := connect.NewUnaryHandler(
		SalesOrderServiceListSalesOrdersProcedure,
		svc.ListSalesOrders,
		connect.WithSchema(salesOrderServiceMethods.ByName("ListSalesOrders")),
		connect.WithHandlerOptions(opts...),
	)
	salesOrderServiceUpdateSalesOrderStatusHandler := connect.NewUnaryHandler(
		SalesOrderServiceUpdateSalesOrderStatusProcedure,
		svc.UpdateSalesOrderStatus,
		connect.WithSchema(salesOrderServiceMethods.ByName("UpdateSalesOrderStatus")),
		connect.WithHandlerOptions(opts...),
	)
	salesOrderServiceCancelSalesOrderHandler := connect.NewUnaryHandler(
		SalesOrderServiceCancelSalesOrderProcedure,
		svc.CancelSalesOrder,
		connect.WithSchema(salesOrderServiceMethods.ByName("CancelSalesOrder")),
		connect.WithHandlerOptions(opts...),
	)
	salesOrderServiceCreateDeliveryNoteHandler := connect.NewUnaryHandler(
		SalesOrderServiceCreateDeliveryNoteProcedure,
		svc.CreateDeliveryNote,
		connect.WithSchema(salesOrderServiceMethods.ByName("CreateDeliveryNote")),
		connect.WithHandlerOptions(opts...),
	)
	salesOrderServiceCreateInvoiceFromSalesOrderHandler := connect.NewUnaryHandler(
		SalesOrderServiceCreateInvoiceFromSalesOrderProcedure,
		svc.CreateInvoiceFromSalesOrder,
		connect.WithSchema(salesOrderServiceMethods.ByName("CreateInvoiceFromSalesOrder")),
		connect.WithHandlerOptions(opts...),
	)
	return "/order.v1.SalesOrderService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SalesOrderServiceCreateSalesOrderProcedure:
			salesOrderServiceCreateSalesOrderHandler.ServeHTTP(w, r)
		case SalesOrderServiceGetSalesOrderProcedure:
			salesOrderServiceGetSalesOrderHandler.ServeHTTP(w, r)
		case SalesOrderServiceListSalesOrdersProcedure:
			salesOrderServiceListSalesOrdersHandler.ServeHTTP(w, r)
		case SalesOrderServiceUpdateSalesOrderStatusProcedure:
			salesOrderServiceUpdateSalesOrderStatusHandler.ServeHTTP(w, r)
		case SalesOrderServiceCancelSalesOrderProcedure:
			salesOrderServiceCancelSalesOrderHandler.ServeHTTP(w, r)
		case SalesOrderServiceCreateDeliveryNoteProcedure:
			salesOrderServiceCreateDeliveryNoteHandler.ServeHTTP(w, r)
		case SalesOrderServiceCreateInvoiceFromSalesOrderProcedure:
			salesOrderServiceCreateInvoiceFromSalesOrderHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSalesOrderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSalesOrderServiceHandler struct{}

func (UnimplementedSalesOrderServiceHandler) CreateSalesOrder(context.Context, *connect.Request[v1.CreateSalesOrderRequest]) (*connect.Response[v1.CreateSalesOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.v1.SalesOrderService.CreateSalesOrder is not implemented"))
}

func (UnimplementedSalesOrderServiceHandler) GetSalesOrder(context.Context, *connect.Request[v1.GetSalesOrderRequest]) (*connect.Response[v1.GetSalesOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.v1.SalesOrderService.GetSalesOrder is not implemented"))
}

func (UnimplementedSalesOrderServiceHandler) ListSalesOrders(context.Context, *connect.Request[v1.ListSalesOrdersRequest]) (*connect.Response[v1.ListSalesOrdersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.v1.SalesOrderService.ListSalesOrders is not implemented"))
}

func (UnimplementedSalesOrderServiceHandler) UpdateSalesOrderStatus(context.Context, *connect.Request[v1.UpdateSalesOrderStatusRequest]) (*connect.Response[v1.UpdateSalesOrderStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.v1.SalesOrderService.UpdateSalesOrderStatus is not implemented"))
}

func (UnimplementedSalesOrderServiceHandler) CancelSalesOrder(context.Context, *connect.Request[v1.CancelSalesOrderRequest]) (*connect.Response[v1.CancelSalesOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.v1.SalesOrderService.CancelSalesOrder is not implemented"))
}

func (UnimplementedSalesOrderServiceHandler) CreateDeliveryNote(context.Context, *connect.Request[v1.CreateDeliveryNoteRequest]) (*connect.Response[v1.CreateDeliveryNoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.v1.SalesOrderService.CreateDeliveryNote is not implemented"))
}

func (UnimplementedSalesOrderServiceHandler) CreateInvoiceFromSalesOrder(context.Context, *connect.Request[v1.CreateInvoiceFromSalesOrderRequest]) (*connect.Response[v1.CreateInvoiceFromSalesOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.v1.SalesOrderService.CreateInvoiceFromSalesOrder is not implemented"))
}
