// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: reports/v1/reports.proto

package reportsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/karibu-cap/sabitou/protos/gen/go/rpc/reports/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ReportingServiceName is the fully-qualified name of the ReportingService service.
	ReportingServiceName = "reports.v1.ReportingService"
	// DashboardReportingServiceName is the fully-qualified name of the DashboardReportingService
	// service.
	DashboardReportingServiceName = "reports.v1.DashboardReportingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ReportingServiceGetSalesReportProcedure is the fully-qualified name of the ReportingService's
	// GetSalesReport RPC.
	ReportingServiceGetSalesReportProcedure = "/reports.v1.ReportingService/GetSalesReport"
	// ReportingServiceGetPurchaseReportProcedure is the fully-qualified name of the ReportingService's
	// GetPurchaseReport RPC.
	ReportingServiceGetPurchaseReportProcedure = "/reports.v1.ReportingService/GetPurchaseReport"
	// ReportingServiceGetInventoryMovementReportProcedure is the fully-qualified name of the
	// ReportingService's GetInventoryMovementReport RPC.
	ReportingServiceGetInventoryMovementReportProcedure = "/reports.v1.ReportingService/GetInventoryMovementReport"
	// ReportingServiceGetBestSellingProductsProcedure is the fully-qualified name of the
	// ReportingService's GetBestSellingProducts RPC.
	ReportingServiceGetBestSellingProductsProcedure = "/reports.v1.ReportingService/GetBestSellingProducts"
	// ReportingServiceGetStorePurchaseHistoryProcedure is the fully-qualified name of the
	// ReportingService's GetStorePurchaseHistory RPC.
	ReportingServiceGetStorePurchaseHistoryProcedure = "/reports.v1.ReportingService/GetStorePurchaseHistory"
	// ReportingServiceGetSupplierPerformanceReportProcedure is the fully-qualified name of the
	// ReportingService's GetSupplierPerformanceReport RPC.
	ReportingServiceGetSupplierPerformanceReportProcedure = "/reports.v1.ReportingService/GetSupplierPerformanceReport"
	// ReportingServiceGetProfitLossReportProcedure is the fully-qualified name of the
	// ReportingService's GetProfitLossReport RPC.
	ReportingServiceGetProfitLossReportProcedure = "/reports.v1.ReportingService/GetProfitLossReport"
	// ReportingServiceGetStockAgingReportProcedure is the fully-qualified name of the
	// ReportingService's GetStockAgingReport RPC.
	ReportingServiceGetStockAgingReportProcedure = "/reports.v1.ReportingService/GetStockAgingReport"
	// ReportingServiceGetInventoryReportProcedure is the fully-qualified name of the ReportingService's
	// GetInventoryReport RPC.
	ReportingServiceGetInventoryReportProcedure = "/reports.v1.ReportingService/GetInventoryReport"
	// ReportingServiceGetSalesReportFullProcedure is the fully-qualified name of the ReportingService's
	// GetSalesReportFull RPC.
	ReportingServiceGetSalesReportFullProcedure = "/reports.v1.ReportingService/GetSalesReportFull"
	// ReportingServiceGetFinancialReportProcedure is the fully-qualified name of the ReportingService's
	// GetFinancialReport RPC.
	ReportingServiceGetFinancialReportProcedure = "/reports.v1.ReportingService/GetFinancialReport"
	// DashboardReportingServiceGetDashboardReportProcedure is the fully-qualified name of the
	// DashboardReportingService's GetDashboardReport RPC.
	DashboardReportingServiceGetDashboardReportProcedure = "/reports.v1.DashboardReportingService/GetDashboardReport"
)

// ReportingServiceClient is a client for the reports.v1.ReportingService service.
type ReportingServiceClient interface {
	// Sales report by period
	GetSalesReport(context.Context, *connect.Request[v1.GetSalesReportRequest]) (*connect.Response[v1.GetSalesReportResponse], error)
	// Purchase report by period
	GetPurchaseReport(context.Context, *connect.Request[v1.GetPurchaseReportRequest]) (*connect.Response[v1.GetPurchaseReportResponse], error)
	// Inventory movement report
	GetInventoryMovementReport(context.Context, *connect.Request[v1.GetInventoryMovementReportRequest]) (*connect.Response[v1.GetInventoryMovementReportResponse], error)
	// Best selling products
	GetBestSellingProducts(context.Context, *connect.Request[v1.GetBestSellingProductsRequest]) (*connect.Response[v1.GetBestSellingProductsResponse], error)
	// Store purchase history
	GetStorePurchaseHistory(context.Context, *connect.Request[v1.GetStorePurchaseHistoryRequest]) (*connect.Response[v1.GetStorePurchaseHistoryResponse], error)
	// Supplier performance report
	GetSupplierPerformanceReport(context.Context, *connect.Request[v1.GetSupplierPerformanceReportRequest]) (*connect.Response[v1.GetSupplierPerformanceReportResponse], error)
	// Profit & Loss report
	GetProfitLossReport(context.Context, *connect.Request[v1.GetProfitLossReportRequest]) (*connect.Response[v1.GetProfitLossReportResponse], error)
	// Stock aging report
	GetStockAgingReport(context.Context, *connect.Request[v1.GetStockAgingReportRequest]) (*connect.Response[v1.GetStockAgingReportResponse], error)
	// Comprehensive inventory report with aggregates
	GetInventoryReport(context.Context, *connect.Request[v1.GetInventoryReportRequest]) (*connect.Response[v1.GetInventoryReportResponse], error)
	// Full sales report including best sellers
	GetSalesReportFull(context.Context, *connect.Request[v1.GetSalesReportRequest]) (*connect.Response[v1.GetSalesReportFullResponse], error)
	// Comprehensive financial report with purchases and balances
	GetFinancialReport(context.Context, *connect.Request[v1.GetFinancialReportRequest]) (*connect.Response[v1.GetFinancialReportResponse], error)
}

// NewReportingServiceClient constructs a client for the reports.v1.ReportingService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReportingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ReportingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	reportingServiceMethods := v1.File_reports_v1_reports_proto.Services().ByName("ReportingService").Methods()
	return &reportingServiceClient{
		getSalesReport: connect.NewClient[v1.GetSalesReportRequest, v1.GetSalesReportResponse](
			httpClient,
			baseURL+ReportingServiceGetSalesReportProcedure,
			connect.WithSchema(reportingServiceMethods.ByName("GetSalesReport")),
			connect.WithClientOptions(opts...),
		),
		getPurchaseReport: connect.NewClient[v1.GetPurchaseReportRequest, v1.GetPurchaseReportResponse](
			httpClient,
			baseURL+ReportingServiceGetPurchaseReportProcedure,
			connect.WithSchema(reportingServiceMethods.ByName("GetPurchaseReport")),
			connect.WithClientOptions(opts...),
		),
		getInventoryMovementReport: connect.NewClient[v1.GetInventoryMovementReportRequest, v1.GetInventoryMovementReportResponse](
			httpClient,
			baseURL+ReportingServiceGetInventoryMovementReportProcedure,
			connect.WithSchema(reportingServiceMethods.ByName("GetInventoryMovementReport")),
			connect.WithClientOptions(opts...),
		),
		getBestSellingProducts: connect.NewClient[v1.GetBestSellingProductsRequest, v1.GetBestSellingProductsResponse](
			httpClient,
			baseURL+ReportingServiceGetBestSellingProductsProcedure,
			connect.WithSchema(reportingServiceMethods.ByName("GetBestSellingProducts")),
			connect.WithClientOptions(opts...),
		),
		getStorePurchaseHistory: connect.NewClient[v1.GetStorePurchaseHistoryRequest, v1.GetStorePurchaseHistoryResponse](
			httpClient,
			baseURL+ReportingServiceGetStorePurchaseHistoryProcedure,
			connect.WithSchema(reportingServiceMethods.ByName("GetStorePurchaseHistory")),
			connect.WithClientOptions(opts...),
		),
		getSupplierPerformanceReport: connect.NewClient[v1.GetSupplierPerformanceReportRequest, v1.GetSupplierPerformanceReportResponse](
			httpClient,
			baseURL+ReportingServiceGetSupplierPerformanceReportProcedure,
			connect.WithSchema(reportingServiceMethods.ByName("GetSupplierPerformanceReport")),
			connect.WithClientOptions(opts...),
		),
		getProfitLossReport: connect.NewClient[v1.GetProfitLossReportRequest, v1.GetProfitLossReportResponse](
			httpClient,
			baseURL+ReportingServiceGetProfitLossReportProcedure,
			connect.WithSchema(reportingServiceMethods.ByName("GetProfitLossReport")),
			connect.WithClientOptions(opts...),
		),
		getStockAgingReport: connect.NewClient[v1.GetStockAgingReportRequest, v1.GetStockAgingReportResponse](
			httpClient,
			baseURL+ReportingServiceGetStockAgingReportProcedure,
			connect.WithSchema(reportingServiceMethods.ByName("GetStockAgingReport")),
			connect.WithClientOptions(opts...),
		),
		getInventoryReport: connect.NewClient[v1.GetInventoryReportRequest, v1.GetInventoryReportResponse](
			httpClient,
			baseURL+ReportingServiceGetInventoryReportProcedure,
			connect.WithSchema(reportingServiceMethods.ByName("GetInventoryReport")),
			connect.WithClientOptions(opts...),
		),
		getSalesReportFull: connect.NewClient[v1.GetSalesReportRequest, v1.GetSalesReportFullResponse](
			httpClient,
			baseURL+ReportingServiceGetSalesReportFullProcedure,
			connect.WithSchema(reportingServiceMethods.ByName("GetSalesReportFull")),
			connect.WithClientOptions(opts...),
		),
		getFinancialReport: connect.NewClient[v1.GetFinancialReportRequest, v1.GetFinancialReportResponse](
			httpClient,
			baseURL+ReportingServiceGetFinancialReportProcedure,
			connect.WithSchema(reportingServiceMethods.ByName("GetFinancialReport")),
			connect.WithClientOptions(opts...),
		),
	}
}

// reportingServiceClient implements ReportingServiceClient.
type reportingServiceClient struct {
	getSalesReport               *connect.Client[v1.GetSalesReportRequest, v1.GetSalesReportResponse]
	getPurchaseReport            *connect.Client[v1.GetPurchaseReportRequest, v1.GetPurchaseReportResponse]
	getInventoryMovementReport   *connect.Client[v1.GetInventoryMovementReportRequest, v1.GetInventoryMovementReportResponse]
	getBestSellingProducts       *connect.Client[v1.GetBestSellingProductsRequest, v1.GetBestSellingProductsResponse]
	getStorePurchaseHistory      *connect.Client[v1.GetStorePurchaseHistoryRequest, v1.GetStorePurchaseHistoryResponse]
	getSupplierPerformanceReport *connect.Client[v1.GetSupplierPerformanceReportRequest, v1.GetSupplierPerformanceReportResponse]
	getProfitLossReport          *connect.Client[v1.GetProfitLossReportRequest, v1.GetProfitLossReportResponse]
	getStockAgingReport          *connect.Client[v1.GetStockAgingReportRequest, v1.GetStockAgingReportResponse]
	getInventoryReport           *connect.Client[v1.GetInventoryReportRequest, v1.GetInventoryReportResponse]
	getSalesReportFull           *connect.Client[v1.GetSalesReportRequest, v1.GetSalesReportFullResponse]
	getFinancialReport           *connect.Client[v1.GetFinancialReportRequest, v1.GetFinancialReportResponse]
}

// GetSalesReport calls reports.v1.ReportingService.GetSalesReport.
func (c *reportingServiceClient) GetSalesReport(ctx context.Context, req *connect.Request[v1.GetSalesReportRequest]) (*connect.Response[v1.GetSalesReportResponse], error) {
	return c.getSalesReport.CallUnary(ctx, req)
}

// GetPurchaseReport calls reports.v1.ReportingService.GetPurchaseReport.
func (c *reportingServiceClient) GetPurchaseReport(ctx context.Context, req *connect.Request[v1.GetPurchaseReportRequest]) (*connect.Response[v1.GetPurchaseReportResponse], error) {
	return c.getPurchaseReport.CallUnary(ctx, req)
}

// GetInventoryMovementReport calls reports.v1.ReportingService.GetInventoryMovementReport.
func (c *reportingServiceClient) GetInventoryMovementReport(ctx context.Context, req *connect.Request[v1.GetInventoryMovementReportRequest]) (*connect.Response[v1.GetInventoryMovementReportResponse], error) {
	return c.getInventoryMovementReport.CallUnary(ctx, req)
}

// GetBestSellingProducts calls reports.v1.ReportingService.GetBestSellingProducts.
func (c *reportingServiceClient) GetBestSellingProducts(ctx context.Context, req *connect.Request[v1.GetBestSellingProductsRequest]) (*connect.Response[v1.GetBestSellingProductsResponse], error) {
	return c.getBestSellingProducts.CallUnary(ctx, req)
}

// GetStorePurchaseHistory calls reports.v1.ReportingService.GetStorePurchaseHistory.
func (c *reportingServiceClient) GetStorePurchaseHistory(ctx context.Context, req *connect.Request[v1.GetStorePurchaseHistoryRequest]) (*connect.Response[v1.GetStorePurchaseHistoryResponse], error) {
	return c.getStorePurchaseHistory.CallUnary(ctx, req)
}

// GetSupplierPerformanceReport calls reports.v1.ReportingService.GetSupplierPerformanceReport.
func (c *reportingServiceClient) GetSupplierPerformanceReport(ctx context.Context, req *connect.Request[v1.GetSupplierPerformanceReportRequest]) (*connect.Response[v1.GetSupplierPerformanceReportResponse], error) {
	return c.getSupplierPerformanceReport.CallUnary(ctx, req)
}

// GetProfitLossReport calls reports.v1.ReportingService.GetProfitLossReport.
func (c *reportingServiceClient) GetProfitLossReport(ctx context.Context, req *connect.Request[v1.GetProfitLossReportRequest]) (*connect.Response[v1.GetProfitLossReportResponse], error) {
	return c.getProfitLossReport.CallUnary(ctx, req)
}

// GetStockAgingReport calls reports.v1.ReportingService.GetStockAgingReport.
func (c *reportingServiceClient) GetStockAgingReport(ctx context.Context, req *connect.Request[v1.GetStockAgingReportRequest]) (*connect.Response[v1.GetStockAgingReportResponse], error) {
	return c.getStockAgingReport.CallUnary(ctx, req)
}

// GetInventoryReport calls reports.v1.ReportingService.GetInventoryReport.
func (c *reportingServiceClient) GetInventoryReport(ctx context.Context, req *connect.Request[v1.GetInventoryReportRequest]) (*connect.Response[v1.GetInventoryReportResponse], error) {
	return c.getInventoryReport.CallUnary(ctx, req)
}

// GetSalesReportFull calls reports.v1.ReportingService.GetSalesReportFull.
func (c *reportingServiceClient) GetSalesReportFull(ctx context.Context, req *connect.Request[v1.GetSalesReportRequest]) (*connect.Response[v1.GetSalesReportFullResponse], error) {
	return c.getSalesReportFull.CallUnary(ctx, req)
}

// GetFinancialReport calls reports.v1.ReportingService.GetFinancialReport.
func (c *reportingServiceClient) GetFinancialReport(ctx context.Context, req *connect.Request[v1.GetFinancialReportRequest]) (*connect.Response[v1.GetFinancialReportResponse], error) {
	return c.getFinancialReport.CallUnary(ctx, req)
}

// ReportingServiceHandler is an implementation of the reports.v1.ReportingService service.
type ReportingServiceHandler interface {
	// Sales report by period
	GetSalesReport(context.Context, *connect.Request[v1.GetSalesReportRequest]) (*connect.Response[v1.GetSalesReportResponse], error)
	// Purchase report by period
	GetPurchaseReport(context.Context, *connect.Request[v1.GetPurchaseReportRequest]) (*connect.Response[v1.GetPurchaseReportResponse], error)
	// Inventory movement report
	GetInventoryMovementReport(context.Context, *connect.Request[v1.GetInventoryMovementReportRequest]) (*connect.Response[v1.GetInventoryMovementReportResponse], error)
	// Best selling products
	GetBestSellingProducts(context.Context, *connect.Request[v1.GetBestSellingProductsRequest]) (*connect.Response[v1.GetBestSellingProductsResponse], error)
	// Store purchase history
	GetStorePurchaseHistory(context.Context, *connect.Request[v1.GetStorePurchaseHistoryRequest]) (*connect.Response[v1.GetStorePurchaseHistoryResponse], error)
	// Supplier performance report
	GetSupplierPerformanceReport(context.Context, *connect.Request[v1.GetSupplierPerformanceReportRequest]) (*connect.Response[v1.GetSupplierPerformanceReportResponse], error)
	// Profit & Loss report
	GetProfitLossReport(context.Context, *connect.Request[v1.GetProfitLossReportRequest]) (*connect.Response[v1.GetProfitLossReportResponse], error)
	// Stock aging report
	GetStockAgingReport(context.Context, *connect.Request[v1.GetStockAgingReportRequest]) (*connect.Response[v1.GetStockAgingReportResponse], error)
	// Comprehensive inventory report with aggregates
	GetInventoryReport(context.Context, *connect.Request[v1.GetInventoryReportRequest]) (*connect.Response[v1.GetInventoryReportResponse], error)
	// Full sales report including best sellers
	GetSalesReportFull(context.Context, *connect.Request[v1.GetSalesReportRequest]) (*connect.Response[v1.GetSalesReportFullResponse], error)
	// Comprehensive financial report with purchases and balances
	GetFinancialReport(context.Context, *connect.Request[v1.GetFinancialReportRequest]) (*connect.Response[v1.GetFinancialReportResponse], error)
}

// NewReportingServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReportingServiceHandler(svc ReportingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	reportingServiceMethods := v1.File_reports_v1_reports_proto.Services().ByName("ReportingService").Methods()
	reportingServiceGetSalesReportHandler := connect.NewUnaryHandler(
		ReportingServiceGetSalesReportProcedure,
		svc.GetSalesReport,
		connect.WithSchema(reportingServiceMethods.ByName("GetSalesReport")),
		connect.WithHandlerOptions(opts...),
	)
	reportingServiceGetPurchaseReportHandler := connect.NewUnaryHandler(
		ReportingServiceGetPurchaseReportProcedure,
		svc.GetPurchaseReport,
		connect.WithSchema(reportingServiceMethods.ByName("GetPurchaseReport")),
		connect.WithHandlerOptions(opts...),
	)
	reportingServiceGetInventoryMovementReportHandler := connect.NewUnaryHandler(
		ReportingServiceGetInventoryMovementReportProcedure,
		svc.GetInventoryMovementReport,
		connect.WithSchema(reportingServiceMethods.ByName("GetInventoryMovementReport")),
		connect.WithHandlerOptions(opts...),
	)
	reportingServiceGetBestSellingProductsHandler := connect.NewUnaryHandler(
		ReportingServiceGetBestSellingProductsProcedure,
		svc.GetBestSellingProducts,
		connect.WithSchema(reportingServiceMethods.ByName("GetBestSellingProducts")),
		connect.WithHandlerOptions(opts...),
	)
	reportingServiceGetStorePurchaseHistoryHandler := connect.NewUnaryHandler(
		ReportingServiceGetStorePurchaseHistoryProcedure,
		svc.GetStorePurchaseHistory,
		connect.WithSchema(reportingServiceMethods.ByName("GetStorePurchaseHistory")),
		connect.WithHandlerOptions(opts...),
	)
	reportingServiceGetSupplierPerformanceReportHandler := connect.NewUnaryHandler(
		ReportingServiceGetSupplierPerformanceReportProcedure,
		svc.GetSupplierPerformanceReport,
		connect.WithSchema(reportingServiceMethods.ByName("GetSupplierPerformanceReport")),
		connect.WithHandlerOptions(opts...),
	)
	reportingServiceGetProfitLossReportHandler := connect.NewUnaryHandler(
		ReportingServiceGetProfitLossReportProcedure,
		svc.GetProfitLossReport,
		connect.WithSchema(reportingServiceMethods.ByName("GetProfitLossReport")),
		connect.WithHandlerOptions(opts...),
	)
	reportingServiceGetStockAgingReportHandler := connect.NewUnaryHandler(
		ReportingServiceGetStockAgingReportProcedure,
		svc.GetStockAgingReport,
		connect.WithSchema(reportingServiceMethods.ByName("GetStockAgingReport")),
		connect.WithHandlerOptions(opts...),
	)
	reportingServiceGetInventoryReportHandler := connect.NewUnaryHandler(
		ReportingServiceGetInventoryReportProcedure,
		svc.GetInventoryReport,
		connect.WithSchema(reportingServiceMethods.ByName("GetInventoryReport")),
		connect.WithHandlerOptions(opts...),
	)
	reportingServiceGetSalesReportFullHandler := connect.NewUnaryHandler(
		ReportingServiceGetSalesReportFullProcedure,
		svc.GetSalesReportFull,
		connect.WithSchema(reportingServiceMethods.ByName("GetSalesReportFull")),
		connect.WithHandlerOptions(opts...),
	)
	reportingServiceGetFinancialReportHandler := connect.NewUnaryHandler(
		ReportingServiceGetFinancialReportProcedure,
		svc.GetFinancialReport,
		connect.WithSchema(reportingServiceMethods.ByName("GetFinancialReport")),
		connect.WithHandlerOptions(opts...),
	)
	return "/reports.v1.ReportingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ReportingServiceGetSalesReportProcedure:
			reportingServiceGetSalesReportHandler.ServeHTTP(w, r)
		case ReportingServiceGetPurchaseReportProcedure:
			reportingServiceGetPurchaseReportHandler.ServeHTTP(w, r)
		case ReportingServiceGetInventoryMovementReportProcedure:
			reportingServiceGetInventoryMovementReportHandler.ServeHTTP(w, r)
		case ReportingServiceGetBestSellingProductsProcedure:
			reportingServiceGetBestSellingProductsHandler.ServeHTTP(w, r)
		case ReportingServiceGetStorePurchaseHistoryProcedure:
			reportingServiceGetStorePurchaseHistoryHandler.ServeHTTP(w, r)
		case ReportingServiceGetSupplierPerformanceReportProcedure:
			reportingServiceGetSupplierPerformanceReportHandler.ServeHTTP(w, r)
		case ReportingServiceGetProfitLossReportProcedure:
			reportingServiceGetProfitLossReportHandler.ServeHTTP(w, r)
		case ReportingServiceGetStockAgingReportProcedure:
			reportingServiceGetStockAgingReportHandler.ServeHTTP(w, r)
		case ReportingServiceGetInventoryReportProcedure:
			reportingServiceGetInventoryReportHandler.ServeHTTP(w, r)
		case ReportingServiceGetSalesReportFullProcedure:
			reportingServiceGetSalesReportFullHandler.ServeHTTP(w, r)
		case ReportingServiceGetFinancialReportProcedure:
			reportingServiceGetFinancialReportHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedReportingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReportingServiceHandler struct{}

func (UnimplementedReportingServiceHandler) GetSalesReport(context.Context, *connect.Request[v1.GetSalesReportRequest]) (*connect.Response[v1.GetSalesReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reports.v1.ReportingService.GetSalesReport is not implemented"))
}

func (UnimplementedReportingServiceHandler) GetPurchaseReport(context.Context, *connect.Request[v1.GetPurchaseReportRequest]) (*connect.Response[v1.GetPurchaseReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reports.v1.ReportingService.GetPurchaseReport is not implemented"))
}

func (UnimplementedReportingServiceHandler) GetInventoryMovementReport(context.Context, *connect.Request[v1.GetInventoryMovementReportRequest]) (*connect.Response[v1.GetInventoryMovementReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reports.v1.ReportingService.GetInventoryMovementReport is not implemented"))
}

func (UnimplementedReportingServiceHandler) GetBestSellingProducts(context.Context, *connect.Request[v1.GetBestSellingProductsRequest]) (*connect.Response[v1.GetBestSellingProductsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reports.v1.ReportingService.GetBestSellingProducts is not implemented"))
}

func (UnimplementedReportingServiceHandler) GetStorePurchaseHistory(context.Context, *connect.Request[v1.GetStorePurchaseHistoryRequest]) (*connect.Response[v1.GetStorePurchaseHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reports.v1.ReportingService.GetStorePurchaseHistory is not implemented"))
}

func (UnimplementedReportingServiceHandler) GetSupplierPerformanceReport(context.Context, *connect.Request[v1.GetSupplierPerformanceReportRequest]) (*connect.Response[v1.GetSupplierPerformanceReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reports.v1.ReportingService.GetSupplierPerformanceReport is not implemented"))
}

func (UnimplementedReportingServiceHandler) GetProfitLossReport(context.Context, *connect.Request[v1.GetProfitLossReportRequest]) (*connect.Response[v1.GetProfitLossReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reports.v1.ReportingService.GetProfitLossReport is not implemented"))
}

func (UnimplementedReportingServiceHandler) GetStockAgingReport(context.Context, *connect.Request[v1.GetStockAgingReportRequest]) (*connect.Response[v1.GetStockAgingReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reports.v1.ReportingService.GetStockAgingReport is not implemented"))
}

func (UnimplementedReportingServiceHandler) GetInventoryReport(context.Context, *connect.Request[v1.GetInventoryReportRequest]) (*connect.Response[v1.GetInventoryReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reports.v1.ReportingService.GetInventoryReport is not implemented"))
}

func (UnimplementedReportingServiceHandler) GetSalesReportFull(context.Context, *connect.Request[v1.GetSalesReportRequest]) (*connect.Response[v1.GetSalesReportFullResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reports.v1.ReportingService.GetSalesReportFull is not implemented"))
}

func (UnimplementedReportingServiceHandler) GetFinancialReport(context.Context, *connect.Request[v1.GetFinancialReportRequest]) (*connect.Response[v1.GetFinancialReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reports.v1.ReportingService.GetFinancialReport is not implemented"))
}

// DashboardReportingServiceClient is a client for the reports.v1.DashboardReportingService service.
type DashboardReportingServiceClient interface {
	// Get comprehensive dashboard data with all calculated fields
	GetDashboardReport(context.Context, *connect.Request[v1.GetDashboardReportRequest]) (*connect.Response[v1.GetDashboardReportResponse], error)
}

// NewDashboardReportingServiceClient constructs a client for the
// reports.v1.DashboardReportingService service. By default, it uses the Connect protocol with the
// binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use the
// gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDashboardReportingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DashboardReportingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	dashboardReportingServiceMethods := v1.File_reports_v1_reports_proto.Services().ByName("DashboardReportingService").Methods()
	return &dashboardReportingServiceClient{
		getDashboardReport: connect.NewClient[v1.GetDashboardReportRequest, v1.GetDashboardReportResponse](
			httpClient,
			baseURL+DashboardReportingServiceGetDashboardReportProcedure,
			connect.WithSchema(dashboardReportingServiceMethods.ByName("GetDashboardReport")),
			connect.WithClientOptions(opts...),
		),
	}
}

// dashboardReportingServiceClient implements DashboardReportingServiceClient.
type dashboardReportingServiceClient struct {
	getDashboardReport *connect.Client[v1.GetDashboardReportRequest, v1.GetDashboardReportResponse]
}

// GetDashboardReport calls reports.v1.DashboardReportingService.GetDashboardReport.
func (c *dashboardReportingServiceClient) GetDashboardReport(ctx context.Context, req *connect.Request[v1.GetDashboardReportRequest]) (*connect.Response[v1.GetDashboardReportResponse], error) {
	return c.getDashboardReport.CallUnary(ctx, req)
}

// DashboardReportingServiceHandler is an implementation of the reports.v1.DashboardReportingService
// service.
type DashboardReportingServiceHandler interface {
	// Get comprehensive dashboard data with all calculated fields
	GetDashboardReport(context.Context, *connect.Request[v1.GetDashboardReportRequest]) (*connect.Response[v1.GetDashboardReportResponse], error)
}

// NewDashboardReportingServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDashboardReportingServiceHandler(svc DashboardReportingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dashboardReportingServiceMethods := v1.File_reports_v1_reports_proto.Services().ByName("DashboardReportingService").Methods()
	dashboardReportingServiceGetDashboardReportHandler := connect.NewUnaryHandler(
		DashboardReportingServiceGetDashboardReportProcedure,
		svc.GetDashboardReport,
		connect.WithSchema(dashboardReportingServiceMethods.ByName("GetDashboardReport")),
		connect.WithHandlerOptions(opts...),
	)
	return "/reports.v1.DashboardReportingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DashboardReportingServiceGetDashboardReportProcedure:
			dashboardReportingServiceGetDashboardReportHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDashboardReportingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDashboardReportingServiceHandler struct{}

func (UnimplementedDashboardReportingServiceHandler) GetDashboardReport(context.Context, *connect.Request[v1.GetDashboardReportRequest]) (*connect.Response[v1.GetDashboardReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reports.v1.DashboardReportingService.GetDashboardReport is not implemented"))
}
