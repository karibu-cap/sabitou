// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: audits/v1/audits.proto

package auditsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/karibu-cap/sabitou/protos/gen/go/rpc/audits/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuditsServiceName is the fully-qualified name of the AuditsService service.
	AuditsServiceName = "audits.v1.AuditsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuditsServiceGetInventoryTransactionAuditLogsProcedure is the fully-qualified name of the
	// AuditsService's GetInventoryTransactionAuditLogs RPC.
	AuditsServiceGetInventoryTransactionAuditLogsProcedure = "/audits.v1.AuditsService/GetInventoryTransactionAuditLogs"
	// AuditsServiceGetVoucherTransactionAuditLogsProcedure is the fully-qualified name of the
	// AuditsService's GetVoucherTransactionAuditLogs RPC.
	AuditsServiceGetVoucherTransactionAuditLogsProcedure = "/audits.v1.AuditsService/GetVoucherTransactionAuditLogs"
)

// AuditsServiceClient is a client for the audits.v1.AuditsService service.
type AuditsServiceClient interface {
	GetInventoryTransactionAuditLogs(context.Context, *connect.Request[v1.GetInventoryTransactionAuditLogsRequest]) (*connect.Response[v1.GetInventoryTransactionAuditLogsResponse], error)
	GetVoucherTransactionAuditLogs(context.Context, *connect.Request[v1.GetVoucherTransactionAuditLogsRequest]) (*connect.Response[v1.GetVoucherTransactionAuditLogsResponse], error)
}

// NewAuditsServiceClient constructs a client for the audits.v1.AuditsService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuditsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuditsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	auditsServiceMethods := v1.File_audits_v1_audits_proto.Services().ByName("AuditsService").Methods()
	return &auditsServiceClient{
		getInventoryTransactionAuditLogs: connect.NewClient[v1.GetInventoryTransactionAuditLogsRequest, v1.GetInventoryTransactionAuditLogsResponse](
			httpClient,
			baseURL+AuditsServiceGetInventoryTransactionAuditLogsProcedure,
			connect.WithSchema(auditsServiceMethods.ByName("GetInventoryTransactionAuditLogs")),
			connect.WithClientOptions(opts...),
		),
		getVoucherTransactionAuditLogs: connect.NewClient[v1.GetVoucherTransactionAuditLogsRequest, v1.GetVoucherTransactionAuditLogsResponse](
			httpClient,
			baseURL+AuditsServiceGetVoucherTransactionAuditLogsProcedure,
			connect.WithSchema(auditsServiceMethods.ByName("GetVoucherTransactionAuditLogs")),
			connect.WithClientOptions(opts...),
		),
	}
}

// auditsServiceClient implements AuditsServiceClient.
type auditsServiceClient struct {
	getInventoryTransactionAuditLogs *connect.Client[v1.GetInventoryTransactionAuditLogsRequest, v1.GetInventoryTransactionAuditLogsResponse]
	getVoucherTransactionAuditLogs   *connect.Client[v1.GetVoucherTransactionAuditLogsRequest, v1.GetVoucherTransactionAuditLogsResponse]
}

// GetInventoryTransactionAuditLogs calls audits.v1.AuditsService.GetInventoryTransactionAuditLogs.
func (c *auditsServiceClient) GetInventoryTransactionAuditLogs(ctx context.Context, req *connect.Request[v1.GetInventoryTransactionAuditLogsRequest]) (*connect.Response[v1.GetInventoryTransactionAuditLogsResponse], error) {
	return c.getInventoryTransactionAuditLogs.CallUnary(ctx, req)
}

// GetVoucherTransactionAuditLogs calls audits.v1.AuditsService.GetVoucherTransactionAuditLogs.
func (c *auditsServiceClient) GetVoucherTransactionAuditLogs(ctx context.Context, req *connect.Request[v1.GetVoucherTransactionAuditLogsRequest]) (*connect.Response[v1.GetVoucherTransactionAuditLogsResponse], error) {
	return c.getVoucherTransactionAuditLogs.CallUnary(ctx, req)
}

// AuditsServiceHandler is an implementation of the audits.v1.AuditsService service.
type AuditsServiceHandler interface {
	GetInventoryTransactionAuditLogs(context.Context, *connect.Request[v1.GetInventoryTransactionAuditLogsRequest]) (*connect.Response[v1.GetInventoryTransactionAuditLogsResponse], error)
	GetVoucherTransactionAuditLogs(context.Context, *connect.Request[v1.GetVoucherTransactionAuditLogsRequest]) (*connect.Response[v1.GetVoucherTransactionAuditLogsResponse], error)
}

// NewAuditsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuditsServiceHandler(svc AuditsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	auditsServiceMethods := v1.File_audits_v1_audits_proto.Services().ByName("AuditsService").Methods()
	auditsServiceGetInventoryTransactionAuditLogsHandler := connect.NewUnaryHandler(
		AuditsServiceGetInventoryTransactionAuditLogsProcedure,
		svc.GetInventoryTransactionAuditLogs,
		connect.WithSchema(auditsServiceMethods.ByName("GetInventoryTransactionAuditLogs")),
		connect.WithHandlerOptions(opts...),
	)
	auditsServiceGetVoucherTransactionAuditLogsHandler := connect.NewUnaryHandler(
		AuditsServiceGetVoucherTransactionAuditLogsProcedure,
		svc.GetVoucherTransactionAuditLogs,
		connect.WithSchema(auditsServiceMethods.ByName("GetVoucherTransactionAuditLogs")),
		connect.WithHandlerOptions(opts...),
	)
	return "/audits.v1.AuditsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuditsServiceGetInventoryTransactionAuditLogsProcedure:
			auditsServiceGetInventoryTransactionAuditLogsHandler.ServeHTTP(w, r)
		case AuditsServiceGetVoucherTransactionAuditLogsProcedure:
			auditsServiceGetVoucherTransactionAuditLogsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuditsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuditsServiceHandler struct{}

func (UnimplementedAuditsServiceHandler) GetInventoryTransactionAuditLogs(context.Context, *connect.Request[v1.GetInventoryTransactionAuditLogsRequest]) (*connect.Response[v1.GetInventoryTransactionAuditLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("audits.v1.AuditsService.GetInventoryTransactionAuditLogs is not implemented"))
}

func (UnimplementedAuditsServiceHandler) GetVoucherTransactionAuditLogs(context.Context, *connect.Request[v1.GetVoucherTransactionAuditLogsRequest]) (*connect.Response[v1.GetVoucherTransactionAuditLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("audits.v1.AuditsService.GetVoucherTransactionAuditLogs is not implemented"))
}
