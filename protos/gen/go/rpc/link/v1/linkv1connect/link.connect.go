// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: link/v1/link.proto

package linkv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/karibu-cap/sabitou/protos/gen/go/rpc/link/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ResourceLinkServiceName is the fully-qualified name of the ResourceLinkService service.
	ResourceLinkServiceName = "link.v1.ResourceLinkService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ResourceLinkServiceGetResourceLinksProcedure is the fully-qualified name of the
	// ResourceLinkService's GetResourceLinks RPC.
	ResourceLinkServiceGetResourceLinksProcedure = "/link.v1.ResourceLinkService/GetResourceLinks"
)

// ResourceLinkServiceClient is a client for the link.v1.ResourceLinkService service.
type ResourceLinkServiceClient interface {
	// Gets a resource link by id.
	// Returns the resources in the same order as the ids.
	GetResourceLinks(context.Context, *connect.Request[v1.GetResourceLinksRequest]) (*connect.Response[v1.GetResourceLinksResponse], error)
}

// NewResourceLinkServiceClient constructs a client for the link.v1.ResourceLinkService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewResourceLinkServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ResourceLinkServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	resourceLinkServiceMethods := v1.File_link_v1_link_proto.Services().ByName("ResourceLinkService").Methods()
	return &resourceLinkServiceClient{
		getResourceLinks: connect.NewClient[v1.GetResourceLinksRequest, v1.GetResourceLinksResponse](
			httpClient,
			baseURL+ResourceLinkServiceGetResourceLinksProcedure,
			connect.WithSchema(resourceLinkServiceMethods.ByName("GetResourceLinks")),
			connect.WithClientOptions(opts...),
		),
	}
}

// resourceLinkServiceClient implements ResourceLinkServiceClient.
type resourceLinkServiceClient struct {
	getResourceLinks *connect.Client[v1.GetResourceLinksRequest, v1.GetResourceLinksResponse]
}

// GetResourceLinks calls link.v1.ResourceLinkService.GetResourceLinks.
func (c *resourceLinkServiceClient) GetResourceLinks(ctx context.Context, req *connect.Request[v1.GetResourceLinksRequest]) (*connect.Response[v1.GetResourceLinksResponse], error) {
	return c.getResourceLinks.CallUnary(ctx, req)
}

// ResourceLinkServiceHandler is an implementation of the link.v1.ResourceLinkService service.
type ResourceLinkServiceHandler interface {
	// Gets a resource link by id.
	// Returns the resources in the same order as the ids.
	GetResourceLinks(context.Context, *connect.Request[v1.GetResourceLinksRequest]) (*connect.Response[v1.GetResourceLinksResponse], error)
}

// NewResourceLinkServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewResourceLinkServiceHandler(svc ResourceLinkServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	resourceLinkServiceMethods := v1.File_link_v1_link_proto.Services().ByName("ResourceLinkService").Methods()
	resourceLinkServiceGetResourceLinksHandler := connect.NewUnaryHandler(
		ResourceLinkServiceGetResourceLinksProcedure,
		svc.GetResourceLinks,
		connect.WithSchema(resourceLinkServiceMethods.ByName("GetResourceLinks")),
		connect.WithHandlerOptions(opts...),
	)
	return "/link.v1.ResourceLinkService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ResourceLinkServiceGetResourceLinksProcedure:
			resourceLinkServiceGetResourceLinksHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedResourceLinkServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedResourceLinkServiceHandler struct{}

func (UnimplementedResourceLinkServiceHandler) GetResourceLinks(context.Context, *connect.Request[v1.GetResourceLinksRequest]) (*connect.Response[v1.GetResourceLinksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("link.v1.ResourceLinkService.GetResourceLinks is not implemented"))
}
