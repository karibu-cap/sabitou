// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: business/v1/business.proto

package businessv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/karibu-cap/sabitou/protos/gen/go/rpc/identity/v1"
	v11 "github.com/karibu-cap/sabitou/protos/gen/go/rpc/link/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BusinessStatusType int32

const (
	BusinessStatusType_BUSINESS_STATUS_TYPE_UNSPECIFIED BusinessStatusType = 0
	BusinessStatusType_BUSINESS_STATUS_TYPE_ACTIVE      BusinessStatusType = 1
	BusinessStatusType_BUSINESS_STATUS_TYPE_INACTIVE    BusinessStatusType = 2
)

// Enum value maps for BusinessStatusType.
var (
	BusinessStatusType_name = map[int32]string{
		0: "BUSINESS_STATUS_TYPE_UNSPECIFIED",
		1: "BUSINESS_STATUS_TYPE_ACTIVE",
		2: "BUSINESS_STATUS_TYPE_INACTIVE",
	}
	BusinessStatusType_value = map[string]int32{
		"BUSINESS_STATUS_TYPE_UNSPECIFIED": 0,
		"BUSINESS_STATUS_TYPE_ACTIVE":      1,
		"BUSINESS_STATUS_TYPE_INACTIVE":    2,
	}
)

func (x BusinessStatusType) Enum() *BusinessStatusType {
	p := new(BusinessStatusType)
	*p = x
	return p
}

func (x BusinessStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BusinessStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_business_v1_business_proto_enumTypes[0].Descriptor()
}

func (BusinessStatusType) Type() protoreflect.EnumType {
	return &file_business_v1_business_proto_enumTypes[0]
}

func (x BusinessStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BusinessStatusType.Descriptor instead.
func (BusinessStatusType) EnumDescriptor() ([]byte, []int) {
	return file_business_v1_business_proto_rawDescGZIP(), []int{0}
}

type CurrencyChangePolicyType int32

const (
	CurrencyChangePolicyType_CURRENCY_CHANGE_POLICY_TYPE_UNSPECIFIED                            CurrencyChangePolicyType = 0
	CurrencyChangePolicyType_CURRENCY_CHANGE_POLICY_TYPE_KEEP_PREVIOUS_CURRENCY_VALUE           CurrencyChangePolicyType = 1
	CurrencyChangePolicyType_CURRENCY_CHANGE_POLICY_TYPE_CONVERT_BASED_ON_CURRENT_EXCHANGE_RATE CurrencyChangePolicyType = 2
)

// Enum value maps for CurrencyChangePolicyType.
var (
	CurrencyChangePolicyType_name = map[int32]string{
		0: "CURRENCY_CHANGE_POLICY_TYPE_UNSPECIFIED",
		1: "CURRENCY_CHANGE_POLICY_TYPE_KEEP_PREVIOUS_CURRENCY_VALUE",
		2: "CURRENCY_CHANGE_POLICY_TYPE_CONVERT_BASED_ON_CURRENT_EXCHANGE_RATE",
	}
	CurrencyChangePolicyType_value = map[string]int32{
		"CURRENCY_CHANGE_POLICY_TYPE_UNSPECIFIED":                            0,
		"CURRENCY_CHANGE_POLICY_TYPE_KEEP_PREVIOUS_CURRENCY_VALUE":           1,
		"CURRENCY_CHANGE_POLICY_TYPE_CONVERT_BASED_ON_CURRENT_EXCHANGE_RATE": 2,
	}
)

func (x CurrencyChangePolicyType) Enum() *CurrencyChangePolicyType {
	p := new(CurrencyChangePolicyType)
	*p = x
	return p
}

func (x CurrencyChangePolicyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CurrencyChangePolicyType) Descriptor() protoreflect.EnumDescriptor {
	return file_business_v1_business_proto_enumTypes[1].Descriptor()
}

func (CurrencyChangePolicyType) Type() protoreflect.EnumType {
	return &file_business_v1_business_proto_enumTypes[1]
}

func (x CurrencyChangePolicyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CurrencyChangePolicyType.Descriptor instead.
func (CurrencyChangePolicyType) EnumDescriptor() ([]byte, []int) {
	return file_business_v1_business_proto_rawDescGZIP(), []int{1}
}

type Business struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The reference id to the business identifier.
	RefId *string `protobuf:"bytes,1,opt,name=ref_id,json=refId,proto3,oneof" json:"ref_id,omitempty"`
	// The name of the business.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the business.
	Description *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// The status of the business.
	Status BusinessStatusType `protobuf:"varint,4,opt,name=status,proto3,enum=business.v1.BusinessStatusType" json:"status,omitempty"`
	// The id of the owner of the business.
	OwnerId string `protobuf:"bytes,5,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	// The id of the media of the logo of the business.
	LogoLinkId *string `protobuf:"bytes,6,opt,name=logo_link_id,json=logoLinkId,proto3,oneof" json:"logo_link_id,omitempty"`
	// The ISO 3166-1 alpha-2 country code of the business.
	// e.g. CM, US, GB, etc.
	CountryCode string `protobuf:"bytes,7,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// The ISO 4217 currency code of the business.
	// For example: XAF, USD, EUR, etc.
	// Note: All price in the business will be in this currency.
	CurrencyCode string `protobuf:"bytes,8,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	// The media ids of different links of the business.
	// It can be social media links, website links, etc.
	ExternalLinksIds []string `protobuf:"bytes,9,rep,name=external_links_ids,json=externalLinksIds,proto3" json:"external_links_ids,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Business) Reset() {
	*x = Business{}
	mi := &file_business_v1_business_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Business) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Business) ProtoMessage() {}

func (x *Business) ProtoReflect() protoreflect.Message {
	mi := &file_business_v1_business_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Business.ProtoReflect.Descriptor instead.
func (*Business) Descriptor() ([]byte, []int) {
	return file_business_v1_business_proto_rawDescGZIP(), []int{0}
}

func (x *Business) GetRefId() string {
	if x != nil && x.RefId != nil {
		return *x.RefId
	}
	return ""
}

func (x *Business) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Business) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Business) GetStatus() BusinessStatusType {
	if x != nil {
		return x.Status
	}
	return BusinessStatusType_BUSINESS_STATUS_TYPE_UNSPECIFIED
}

func (x *Business) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *Business) GetLogoLinkId() string {
	if x != nil && x.LogoLinkId != nil {
		return *x.LogoLinkId
	}
	return ""
}

func (x *Business) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *Business) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *Business) GetExternalLinksIds() []string {
	if x != nil {
		return x.ExternalLinksIds
	}
	return nil
}

type BusinessMember struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the user.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The unique identifier of the business.
	BusinessId string `protobuf:"bytes,2,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	// The permissions that the user has.
	Permissions []*v1.Permission `protobuf:"bytes,3,rep,name=permissions,proto3" json:"permissions,omitempty"`
	// The unique identifier of the permission group.
	PermissionsGroupsIds []string `protobuf:"bytes,4,rep,name=permissions_groups_ids,json=permissionsGroupsIds,proto3" json:"permissions_groups_ids,omitempty"`
	// The date since when the
	MemberSince   string `protobuf:"bytes,5,opt,name=member_since,json=memberSince,proto3" json:"member_since,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BusinessMember) Reset() {
	*x = BusinessMember{}
	mi := &file_business_v1_business_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BusinessMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessMember) ProtoMessage() {}

func (x *BusinessMember) ProtoReflect() protoreflect.Message {
	mi := &file_business_v1_business_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessMember.ProtoReflect.Descriptor instead.
func (*BusinessMember) Descriptor() ([]byte, []int) {
	return file_business_v1_business_proto_rawDescGZIP(), []int{1}
}

func (x *BusinessMember) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BusinessMember) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *BusinessMember) GetPermissions() []*v1.Permission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *BusinessMember) GetPermissionsGroupsIds() []string {
	if x != nil {
		return x.PermissionsGroupsIds
	}
	return nil
}

func (x *BusinessMember) GetMemberSince() string {
	if x != nil {
		return x.MemberSince
	}
	return ""
}

type CreateBusinessRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The business information to create.
	// Note:Only the fields that are set will be created.
	Business *Business `protobuf:"bytes,1,opt,name=business,proto3" json:"business,omitempty"`
	// The raw image of the logo of the business.
	LogoRawImage []byte `protobuf:"bytes,2,opt,name=logo_raw_image,json=logoRawImage,proto3,oneof" json:"logo_raw_image,omitempty"`
	// The links of the business.
	ExternalLinks []*v11.ResourceLink `protobuf:"bytes,3,rep,name=external_links,json=externalLinks,proto3" json:"external_links,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBusinessRequest) Reset() {
	*x = CreateBusinessRequest{}
	mi := &file_business_v1_business_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBusinessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBusinessRequest) ProtoMessage() {}

func (x *CreateBusinessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_business_v1_business_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBusinessRequest.ProtoReflect.Descriptor instead.
func (*CreateBusinessRequest) Descriptor() ([]byte, []int) {
	return file_business_v1_business_proto_rawDescGZIP(), []int{2}
}

func (x *CreateBusinessRequest) GetBusiness() *Business {
	if x != nil {
		return x.Business
	}
	return nil
}

func (x *CreateBusinessRequest) GetLogoRawImage() []byte {
	if x != nil {
		return x.LogoRawImage
	}
	return nil
}

func (x *CreateBusinessRequest) GetExternalLinks() []*v11.ResourceLink {
	if x != nil {
		return x.ExternalLinks
	}
	return nil
}

type CreateBusinessResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The reference id to the business identifier.
	BusinessId    string `protobuf:"bytes,1,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBusinessResponse) Reset() {
	*x = CreateBusinessResponse{}
	mi := &file_business_v1_business_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBusinessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBusinessResponse) ProtoMessage() {}

func (x *CreateBusinessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_business_v1_business_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBusinessResponse.ProtoReflect.Descriptor instead.
func (*CreateBusinessResponse) Descriptor() ([]byte, []int) {
	return file_business_v1_business_proto_rawDescGZIP(), []int{3}
}

func (x *CreateBusinessResponse) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

type ChangeBusinessCurrencyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The policy to apply when changing the currency
	// This field is required on currency change.
	CurrencyChangePolicy CurrencyChangePolicyType `protobuf:"varint,1,opt,name=currency_change_policy,json=currencyChangePolicy,proto3,enum=business.v1.CurrencyChangePolicyType" json:"currency_change_policy,omitempty"`
	// The unique ref id of the business.
	BusinessId string `protobuf:"bytes,2,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	// The ISO 3166-1 alpha-2 country code of the business.
	// e.g. CM, US, GB, etc.
	CountryCode   string `protobuf:"bytes,3,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeBusinessCurrencyRequest) Reset() {
	*x = ChangeBusinessCurrencyRequest{}
	mi := &file_business_v1_business_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeBusinessCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeBusinessCurrencyRequest) ProtoMessage() {}

func (x *ChangeBusinessCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_business_v1_business_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeBusinessCurrencyRequest.ProtoReflect.Descriptor instead.
func (*ChangeBusinessCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_business_v1_business_proto_rawDescGZIP(), []int{4}
}

func (x *ChangeBusinessCurrencyRequest) GetCurrencyChangePolicy() CurrencyChangePolicyType {
	if x != nil {
		return x.CurrencyChangePolicy
	}
	return CurrencyChangePolicyType_CURRENCY_CHANGE_POLICY_TYPE_UNSPECIFIED
}

func (x *ChangeBusinessCurrencyRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *ChangeBusinessCurrencyRequest) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

type ChangeBusinessCurrencyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sucess        bool                   `protobuf:"varint,1,opt,name=sucess,proto3" json:"sucess,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeBusinessCurrencyResponse) Reset() {
	*x = ChangeBusinessCurrencyResponse{}
	mi := &file_business_v1_business_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeBusinessCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeBusinessCurrencyResponse) ProtoMessage() {}

func (x *ChangeBusinessCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_business_v1_business_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeBusinessCurrencyResponse.ProtoReflect.Descriptor instead.
func (*ChangeBusinessCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_business_v1_business_proto_rawDescGZIP(), []int{5}
}

func (x *ChangeBusinessCurrencyResponse) GetSucess() bool {
	if x != nil {
		return x.Sucess
	}
	return false
}

type GetMyBusinessesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMyBusinessesRequest) Reset() {
	*x = GetMyBusinessesRequest{}
	mi := &file_business_v1_business_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMyBusinessesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyBusinessesRequest) ProtoMessage() {}

func (x *GetMyBusinessesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_business_v1_business_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyBusinessesRequest.ProtoReflect.Descriptor instead.
func (*GetMyBusinessesRequest) Descriptor() ([]byte, []int) {
	return file_business_v1_business_proto_rawDescGZIP(), []int{6}
}

type GetMyBusinessesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Businesses    []*Business            `protobuf:"bytes,1,rep,name=businesses,proto3" json:"businesses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMyBusinessesResponse) Reset() {
	*x = GetMyBusinessesResponse{}
	mi := &file_business_v1_business_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMyBusinessesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyBusinessesResponse) ProtoMessage() {}

func (x *GetMyBusinessesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_business_v1_business_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyBusinessesResponse.ProtoReflect.Descriptor instead.
func (*GetMyBusinessesResponse) Descriptor() ([]byte, []int) {
	return file_business_v1_business_proto_rawDescGZIP(), []int{7}
}

func (x *GetMyBusinessesResponse) GetBusinesses() []*Business {
	if x != nil {
		return x.Businesses
	}
	return nil
}

type GetBusinessDetailsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The reference id to the business identifier.
	BusinessId    string `protobuf:"bytes,1,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBusinessDetailsRequest) Reset() {
	*x = GetBusinessDetailsRequest{}
	mi := &file_business_v1_business_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBusinessDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessDetailsRequest) ProtoMessage() {}

func (x *GetBusinessDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_business_v1_business_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessDetailsRequest) Descriptor() ([]byte, []int) {
	return file_business_v1_business_proto_rawDescGZIP(), []int{8}
}

func (x *GetBusinessDetailsRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

type GetBusinessDetailsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The retrieved business data.
	Business      *Business `protobuf:"bytes,1,opt,name=business,proto3" json:"business,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBusinessDetailsResponse) Reset() {
	*x = GetBusinessDetailsResponse{}
	mi := &file_business_v1_business_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBusinessDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessDetailsResponse) ProtoMessage() {}

func (x *GetBusinessDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_business_v1_business_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetBusinessDetailsResponse) Descriptor() ([]byte, []int) {
	return file_business_v1_business_proto_rawDescGZIP(), []int{9}
}

func (x *GetBusinessDetailsResponse) GetBusiness() *Business {
	if x != nil {
		return x.Business
	}
	return nil
}

type UpdateBusinessRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The business information to update.
	// Note:Only the fields that are set will be updated.
	Business *Business `protobuf:"bytes,1,opt,name=business,proto3" json:"business,omitempty"`
	// The raw image of the logo of the business.
	LogoRawImage []byte `protobuf:"bytes,2,opt,name=logo_raw_image,json=logoRawImage,proto3,oneof" json:"logo_raw_image,omitempty"`
	// The links of the business.
	ExternalLinks []*v11.ResourceLink `protobuf:"bytes,3,rep,name=external_links,json=externalLinks,proto3" json:"external_links,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateBusinessRequest) Reset() {
	*x = UpdateBusinessRequest{}
	mi := &file_business_v1_business_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBusinessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessRequest) ProtoMessage() {}

func (x *UpdateBusinessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_business_v1_business_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessRequest.ProtoReflect.Descriptor instead.
func (*UpdateBusinessRequest) Descriptor() ([]byte, []int) {
	return file_business_v1_business_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateBusinessRequest) GetBusiness() *Business {
	if x != nil {
		return x.Business
	}
	return nil
}

func (x *UpdateBusinessRequest) GetLogoRawImage() []byte {
	if x != nil {
		return x.LogoRawImage
	}
	return nil
}

func (x *UpdateBusinessRequest) GetExternalLinks() []*v11.ResourceLink {
	if x != nil {
		return x.ExternalLinks
	}
	return nil
}

type UpdateBusinessResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the business was successfully updated.
	Success       bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateBusinessResponse) Reset() {
	*x = UpdateBusinessResponse{}
	mi := &file_business_v1_business_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBusinessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessResponse) ProtoMessage() {}

func (x *UpdateBusinessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_business_v1_business_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessResponse.ProtoReflect.Descriptor instead.
func (*UpdateBusinessResponse) Descriptor() ([]byte, []int) {
	return file_business_v1_business_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateBusinessResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type RequestDeleteBusinessRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The reference id to the business identifier.
	BusinessId string `protobuf:"bytes,1,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	// The password of the user who is trying to delete the business.
	// If the user doesn't have a password, he must set it before handling any deletion.
	Password      string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestDeleteBusinessRequest) Reset() {
	*x = RequestDeleteBusinessRequest{}
	mi := &file_business_v1_business_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestDeleteBusinessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestDeleteBusinessRequest) ProtoMessage() {}

func (x *RequestDeleteBusinessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_business_v1_business_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestDeleteBusinessRequest.ProtoReflect.Descriptor instead.
func (*RequestDeleteBusinessRequest) Descriptor() ([]byte, []int) {
	return file_business_v1_business_proto_rawDescGZIP(), []int{12}
}

func (x *RequestDeleteBusinessRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *RequestDeleteBusinessRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type RequestDeleteBusinessResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the business will be deleted or not.
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// The notice period before the business will be deleted.
	NoticePeriod  string `protobuf:"bytes,2,opt,name=notice_period,json=noticePeriod,proto3" json:"notice_period,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestDeleteBusinessResponse) Reset() {
	*x = RequestDeleteBusinessResponse{}
	mi := &file_business_v1_business_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestDeleteBusinessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestDeleteBusinessResponse) ProtoMessage() {}

func (x *RequestDeleteBusinessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_business_v1_business_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestDeleteBusinessResponse.ProtoReflect.Descriptor instead.
func (*RequestDeleteBusinessResponse) Descriptor() ([]byte, []int) {
	return file_business_v1_business_proto_rawDescGZIP(), []int{13}
}

func (x *RequestDeleteBusinessResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RequestDeleteBusinessResponse) GetNoticePeriod() string {
	if x != nil {
		return x.NoticePeriod
	}
	return ""
}

type AddUserToBusinessRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserName      string                 `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	BusinessId    string                 `protobuf:"bytes,3,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddUserToBusinessRequest) Reset() {
	*x = AddUserToBusinessRequest{}
	mi := &file_business_v1_business_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUserToBusinessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserToBusinessRequest) ProtoMessage() {}

func (x *AddUserToBusinessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_business_v1_business_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserToBusinessRequest.ProtoReflect.Descriptor instead.
func (*AddUserToBusinessRequest) Descriptor() ([]byte, []int) {
	return file_business_v1_business_proto_rawDescGZIP(), []int{14}
}

func (x *AddUserToBusinessRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AddUserToBusinessRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AddUserToBusinessRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

type AddUserToBusinessResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The business member to return
	BusinessMember *BusinessMember `protobuf:"bytes,1,opt,name=business_member,json=businessMember,proto3" json:"business_member,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AddUserToBusinessResponse) Reset() {
	*x = AddUserToBusinessResponse{}
	mi := &file_business_v1_business_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUserToBusinessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserToBusinessResponse) ProtoMessage() {}

func (x *AddUserToBusinessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_business_v1_business_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserToBusinessResponse.ProtoReflect.Descriptor instead.
func (*AddUserToBusinessResponse) Descriptor() ([]byte, []int) {
	return file_business_v1_business_proto_rawDescGZIP(), []int{15}
}

func (x *AddUserToBusinessResponse) GetBusinessMember() *BusinessMember {
	if x != nil {
		return x.BusinessMember
	}
	return nil
}

type RemoveUserFromBusinessRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the user.
	UserId        string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BusinessId    string `protobuf:"bytes,2,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveUserFromBusinessRequest) Reset() {
	*x = RemoveUserFromBusinessRequest{}
	mi := &file_business_v1_business_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveUserFromBusinessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserFromBusinessRequest) ProtoMessage() {}

func (x *RemoveUserFromBusinessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_business_v1_business_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserFromBusinessRequest.ProtoReflect.Descriptor instead.
func (*RemoveUserFromBusinessRequest) Descriptor() ([]byte, []int) {
	return file_business_v1_business_proto_rawDescGZIP(), []int{16}
}

func (x *RemoveUserFromBusinessRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RemoveUserFromBusinessRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

type RemoveUserFromBusinessResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the user was successfully removed from the business.
	Success       bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveUserFromBusinessResponse) Reset() {
	*x = RemoveUserFromBusinessResponse{}
	mi := &file_business_v1_business_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveUserFromBusinessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserFromBusinessResponse) ProtoMessage() {}

func (x *RemoveUserFromBusinessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_business_v1_business_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserFromBusinessResponse.ProtoReflect.Descriptor instead.
func (*RemoveUserFromBusinessResponse) Descriptor() ([]byte, []int) {
	return file_business_v1_business_proto_rawDescGZIP(), []int{17}
}

func (x *RemoveUserFromBusinessResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetBusinessMembersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The reference id to the business identifier.
	BusinessId    string `protobuf:"bytes,1,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBusinessMembersRequest) Reset() {
	*x = GetBusinessMembersRequest{}
	mi := &file_business_v1_business_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBusinessMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessMembersRequest) ProtoMessage() {}

func (x *GetBusinessMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_business_v1_business_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessMembersRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessMembersRequest) Descriptor() ([]byte, []int) {
	return file_business_v1_business_proto_rawDescGZIP(), []int{18}
}

func (x *GetBusinessMembersRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

type GetBusinessMembersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The set of business member
	BusinessMembers []*BusinessMember `protobuf:"bytes,1,rep,name=business_members,json=businessMembers,proto3" json:"business_members,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetBusinessMembersResponse) Reset() {
	*x = GetBusinessMembersResponse{}
	mi := &file_business_v1_business_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBusinessMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessMembersResponse) ProtoMessage() {}

func (x *GetBusinessMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_business_v1_business_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessMembersResponse.ProtoReflect.Descriptor instead.
func (*GetBusinessMembersResponse) Descriptor() ([]byte, []int) {
	return file_business_v1_business_proto_rawDescGZIP(), []int{19}
}

func (x *GetBusinessMembersResponse) GetBusinessMembers() []*BusinessMember {
	if x != nil {
		return x.BusinessMembers
	}
	return nil
}

var File_business_v1_business_proto protoreflect.FileDescriptor

var file_business_v1_business_proto_rawDesc = string([]byte{
	0x0a, 0x1a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69,
	0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfe, 0x02, 0x0a, 0x08, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x6f, 0x4c, 0x69,
	0x6e, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x49, 0x64, 0x73, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67,
	0x6f, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x22, 0xde, 0x01, 0x0a, 0x0e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x14, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x08, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x6f, 0x5f,
	0x72, 0x61, 0x77, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x6f, 0x52, 0x61, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x6e,
	0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x73,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x22, 0x45, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x10, 0x03, 0x52, 0x0a,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x1d, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x16,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x38, 0x0a,
	0x1e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x75, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x73, 0x75, 0x63, 0x65, 0x73, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x79,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x50, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0a,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x22, 0x48, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x10,
	0x03, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0x4f, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x52, 0x08, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x22, 0xc6,
	0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x52, 0x08, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x0e, 0x6c,
	0x6f, 0x67, 0x6f, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x6f, 0x52, 0x61, 0x77, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c,
	0x69, 0x6e, 0x6b, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x72, 0x61,
	0x77, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x32, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x67, 0x0a, 0x1c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0b, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x10, 0x03, 0x52, 0x0a, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0x5e, 0x0a, 0x1d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x22, 0x74, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x19, 0x41, 0x64,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x71, 0x0a,
	0x1d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x10, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01,
	0x72, 0x02, 0x10, 0x03, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x22, 0x3a, 0x0a, 0x1e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72,
	0x6f, 0x6d, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x48, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0b, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x10, 0x03, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0f, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2a, 0x7e, 0x0a, 0x12,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x55, 0x53, 0x49,
	0x4e, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x55, 0x53,
	0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x2a, 0xcd, 0x01, 0x0a,
	0x18, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x55, 0x52,
	0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3c, 0x0a, 0x38, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x49,
	0x4f, 0x55, 0x53, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x10, 0x01, 0x12, 0x46, 0x0a, 0x42, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x5f, 0x42, 0x41, 0x53, 0x45,
	0x44, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x02, 0x32, 0xad, 0x07, 0x0a,
	0x0f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x59, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x12, 0x22, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x4d, 0x79, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x23,
	0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x79, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x26, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x59, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x12, 0x22, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x15, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x12, 0x29, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x41,
	0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x12, 0x25, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x71, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f,
	0x6d, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x2e, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72,
	0x6f, 0x6d, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x71, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2a, 0x2e, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x26, 0x2e, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xb5, 0x01, 0x0a,
	0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x42, 0x0d, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61,
	0x72, 0x69, 0x62, 0x75, 0x2d, 0x63, 0x61, 0x70, 0x2f, 0x73, 0x61, 0x62, 0x69, 0x74, 0x6f, 0x75,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x72,
	0x70, 0x63, 0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x42, 0x58, 0x58, 0xaa,
	0x02, 0x0b, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0b,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x17, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_business_v1_business_proto_rawDescOnce sync.Once
	file_business_v1_business_proto_rawDescData []byte
)

func file_business_v1_business_proto_rawDescGZIP() []byte {
	file_business_v1_business_proto_rawDescOnce.Do(func() {
		file_business_v1_business_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_business_v1_business_proto_rawDesc), len(file_business_v1_business_proto_rawDesc)))
	})
	return file_business_v1_business_proto_rawDescData
}

var file_business_v1_business_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_business_v1_business_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_business_v1_business_proto_goTypes = []any{
	(BusinessStatusType)(0),                // 0: business.v1.BusinessStatusType
	(CurrencyChangePolicyType)(0),          // 1: business.v1.CurrencyChangePolicyType
	(*Business)(nil),                       // 2: business.v1.Business
	(*BusinessMember)(nil),                 // 3: business.v1.BusinessMember
	(*CreateBusinessRequest)(nil),          // 4: business.v1.CreateBusinessRequest
	(*CreateBusinessResponse)(nil),         // 5: business.v1.CreateBusinessResponse
	(*ChangeBusinessCurrencyRequest)(nil),  // 6: business.v1.ChangeBusinessCurrencyRequest
	(*ChangeBusinessCurrencyResponse)(nil), // 7: business.v1.ChangeBusinessCurrencyResponse
	(*GetMyBusinessesRequest)(nil),         // 8: business.v1.GetMyBusinessesRequest
	(*GetMyBusinessesResponse)(nil),        // 9: business.v1.GetMyBusinessesResponse
	(*GetBusinessDetailsRequest)(nil),      // 10: business.v1.GetBusinessDetailsRequest
	(*GetBusinessDetailsResponse)(nil),     // 11: business.v1.GetBusinessDetailsResponse
	(*UpdateBusinessRequest)(nil),          // 12: business.v1.UpdateBusinessRequest
	(*UpdateBusinessResponse)(nil),         // 13: business.v1.UpdateBusinessResponse
	(*RequestDeleteBusinessRequest)(nil),   // 14: business.v1.RequestDeleteBusinessRequest
	(*RequestDeleteBusinessResponse)(nil),  // 15: business.v1.RequestDeleteBusinessResponse
	(*AddUserToBusinessRequest)(nil),       // 16: business.v1.AddUserToBusinessRequest
	(*AddUserToBusinessResponse)(nil),      // 17: business.v1.AddUserToBusinessResponse
	(*RemoveUserFromBusinessRequest)(nil),  // 18: business.v1.RemoveUserFromBusinessRequest
	(*RemoveUserFromBusinessResponse)(nil), // 19: business.v1.RemoveUserFromBusinessResponse
	(*GetBusinessMembersRequest)(nil),      // 20: business.v1.GetBusinessMembersRequest
	(*GetBusinessMembersResponse)(nil),     // 21: business.v1.GetBusinessMembersResponse
	(*v1.Permission)(nil),                  // 22: identity.v1.Permission
	(*v11.ResourceLink)(nil),               // 23: link.v1.ResourceLink
}
var file_business_v1_business_proto_depIdxs = []int32{
	0,  // 0: business.v1.Business.status:type_name -> business.v1.BusinessStatusType
	22, // 1: business.v1.BusinessMember.permissions:type_name -> identity.v1.Permission
	2,  // 2: business.v1.CreateBusinessRequest.business:type_name -> business.v1.Business
	23, // 3: business.v1.CreateBusinessRequest.external_links:type_name -> link.v1.ResourceLink
	1,  // 4: business.v1.ChangeBusinessCurrencyRequest.currency_change_policy:type_name -> business.v1.CurrencyChangePolicyType
	2,  // 5: business.v1.GetMyBusinessesResponse.businesses:type_name -> business.v1.Business
	2,  // 6: business.v1.GetBusinessDetailsResponse.business:type_name -> business.v1.Business
	2,  // 7: business.v1.UpdateBusinessRequest.business:type_name -> business.v1.Business
	23, // 8: business.v1.UpdateBusinessRequest.external_links:type_name -> link.v1.ResourceLink
	3,  // 9: business.v1.AddUserToBusinessResponse.business_member:type_name -> business.v1.BusinessMember
	3,  // 10: business.v1.GetBusinessMembersResponse.business_members:type_name -> business.v1.BusinessMember
	4,  // 11: business.v1.BusinessService.CreateBusiness:input_type -> business.v1.CreateBusinessRequest
	8,  // 12: business.v1.BusinessService.GetMyBusinesses:input_type -> business.v1.GetMyBusinessesRequest
	10, // 13: business.v1.BusinessService.GetBusinessDetails:input_type -> business.v1.GetBusinessDetailsRequest
	12, // 14: business.v1.BusinessService.UpdateBusiness:input_type -> business.v1.UpdateBusinessRequest
	14, // 15: business.v1.BusinessService.RequestDeleteBusiness:input_type -> business.v1.RequestDeleteBusinessRequest
	16, // 16: business.v1.BusinessService.AddUserToBusiness:input_type -> business.v1.AddUserToBusinessRequest
	18, // 17: business.v1.BusinessService.RemoveUserFromBusiness:input_type -> business.v1.RemoveUserFromBusinessRequest
	6,  // 18: business.v1.BusinessService.ChangeBusinessCurrency:input_type -> business.v1.ChangeBusinessCurrencyRequest
	20, // 19: business.v1.BusinessService.GetBusinessMembers:input_type -> business.v1.GetBusinessMembersRequest
	5,  // 20: business.v1.BusinessService.CreateBusiness:output_type -> business.v1.CreateBusinessResponse
	9,  // 21: business.v1.BusinessService.GetMyBusinesses:output_type -> business.v1.GetMyBusinessesResponse
	11, // 22: business.v1.BusinessService.GetBusinessDetails:output_type -> business.v1.GetBusinessDetailsResponse
	13, // 23: business.v1.BusinessService.UpdateBusiness:output_type -> business.v1.UpdateBusinessResponse
	15, // 24: business.v1.BusinessService.RequestDeleteBusiness:output_type -> business.v1.RequestDeleteBusinessResponse
	17, // 25: business.v1.BusinessService.AddUserToBusiness:output_type -> business.v1.AddUserToBusinessResponse
	19, // 26: business.v1.BusinessService.RemoveUserFromBusiness:output_type -> business.v1.RemoveUserFromBusinessResponse
	7,  // 27: business.v1.BusinessService.ChangeBusinessCurrency:output_type -> business.v1.ChangeBusinessCurrencyResponse
	21, // 28: business.v1.BusinessService.GetBusinessMembers:output_type -> business.v1.GetBusinessMembersResponse
	20, // [20:29] is the sub-list for method output_type
	11, // [11:20] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_business_v1_business_proto_init() }
func file_business_v1_business_proto_init() {
	if File_business_v1_business_proto != nil {
		return
	}
	file_business_v1_business_proto_msgTypes[0].OneofWrappers = []any{}
	file_business_v1_business_proto_msgTypes[2].OneofWrappers = []any{}
	file_business_v1_business_proto_msgTypes[10].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_business_v1_business_proto_rawDesc), len(file_business_v1_business_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_business_v1_business_proto_goTypes,
		DependencyIndexes: file_business_v1_business_proto_depIdxs,
		EnumInfos:         file_business_v1_business_proto_enumTypes,
		MessageInfos:      file_business_v1_business_proto_msgTypes,
	}.Build()
	File_business_v1_business_proto = out.File
	file_business_v1_business_proto_goTypes = nil
	file_business_v1_business_proto_depIdxs = nil
}
