// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: business/v1/business.proto

package businessv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/karibu-cap/sabitou/protos/gen/go/rpc/business/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BusinessServiceName is the fully-qualified name of the BusinessService service.
	BusinessServiceName = "business.v1.BusinessService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BusinessServiceCreateBusinessProcedure is the fully-qualified name of the BusinessService's
	// CreateBusiness RPC.
	BusinessServiceCreateBusinessProcedure = "/business.v1.BusinessService/CreateBusiness"
	// BusinessServiceGetMyBusinessesProcedure is the fully-qualified name of the BusinessService's
	// GetMyBusinesses RPC.
	BusinessServiceGetMyBusinessesProcedure = "/business.v1.BusinessService/GetMyBusinesses"
	// BusinessServiceGetBusinessDetailsProcedure is the fully-qualified name of the BusinessService's
	// GetBusinessDetails RPC.
	BusinessServiceGetBusinessDetailsProcedure = "/business.v1.BusinessService/GetBusinessDetails"
	// BusinessServiceUpdateBusinessProcedure is the fully-qualified name of the BusinessService's
	// UpdateBusiness RPC.
	BusinessServiceUpdateBusinessProcedure = "/business.v1.BusinessService/UpdateBusiness"
	// BusinessServiceRequestDeleteBusinessProcedure is the fully-qualified name of the
	// BusinessService's RequestDeleteBusiness RPC.
	BusinessServiceRequestDeleteBusinessProcedure = "/business.v1.BusinessService/RequestDeleteBusiness"
	// BusinessServiceAddUserToBusinessProcedure is the fully-qualified name of the BusinessService's
	// AddUserToBusiness RPC.
	BusinessServiceAddUserToBusinessProcedure = "/business.v1.BusinessService/AddUserToBusiness"
	// BusinessServiceRemoveUserFromBusinessProcedure is the fully-qualified name of the
	// BusinessService's RemoveUserFromBusiness RPC.
	BusinessServiceRemoveUserFromBusinessProcedure = "/business.v1.BusinessService/RemoveUserFromBusiness"
	// BusinessServiceChangeBusinessCurrencyProcedure is the fully-qualified name of the
	// BusinessService's ChangeBusinessCurrency RPC.
	BusinessServiceChangeBusinessCurrencyProcedure = "/business.v1.BusinessService/ChangeBusinessCurrency"
	// BusinessServiceGetBusinessMembersProcedure is the fully-qualified name of the BusinessService's
	// GetBusinessMembers RPC.
	BusinessServiceGetBusinessMembersProcedure = "/business.v1.BusinessService/GetBusinessMembers"
)

// BusinessServiceClient is a client for the business.v1.BusinessService service.
type BusinessServiceClient interface {
	// Create a new business.
	CreateBusiness(context.Context, *connect.Request[v1.CreateBusinessRequest]) (*connect.Response[v1.CreateBusinessResponse], error)
	// Get all businesses of the current user.
	GetMyBusinesses(context.Context, *connect.Request[v1.GetMyBusinessesRequest]) (*connect.Response[v1.GetMyBusinessesResponse], error)
	// Get a business by id.
	GetBusinessDetails(context.Context, *connect.Request[v1.GetBusinessDetailsRequest]) (*connect.Response[v1.GetBusinessDetailsResponse], error)
	// Update a business.
	UpdateBusiness(context.Context, *connect.Request[v1.UpdateBusinessRequest]) (*connect.Response[v1.UpdateBusinessResponse], error)
	// Request the deletion of the business. This request doesn't delete the business direcly instead it put the business in inactive state and remove all business members.
	RequestDeleteBusiness(context.Context, *connect.Request[v1.RequestDeleteBusinessRequest]) (*connect.Response[v1.RequestDeleteBusinessResponse], error)
	// Add user to business or invite user to business.
	AddUserToBusiness(context.Context, *connect.Request[v1.AddUserToBusinessRequest]) (*connect.Response[v1.AddUserToBusinessResponse], error)
	// Remove user from business.
	// If the user has been created by the business, the user will be deleted.
	// NOTE: The authenticated user need to have the permission to remove the
	// user.
	RemoveUserFromBusiness(context.Context, *connect.Request[v1.RemoveUserFromBusinessRequest]) (*connect.Response[v1.RemoveUserFromBusinessResponse], error)
	// Changes the business currency
	ChangeBusinessCurrency(context.Context, *connect.Request[v1.ChangeBusinessCurrencyRequest]) (*connect.Response[v1.ChangeBusinessCurrencyResponse], error)
	// Get the users of the business.
	GetBusinessMembers(context.Context, *connect.Request[v1.GetBusinessMembersRequest]) (*connect.Response[v1.GetBusinessMembersResponse], error)
}

// NewBusinessServiceClient constructs a client for the business.v1.BusinessService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBusinessServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BusinessServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	businessServiceMethods := v1.File_business_v1_business_proto.Services().ByName("BusinessService").Methods()
	return &businessServiceClient{
		createBusiness: connect.NewClient[v1.CreateBusinessRequest, v1.CreateBusinessResponse](
			httpClient,
			baseURL+BusinessServiceCreateBusinessProcedure,
			connect.WithSchema(businessServiceMethods.ByName("CreateBusiness")),
			connect.WithClientOptions(opts...),
		),
		getMyBusinesses: connect.NewClient[v1.GetMyBusinessesRequest, v1.GetMyBusinessesResponse](
			httpClient,
			baseURL+BusinessServiceGetMyBusinessesProcedure,
			connect.WithSchema(businessServiceMethods.ByName("GetMyBusinesses")),
			connect.WithClientOptions(opts...),
		),
		getBusinessDetails: connect.NewClient[v1.GetBusinessDetailsRequest, v1.GetBusinessDetailsResponse](
			httpClient,
			baseURL+BusinessServiceGetBusinessDetailsProcedure,
			connect.WithSchema(businessServiceMethods.ByName("GetBusinessDetails")),
			connect.WithClientOptions(opts...),
		),
		updateBusiness: connect.NewClient[v1.UpdateBusinessRequest, v1.UpdateBusinessResponse](
			httpClient,
			baseURL+BusinessServiceUpdateBusinessProcedure,
			connect.WithSchema(businessServiceMethods.ByName("UpdateBusiness")),
			connect.WithClientOptions(opts...),
		),
		requestDeleteBusiness: connect.NewClient[v1.RequestDeleteBusinessRequest, v1.RequestDeleteBusinessResponse](
			httpClient,
			baseURL+BusinessServiceRequestDeleteBusinessProcedure,
			connect.WithSchema(businessServiceMethods.ByName("RequestDeleteBusiness")),
			connect.WithClientOptions(opts...),
		),
		addUserToBusiness: connect.NewClient[v1.AddUserToBusinessRequest, v1.AddUserToBusinessResponse](
			httpClient,
			baseURL+BusinessServiceAddUserToBusinessProcedure,
			connect.WithSchema(businessServiceMethods.ByName("AddUserToBusiness")),
			connect.WithClientOptions(opts...),
		),
		removeUserFromBusiness: connect.NewClient[v1.RemoveUserFromBusinessRequest, v1.RemoveUserFromBusinessResponse](
			httpClient,
			baseURL+BusinessServiceRemoveUserFromBusinessProcedure,
			connect.WithSchema(businessServiceMethods.ByName("RemoveUserFromBusiness")),
			connect.WithClientOptions(opts...),
		),
		changeBusinessCurrency: connect.NewClient[v1.ChangeBusinessCurrencyRequest, v1.ChangeBusinessCurrencyResponse](
			httpClient,
			baseURL+BusinessServiceChangeBusinessCurrencyProcedure,
			connect.WithSchema(businessServiceMethods.ByName("ChangeBusinessCurrency")),
			connect.WithClientOptions(opts...),
		),
		getBusinessMembers: connect.NewClient[v1.GetBusinessMembersRequest, v1.GetBusinessMembersResponse](
			httpClient,
			baseURL+BusinessServiceGetBusinessMembersProcedure,
			connect.WithSchema(businessServiceMethods.ByName("GetBusinessMembers")),
			connect.WithClientOptions(opts...),
		),
	}
}

// businessServiceClient implements BusinessServiceClient.
type businessServiceClient struct {
	createBusiness         *connect.Client[v1.CreateBusinessRequest, v1.CreateBusinessResponse]
	getMyBusinesses        *connect.Client[v1.GetMyBusinessesRequest, v1.GetMyBusinessesResponse]
	getBusinessDetails     *connect.Client[v1.GetBusinessDetailsRequest, v1.GetBusinessDetailsResponse]
	updateBusiness         *connect.Client[v1.UpdateBusinessRequest, v1.UpdateBusinessResponse]
	requestDeleteBusiness  *connect.Client[v1.RequestDeleteBusinessRequest, v1.RequestDeleteBusinessResponse]
	addUserToBusiness      *connect.Client[v1.AddUserToBusinessRequest, v1.AddUserToBusinessResponse]
	removeUserFromBusiness *connect.Client[v1.RemoveUserFromBusinessRequest, v1.RemoveUserFromBusinessResponse]
	changeBusinessCurrency *connect.Client[v1.ChangeBusinessCurrencyRequest, v1.ChangeBusinessCurrencyResponse]
	getBusinessMembers     *connect.Client[v1.GetBusinessMembersRequest, v1.GetBusinessMembersResponse]
}

// CreateBusiness calls business.v1.BusinessService.CreateBusiness.
func (c *businessServiceClient) CreateBusiness(ctx context.Context, req *connect.Request[v1.CreateBusinessRequest]) (*connect.Response[v1.CreateBusinessResponse], error) {
	return c.createBusiness.CallUnary(ctx, req)
}

// GetMyBusinesses calls business.v1.BusinessService.GetMyBusinesses.
func (c *businessServiceClient) GetMyBusinesses(ctx context.Context, req *connect.Request[v1.GetMyBusinessesRequest]) (*connect.Response[v1.GetMyBusinessesResponse], error) {
	return c.getMyBusinesses.CallUnary(ctx, req)
}

// GetBusinessDetails calls business.v1.BusinessService.GetBusinessDetails.
func (c *businessServiceClient) GetBusinessDetails(ctx context.Context, req *connect.Request[v1.GetBusinessDetailsRequest]) (*connect.Response[v1.GetBusinessDetailsResponse], error) {
	return c.getBusinessDetails.CallUnary(ctx, req)
}

// UpdateBusiness calls business.v1.BusinessService.UpdateBusiness.
func (c *businessServiceClient) UpdateBusiness(ctx context.Context, req *connect.Request[v1.UpdateBusinessRequest]) (*connect.Response[v1.UpdateBusinessResponse], error) {
	return c.updateBusiness.CallUnary(ctx, req)
}

// RequestDeleteBusiness calls business.v1.BusinessService.RequestDeleteBusiness.
func (c *businessServiceClient) RequestDeleteBusiness(ctx context.Context, req *connect.Request[v1.RequestDeleteBusinessRequest]) (*connect.Response[v1.RequestDeleteBusinessResponse], error) {
	return c.requestDeleteBusiness.CallUnary(ctx, req)
}

// AddUserToBusiness calls business.v1.BusinessService.AddUserToBusiness.
func (c *businessServiceClient) AddUserToBusiness(ctx context.Context, req *connect.Request[v1.AddUserToBusinessRequest]) (*connect.Response[v1.AddUserToBusinessResponse], error) {
	return c.addUserToBusiness.CallUnary(ctx, req)
}

// RemoveUserFromBusiness calls business.v1.BusinessService.RemoveUserFromBusiness.
func (c *businessServiceClient) RemoveUserFromBusiness(ctx context.Context, req *connect.Request[v1.RemoveUserFromBusinessRequest]) (*connect.Response[v1.RemoveUserFromBusinessResponse], error) {
	return c.removeUserFromBusiness.CallUnary(ctx, req)
}

// ChangeBusinessCurrency calls business.v1.BusinessService.ChangeBusinessCurrency.
func (c *businessServiceClient) ChangeBusinessCurrency(ctx context.Context, req *connect.Request[v1.ChangeBusinessCurrencyRequest]) (*connect.Response[v1.ChangeBusinessCurrencyResponse], error) {
	return c.changeBusinessCurrency.CallUnary(ctx, req)
}

// GetBusinessMembers calls business.v1.BusinessService.GetBusinessMembers.
func (c *businessServiceClient) GetBusinessMembers(ctx context.Context, req *connect.Request[v1.GetBusinessMembersRequest]) (*connect.Response[v1.GetBusinessMembersResponse], error) {
	return c.getBusinessMembers.CallUnary(ctx, req)
}

// BusinessServiceHandler is an implementation of the business.v1.BusinessService service.
type BusinessServiceHandler interface {
	// Create a new business.
	CreateBusiness(context.Context, *connect.Request[v1.CreateBusinessRequest]) (*connect.Response[v1.CreateBusinessResponse], error)
	// Get all businesses of the current user.
	GetMyBusinesses(context.Context, *connect.Request[v1.GetMyBusinessesRequest]) (*connect.Response[v1.GetMyBusinessesResponse], error)
	// Get a business by id.
	GetBusinessDetails(context.Context, *connect.Request[v1.GetBusinessDetailsRequest]) (*connect.Response[v1.GetBusinessDetailsResponse], error)
	// Update a business.
	UpdateBusiness(context.Context, *connect.Request[v1.UpdateBusinessRequest]) (*connect.Response[v1.UpdateBusinessResponse], error)
	// Request the deletion of the business. This request doesn't delete the business direcly instead it put the business in inactive state and remove all business members.
	RequestDeleteBusiness(context.Context, *connect.Request[v1.RequestDeleteBusinessRequest]) (*connect.Response[v1.RequestDeleteBusinessResponse], error)
	// Add user to business or invite user to business.
	AddUserToBusiness(context.Context, *connect.Request[v1.AddUserToBusinessRequest]) (*connect.Response[v1.AddUserToBusinessResponse], error)
	// Remove user from business.
	// If the user has been created by the business, the user will be deleted.
	// NOTE: The authenticated user need to have the permission to remove the
	// user.
	RemoveUserFromBusiness(context.Context, *connect.Request[v1.RemoveUserFromBusinessRequest]) (*connect.Response[v1.RemoveUserFromBusinessResponse], error)
	// Changes the business currency
	ChangeBusinessCurrency(context.Context, *connect.Request[v1.ChangeBusinessCurrencyRequest]) (*connect.Response[v1.ChangeBusinessCurrencyResponse], error)
	// Get the users of the business.
	GetBusinessMembers(context.Context, *connect.Request[v1.GetBusinessMembersRequest]) (*connect.Response[v1.GetBusinessMembersResponse], error)
}

// NewBusinessServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBusinessServiceHandler(svc BusinessServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	businessServiceMethods := v1.File_business_v1_business_proto.Services().ByName("BusinessService").Methods()
	businessServiceCreateBusinessHandler := connect.NewUnaryHandler(
		BusinessServiceCreateBusinessProcedure,
		svc.CreateBusiness,
		connect.WithSchema(businessServiceMethods.ByName("CreateBusiness")),
		connect.WithHandlerOptions(opts...),
	)
	businessServiceGetMyBusinessesHandler := connect.NewUnaryHandler(
		BusinessServiceGetMyBusinessesProcedure,
		svc.GetMyBusinesses,
		connect.WithSchema(businessServiceMethods.ByName("GetMyBusinesses")),
		connect.WithHandlerOptions(opts...),
	)
	businessServiceGetBusinessDetailsHandler := connect.NewUnaryHandler(
		BusinessServiceGetBusinessDetailsProcedure,
		svc.GetBusinessDetails,
		connect.WithSchema(businessServiceMethods.ByName("GetBusinessDetails")),
		connect.WithHandlerOptions(opts...),
	)
	businessServiceUpdateBusinessHandler := connect.NewUnaryHandler(
		BusinessServiceUpdateBusinessProcedure,
		svc.UpdateBusiness,
		connect.WithSchema(businessServiceMethods.ByName("UpdateBusiness")),
		connect.WithHandlerOptions(opts...),
	)
	businessServiceRequestDeleteBusinessHandler := connect.NewUnaryHandler(
		BusinessServiceRequestDeleteBusinessProcedure,
		svc.RequestDeleteBusiness,
		connect.WithSchema(businessServiceMethods.ByName("RequestDeleteBusiness")),
		connect.WithHandlerOptions(opts...),
	)
	businessServiceAddUserToBusinessHandler := connect.NewUnaryHandler(
		BusinessServiceAddUserToBusinessProcedure,
		svc.AddUserToBusiness,
		connect.WithSchema(businessServiceMethods.ByName("AddUserToBusiness")),
		connect.WithHandlerOptions(opts...),
	)
	businessServiceRemoveUserFromBusinessHandler := connect.NewUnaryHandler(
		BusinessServiceRemoveUserFromBusinessProcedure,
		svc.RemoveUserFromBusiness,
		connect.WithSchema(businessServiceMethods.ByName("RemoveUserFromBusiness")),
		connect.WithHandlerOptions(opts...),
	)
	businessServiceChangeBusinessCurrencyHandler := connect.NewUnaryHandler(
		BusinessServiceChangeBusinessCurrencyProcedure,
		svc.ChangeBusinessCurrency,
		connect.WithSchema(businessServiceMethods.ByName("ChangeBusinessCurrency")),
		connect.WithHandlerOptions(opts...),
	)
	businessServiceGetBusinessMembersHandler := connect.NewUnaryHandler(
		BusinessServiceGetBusinessMembersProcedure,
		svc.GetBusinessMembers,
		connect.WithSchema(businessServiceMethods.ByName("GetBusinessMembers")),
		connect.WithHandlerOptions(opts...),
	)
	return "/business.v1.BusinessService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BusinessServiceCreateBusinessProcedure:
			businessServiceCreateBusinessHandler.ServeHTTP(w, r)
		case BusinessServiceGetMyBusinessesProcedure:
			businessServiceGetMyBusinessesHandler.ServeHTTP(w, r)
		case BusinessServiceGetBusinessDetailsProcedure:
			businessServiceGetBusinessDetailsHandler.ServeHTTP(w, r)
		case BusinessServiceUpdateBusinessProcedure:
			businessServiceUpdateBusinessHandler.ServeHTTP(w, r)
		case BusinessServiceRequestDeleteBusinessProcedure:
			businessServiceRequestDeleteBusinessHandler.ServeHTTP(w, r)
		case BusinessServiceAddUserToBusinessProcedure:
			businessServiceAddUserToBusinessHandler.ServeHTTP(w, r)
		case BusinessServiceRemoveUserFromBusinessProcedure:
			businessServiceRemoveUserFromBusinessHandler.ServeHTTP(w, r)
		case BusinessServiceChangeBusinessCurrencyProcedure:
			businessServiceChangeBusinessCurrencyHandler.ServeHTTP(w, r)
		case BusinessServiceGetBusinessMembersProcedure:
			businessServiceGetBusinessMembersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBusinessServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBusinessServiceHandler struct{}

func (UnimplementedBusinessServiceHandler) CreateBusiness(context.Context, *connect.Request[v1.CreateBusinessRequest]) (*connect.Response[v1.CreateBusinessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("business.v1.BusinessService.CreateBusiness is not implemented"))
}

func (UnimplementedBusinessServiceHandler) GetMyBusinesses(context.Context, *connect.Request[v1.GetMyBusinessesRequest]) (*connect.Response[v1.GetMyBusinessesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("business.v1.BusinessService.GetMyBusinesses is not implemented"))
}

func (UnimplementedBusinessServiceHandler) GetBusinessDetails(context.Context, *connect.Request[v1.GetBusinessDetailsRequest]) (*connect.Response[v1.GetBusinessDetailsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("business.v1.BusinessService.GetBusinessDetails is not implemented"))
}

func (UnimplementedBusinessServiceHandler) UpdateBusiness(context.Context, *connect.Request[v1.UpdateBusinessRequest]) (*connect.Response[v1.UpdateBusinessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("business.v1.BusinessService.UpdateBusiness is not implemented"))
}

func (UnimplementedBusinessServiceHandler) RequestDeleteBusiness(context.Context, *connect.Request[v1.RequestDeleteBusinessRequest]) (*connect.Response[v1.RequestDeleteBusinessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("business.v1.BusinessService.RequestDeleteBusiness is not implemented"))
}

func (UnimplementedBusinessServiceHandler) AddUserToBusiness(context.Context, *connect.Request[v1.AddUserToBusinessRequest]) (*connect.Response[v1.AddUserToBusinessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("business.v1.BusinessService.AddUserToBusiness is not implemented"))
}

func (UnimplementedBusinessServiceHandler) RemoveUserFromBusiness(context.Context, *connect.Request[v1.RemoveUserFromBusinessRequest]) (*connect.Response[v1.RemoveUserFromBusinessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("business.v1.BusinessService.RemoveUserFromBusiness is not implemented"))
}

func (UnimplementedBusinessServiceHandler) ChangeBusinessCurrency(context.Context, *connect.Request[v1.ChangeBusinessCurrencyRequest]) (*connect.Response[v1.ChangeBusinessCurrencyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("business.v1.BusinessService.ChangeBusinessCurrency is not implemented"))
}

func (UnimplementedBusinessServiceHandler) GetBusinessMembers(context.Context, *connect.Request[v1.GetBusinessMembersRequest]) (*connect.Response[v1.GetBusinessMembersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("business.v1.BusinessService.GetBusinessMembers is not implemented"))
}
