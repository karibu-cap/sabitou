// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: identity/v1/user.proto

package identityv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/karibu-cap/sabitou/protos/gen/go/rpc/identity/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "identity.v1.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceGetMeProcedure is the fully-qualified name of the UserService's GetMe RPC.
	UserServiceGetMeProcedure = "/identity.v1.UserService/GetMe"
	// UserServiceGetCurrentUserProcedure is the fully-qualified name of the UserService's
	// GetCurrentUser RPC.
	UserServiceGetCurrentUserProcedure = "/identity.v1.UserService/GetCurrentUser"
	// UserServiceGetUserProcedure is the fully-qualified name of the UserService's GetUser RPC.
	UserServiceGetUserProcedure = "/identity.v1.UserService/GetUser"
	// UserServiceUpdateMeProcedure is the fully-qualified name of the UserService's UpdateMe RPC.
	UserServiceUpdateMeProcedure = "/identity.v1.UserService/UpdateMe"
	// UserServiceUpdateProcedure is the fully-qualified name of the UserService's Update RPC.
	UserServiceUpdateProcedure = "/identity.v1.UserService/Update"
	// UserServiceRequestDeleteUserProcedure is the fully-qualified name of the UserService's
	// RequestDeleteUser RPC.
	UserServiceRequestDeleteUserProcedure = "/identity.v1.UserService/RequestDeleteUser"
	// UserServiceDeleteUserProcedure is the fully-qualified name of the UserService's DeleteUser RPC.
	UserServiceDeleteUserProcedure = "/identity.v1.UserService/DeleteUser"
	// UserServiceChangePasswordProcedure is the fully-qualified name of the UserService's
	// ChangePassword RPC.
	UserServiceChangePasswordProcedure = "/identity.v1.UserService/ChangePassword"
	// UserServiceStreamUserProcedure is the fully-qualified name of the UserService's StreamUser RPC.
	UserServiceStreamUserProcedure = "/identity.v1.UserService/StreamUser"
)

// UserServiceClient is a client for the identity.v1.UserService service.
type UserServiceClient interface {
	// Get the user information for the currently authenticated user.
	// @deprecated use GetCurrentUser instead.
	GetMe(context.Context, *connect.Request[v1.GetMeRequest]) (*connect.Response[v1.GetMeResponse], error)
	// Get the user information for the currently authenticated user.
	GetCurrentUser(context.Context, *connect.Request[v1.GetCurrentUserRequest]) (*connect.Response[v1.GetCurrentUserResponse], error)
	// Get the public information for the given user id.
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	// Update the user information for the currently authenticated user.
	UpdateMe(context.Context, *connect.Request[v1.UpdateMeRequest]) (*connect.Response[v1.UpdateMeResponse], error)
	// Update the user information for the user.
	Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error)
	// Request the deletion of the user account.
	// This will send a verification code to the user's email address
	// or phone number.
	RequestDeleteUser(context.Context, *connect.Request[v1.RequestDeleteUserRequest]) (*connect.Response[v1.RequestDeleteUserResponse], error)
	// Processes the deletion of the user account requested by the user.
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error)
	// Change the password for the currently authenticated user.
	ChangePassword(context.Context, *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[v1.ChangePasswordResponse], error)
	// Stream business members for real-time updates.
	StreamUser(context.Context, *connect.Request[v1.StreamUserRequest]) (*connect.ServerStreamForClient[v1.StreamUserResponse], error)
}

// NewUserServiceClient constructs a client for the identity.v1.UserService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userServiceMethods := v1.File_identity_v1_user_proto.Services().ByName("UserService").Methods()
	return &userServiceClient{
		getMe: connect.NewClient[v1.GetMeRequest, v1.GetMeResponse](
			httpClient,
			baseURL+UserServiceGetMeProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetMe")),
			connect.WithClientOptions(opts...),
		),
		getCurrentUser: connect.NewClient[v1.GetCurrentUserRequest, v1.GetCurrentUserResponse](
			httpClient,
			baseURL+UserServiceGetCurrentUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetCurrentUser")),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+UserServiceGetUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetUser")),
			connect.WithClientOptions(opts...),
		),
		updateMe: connect.NewClient[v1.UpdateMeRequest, v1.UpdateMeResponse](
			httpClient,
			baseURL+UserServiceUpdateMeProcedure,
			connect.WithSchema(userServiceMethods.ByName("UpdateMe")),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[v1.UpdateRequest, v1.UpdateResponse](
			httpClient,
			baseURL+UserServiceUpdateProcedure,
			connect.WithSchema(userServiceMethods.ByName("Update")),
			connect.WithClientOptions(opts...),
		),
		requestDeleteUser: connect.NewClient[v1.RequestDeleteUserRequest, v1.RequestDeleteUserResponse](
			httpClient,
			baseURL+UserServiceRequestDeleteUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("RequestDeleteUser")),
			connect.WithClientOptions(opts...),
		),
		deleteUser: connect.NewClient[v1.DeleteUserRequest, v1.DeleteUserResponse](
			httpClient,
			baseURL+UserServiceDeleteUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("DeleteUser")),
			connect.WithClientOptions(opts...),
		),
		changePassword: connect.NewClient[v1.ChangePasswordRequest, v1.ChangePasswordResponse](
			httpClient,
			baseURL+UserServiceChangePasswordProcedure,
			connect.WithSchema(userServiceMethods.ByName("ChangePassword")),
			connect.WithClientOptions(opts...),
		),
		streamUser: connect.NewClient[v1.StreamUserRequest, v1.StreamUserResponse](
			httpClient,
			baseURL+UserServiceStreamUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("StreamUser")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	getMe             *connect.Client[v1.GetMeRequest, v1.GetMeResponse]
	getCurrentUser    *connect.Client[v1.GetCurrentUserRequest, v1.GetCurrentUserResponse]
	getUser           *connect.Client[v1.GetUserRequest, v1.GetUserResponse]
	updateMe          *connect.Client[v1.UpdateMeRequest, v1.UpdateMeResponse]
	update            *connect.Client[v1.UpdateRequest, v1.UpdateResponse]
	requestDeleteUser *connect.Client[v1.RequestDeleteUserRequest, v1.RequestDeleteUserResponse]
	deleteUser        *connect.Client[v1.DeleteUserRequest, v1.DeleteUserResponse]
	changePassword    *connect.Client[v1.ChangePasswordRequest, v1.ChangePasswordResponse]
	streamUser        *connect.Client[v1.StreamUserRequest, v1.StreamUserResponse]
}

// GetMe calls identity.v1.UserService.GetMe.
func (c *userServiceClient) GetMe(ctx context.Context, req *connect.Request[v1.GetMeRequest]) (*connect.Response[v1.GetMeResponse], error) {
	return c.getMe.CallUnary(ctx, req)
}

// GetCurrentUser calls identity.v1.UserService.GetCurrentUser.
func (c *userServiceClient) GetCurrentUser(ctx context.Context, req *connect.Request[v1.GetCurrentUserRequest]) (*connect.Response[v1.GetCurrentUserResponse], error) {
	return c.getCurrentUser.CallUnary(ctx, req)
}

// GetUser calls identity.v1.UserService.GetUser.
func (c *userServiceClient) GetUser(ctx context.Context, req *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// UpdateMe calls identity.v1.UserService.UpdateMe.
func (c *userServiceClient) UpdateMe(ctx context.Context, req *connect.Request[v1.UpdateMeRequest]) (*connect.Response[v1.UpdateMeResponse], error) {
	return c.updateMe.CallUnary(ctx, req)
}

// Update calls identity.v1.UserService.Update.
func (c *userServiceClient) Update(ctx context.Context, req *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// RequestDeleteUser calls identity.v1.UserService.RequestDeleteUser.
func (c *userServiceClient) RequestDeleteUser(ctx context.Context, req *connect.Request[v1.RequestDeleteUserRequest]) (*connect.Response[v1.RequestDeleteUserResponse], error) {
	return c.requestDeleteUser.CallUnary(ctx, req)
}

// DeleteUser calls identity.v1.UserService.DeleteUser.
func (c *userServiceClient) DeleteUser(ctx context.Context, req *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// ChangePassword calls identity.v1.UserService.ChangePassword.
func (c *userServiceClient) ChangePassword(ctx context.Context, req *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[v1.ChangePasswordResponse], error) {
	return c.changePassword.CallUnary(ctx, req)
}

// StreamUser calls identity.v1.UserService.StreamUser.
func (c *userServiceClient) StreamUser(ctx context.Context, req *connect.Request[v1.StreamUserRequest]) (*connect.ServerStreamForClient[v1.StreamUserResponse], error) {
	return c.streamUser.CallServerStream(ctx, req)
}

// UserServiceHandler is an implementation of the identity.v1.UserService service.
type UserServiceHandler interface {
	// Get the user information for the currently authenticated user.
	// @deprecated use GetCurrentUser instead.
	GetMe(context.Context, *connect.Request[v1.GetMeRequest]) (*connect.Response[v1.GetMeResponse], error)
	// Get the user information for the currently authenticated user.
	GetCurrentUser(context.Context, *connect.Request[v1.GetCurrentUserRequest]) (*connect.Response[v1.GetCurrentUserResponse], error)
	// Get the public information for the given user id.
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	// Update the user information for the currently authenticated user.
	UpdateMe(context.Context, *connect.Request[v1.UpdateMeRequest]) (*connect.Response[v1.UpdateMeResponse], error)
	// Update the user information for the user.
	Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error)
	// Request the deletion of the user account.
	// This will send a verification code to the user's email address
	// or phone number.
	RequestDeleteUser(context.Context, *connect.Request[v1.RequestDeleteUserRequest]) (*connect.Response[v1.RequestDeleteUserResponse], error)
	// Processes the deletion of the user account requested by the user.
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error)
	// Change the password for the currently authenticated user.
	ChangePassword(context.Context, *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[v1.ChangePasswordResponse], error)
	// Stream business members for real-time updates.
	StreamUser(context.Context, *connect.Request[v1.StreamUserRequest], *connect.ServerStream[v1.StreamUserResponse]) error
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceMethods := v1.File_identity_v1_user_proto.Services().ByName("UserService").Methods()
	userServiceGetMeHandler := connect.NewUnaryHandler(
		UserServiceGetMeProcedure,
		svc.GetMe,
		connect.WithSchema(userServiceMethods.ByName("GetMe")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetCurrentUserHandler := connect.NewUnaryHandler(
		UserServiceGetCurrentUserProcedure,
		svc.GetCurrentUser,
		connect.WithSchema(userServiceMethods.ByName("GetCurrentUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetUserHandler := connect.NewUnaryHandler(
		UserServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(userServiceMethods.ByName("GetUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUpdateMeHandler := connect.NewUnaryHandler(
		UserServiceUpdateMeProcedure,
		svc.UpdateMe,
		connect.WithSchema(userServiceMethods.ByName("UpdateMe")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUpdateHandler := connect.NewUnaryHandler(
		UserServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(userServiceMethods.ByName("Update")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceRequestDeleteUserHandler := connect.NewUnaryHandler(
		UserServiceRequestDeleteUserProcedure,
		svc.RequestDeleteUser,
		connect.WithSchema(userServiceMethods.ByName("RequestDeleteUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceDeleteUserHandler := connect.NewUnaryHandler(
		UserServiceDeleteUserProcedure,
		svc.DeleteUser,
		connect.WithSchema(userServiceMethods.ByName("DeleteUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceChangePasswordHandler := connect.NewUnaryHandler(
		UserServiceChangePasswordProcedure,
		svc.ChangePassword,
		connect.WithSchema(userServiceMethods.ByName("ChangePassword")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceStreamUserHandler := connect.NewServerStreamHandler(
		UserServiceStreamUserProcedure,
		svc.StreamUser,
		connect.WithSchema(userServiceMethods.ByName("StreamUser")),
		connect.WithHandlerOptions(opts...),
	)
	return "/identity.v1.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceGetMeProcedure:
			userServiceGetMeHandler.ServeHTTP(w, r)
		case UserServiceGetCurrentUserProcedure:
			userServiceGetCurrentUserHandler.ServeHTTP(w, r)
		case UserServiceGetUserProcedure:
			userServiceGetUserHandler.ServeHTTP(w, r)
		case UserServiceUpdateMeProcedure:
			userServiceUpdateMeHandler.ServeHTTP(w, r)
		case UserServiceUpdateProcedure:
			userServiceUpdateHandler.ServeHTTP(w, r)
		case UserServiceRequestDeleteUserProcedure:
			userServiceRequestDeleteUserHandler.ServeHTTP(w, r)
		case UserServiceDeleteUserProcedure:
			userServiceDeleteUserHandler.ServeHTTP(w, r)
		case UserServiceChangePasswordProcedure:
			userServiceChangePasswordHandler.ServeHTTP(w, r)
		case UserServiceStreamUserProcedure:
			userServiceStreamUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) GetMe(context.Context, *connect.Request[v1.GetMeRequest]) (*connect.Response[v1.GetMeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.UserService.GetMe is not implemented"))
}

func (UnimplementedUserServiceHandler) GetCurrentUser(context.Context, *connect.Request[v1.GetCurrentUserRequest]) (*connect.Response[v1.GetCurrentUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.UserService.GetCurrentUser is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.UserService.GetUser is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateMe(context.Context, *connect.Request[v1.UpdateMeRequest]) (*connect.Response[v1.UpdateMeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.UserService.UpdateMe is not implemented"))
}

func (UnimplementedUserServiceHandler) Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.UserService.Update is not implemented"))
}

func (UnimplementedUserServiceHandler) RequestDeleteUser(context.Context, *connect.Request[v1.RequestDeleteUserRequest]) (*connect.Response[v1.RequestDeleteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.UserService.RequestDeleteUser is not implemented"))
}

func (UnimplementedUserServiceHandler) DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.UserService.DeleteUser is not implemented"))
}

func (UnimplementedUserServiceHandler) ChangePassword(context.Context, *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[v1.ChangePasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.UserService.ChangePassword is not implemented"))
}

func (UnimplementedUserServiceHandler) StreamUser(context.Context, *connect.Request[v1.StreamUserRequest], *connect.ServerStream[v1.StreamUserResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.UserService.StreamUser is not implemented"))
}
