// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: identity/v1/permission.proto

package identityv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/karibu-cap/sabitou/protos/gen/go/rpc/identity/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PermissionServiceName is the fully-qualified name of the PermissionService service.
	PermissionServiceName = "identity.v1.PermissionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PermissionServiceCreateBusinessPermissionProcedure is the fully-qualified name of the
	// PermissionService's CreateBusinessPermission RPC.
	PermissionServiceCreateBusinessPermissionProcedure = "/identity.v1.PermissionService/CreateBusinessPermission"
	// PermissionServiceUpdateBusinessPermissionProcedure is the fully-qualified name of the
	// PermissionService's UpdateBusinessPermission RPC.
	PermissionServiceUpdateBusinessPermissionProcedure = "/identity.v1.PermissionService/UpdateBusinessPermission"
	// PermissionServiceDeleteBusinessPermissionProcedure is the fully-qualified name of the
	// PermissionService's DeleteBusinessPermission RPC.
	PermissionServiceDeleteBusinessPermissionProcedure = "/identity.v1.PermissionService/DeleteBusinessPermission"
	// PermissionServiceCreateStorePermissionProcedure is the fully-qualified name of the
	// PermissionService's CreateStorePermission RPC.
	PermissionServiceCreateStorePermissionProcedure = "/identity.v1.PermissionService/CreateStorePermission"
	// PermissionServiceUpdateStorePermissionProcedure is the fully-qualified name of the
	// PermissionService's UpdateStorePermission RPC.
	PermissionServiceUpdateStorePermissionProcedure = "/identity.v1.PermissionService/UpdateStorePermission"
	// PermissionServiceDeleteStorePermissionProcedure is the fully-qualified name of the
	// PermissionService's DeleteStorePermission RPC.
	PermissionServiceDeleteStorePermissionProcedure = "/identity.v1.PermissionService/DeleteStorePermission"
	// PermissionServiceCheckBusinessPermissionProcedure is the fully-qualified name of the
	// PermissionService's CheckBusinessPermission RPC.
	PermissionServiceCheckBusinessPermissionProcedure = "/identity.v1.PermissionService/CheckBusinessPermission"
	// PermissionServiceCheckStorePermissionProcedure is the fully-qualified name of the
	// PermissionService's CheckStorePermission RPC.
	PermissionServiceCheckStorePermissionProcedure = "/identity.v1.PermissionService/CheckStorePermission"
)

// PermissionServiceClient is a client for the identity.v1.PermissionService service.
type PermissionServiceClient interface {
	// Creates a new business permission.
	CreateBusinessPermission(context.Context, *connect.Request[v1.CreateBusinessPermissionRequest]) (*connect.Response[v1.CreateBusinessPermissionResponse], error)
	// Updates a business permission.
	UpdateBusinessPermission(context.Context, *connect.Request[v1.UpdateBusinessPermissionRequest]) (*connect.Response[v1.UpdateBusinessPermissionResponse], error)
	// Deletes a business permission.
	DeleteBusinessPermission(context.Context, *connect.Request[v1.DeleteBusinessPermissionRequest]) (*connect.Response[v1.DeleteBusinessPermissionResponse], error)
	// Creates a new store permission.
	CreateStorePermission(context.Context, *connect.Request[v1.CreateStorePermissionRequest]) (*connect.Response[v1.CreateStorePermissionResponse], error)
	// Updates a store permission.
	UpdateStorePermission(context.Context, *connect.Request[v1.UpdateStorePermissionRequest]) (*connect.Response[v1.UpdateStorePermissionResponse], error)
	// Deletes a store permission.
	DeleteStorePermission(context.Context, *connect.Request[v1.DeleteStorePermissionRequest]) (*connect.Response[v1.DeleteStorePermissionResponse], error)
	// Checks if a member has a business permission.
	CheckBusinessPermission(context.Context, *connect.Request[v1.CheckBusinessPermissionRequest]) (*connect.Response[v1.CheckBusinessPermissionResponse], error)
	// Checks if a member has a store permission.
	CheckStorePermission(context.Context, *connect.Request[v1.CheckStorePermissionRequest]) (*connect.Response[v1.CheckStorePermissionResponse], error)
}

// NewPermissionServiceClient constructs a client for the identity.v1.PermissionService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPermissionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PermissionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	permissionServiceMethods := v1.File_identity_v1_permission_proto.Services().ByName("PermissionService").Methods()
	return &permissionServiceClient{
		createBusinessPermission: connect.NewClient[v1.CreateBusinessPermissionRequest, v1.CreateBusinessPermissionResponse](
			httpClient,
			baseURL+PermissionServiceCreateBusinessPermissionProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("CreateBusinessPermission")),
			connect.WithClientOptions(opts...),
		),
		updateBusinessPermission: connect.NewClient[v1.UpdateBusinessPermissionRequest, v1.UpdateBusinessPermissionResponse](
			httpClient,
			baseURL+PermissionServiceUpdateBusinessPermissionProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("UpdateBusinessPermission")),
			connect.WithClientOptions(opts...),
		),
		deleteBusinessPermission: connect.NewClient[v1.DeleteBusinessPermissionRequest, v1.DeleteBusinessPermissionResponse](
			httpClient,
			baseURL+PermissionServiceDeleteBusinessPermissionProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("DeleteBusinessPermission")),
			connect.WithClientOptions(opts...),
		),
		createStorePermission: connect.NewClient[v1.CreateStorePermissionRequest, v1.CreateStorePermissionResponse](
			httpClient,
			baseURL+PermissionServiceCreateStorePermissionProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("CreateStorePermission")),
			connect.WithClientOptions(opts...),
		),
		updateStorePermission: connect.NewClient[v1.UpdateStorePermissionRequest, v1.UpdateStorePermissionResponse](
			httpClient,
			baseURL+PermissionServiceUpdateStorePermissionProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("UpdateStorePermission")),
			connect.WithClientOptions(opts...),
		),
		deleteStorePermission: connect.NewClient[v1.DeleteStorePermissionRequest, v1.DeleteStorePermissionResponse](
			httpClient,
			baseURL+PermissionServiceDeleteStorePermissionProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("DeleteStorePermission")),
			connect.WithClientOptions(opts...),
		),
		checkBusinessPermission: connect.NewClient[v1.CheckBusinessPermissionRequest, v1.CheckBusinessPermissionResponse](
			httpClient,
			baseURL+PermissionServiceCheckBusinessPermissionProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("CheckBusinessPermission")),
			connect.WithClientOptions(opts...),
		),
		checkStorePermission: connect.NewClient[v1.CheckStorePermissionRequest, v1.CheckStorePermissionResponse](
			httpClient,
			baseURL+PermissionServiceCheckStorePermissionProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("CheckStorePermission")),
			connect.WithClientOptions(opts...),
		),
	}
}

// permissionServiceClient implements PermissionServiceClient.
type permissionServiceClient struct {
	createBusinessPermission *connect.Client[v1.CreateBusinessPermissionRequest, v1.CreateBusinessPermissionResponse]
	updateBusinessPermission *connect.Client[v1.UpdateBusinessPermissionRequest, v1.UpdateBusinessPermissionResponse]
	deleteBusinessPermission *connect.Client[v1.DeleteBusinessPermissionRequest, v1.DeleteBusinessPermissionResponse]
	createStorePermission    *connect.Client[v1.CreateStorePermissionRequest, v1.CreateStorePermissionResponse]
	updateStorePermission    *connect.Client[v1.UpdateStorePermissionRequest, v1.UpdateStorePermissionResponse]
	deleteStorePermission    *connect.Client[v1.DeleteStorePermissionRequest, v1.DeleteStorePermissionResponse]
	checkBusinessPermission  *connect.Client[v1.CheckBusinessPermissionRequest, v1.CheckBusinessPermissionResponse]
	checkStorePermission     *connect.Client[v1.CheckStorePermissionRequest, v1.CheckStorePermissionResponse]
}

// CreateBusinessPermission calls identity.v1.PermissionService.CreateBusinessPermission.
func (c *permissionServiceClient) CreateBusinessPermission(ctx context.Context, req *connect.Request[v1.CreateBusinessPermissionRequest]) (*connect.Response[v1.CreateBusinessPermissionResponse], error) {
	return c.createBusinessPermission.CallUnary(ctx, req)
}

// UpdateBusinessPermission calls identity.v1.PermissionService.UpdateBusinessPermission.
func (c *permissionServiceClient) UpdateBusinessPermission(ctx context.Context, req *connect.Request[v1.UpdateBusinessPermissionRequest]) (*connect.Response[v1.UpdateBusinessPermissionResponse], error) {
	return c.updateBusinessPermission.CallUnary(ctx, req)
}

// DeleteBusinessPermission calls identity.v1.PermissionService.DeleteBusinessPermission.
func (c *permissionServiceClient) DeleteBusinessPermission(ctx context.Context, req *connect.Request[v1.DeleteBusinessPermissionRequest]) (*connect.Response[v1.DeleteBusinessPermissionResponse], error) {
	return c.deleteBusinessPermission.CallUnary(ctx, req)
}

// CreateStorePermission calls identity.v1.PermissionService.CreateStorePermission.
func (c *permissionServiceClient) CreateStorePermission(ctx context.Context, req *connect.Request[v1.CreateStorePermissionRequest]) (*connect.Response[v1.CreateStorePermissionResponse], error) {
	return c.createStorePermission.CallUnary(ctx, req)
}

// UpdateStorePermission calls identity.v1.PermissionService.UpdateStorePermission.
func (c *permissionServiceClient) UpdateStorePermission(ctx context.Context, req *connect.Request[v1.UpdateStorePermissionRequest]) (*connect.Response[v1.UpdateStorePermissionResponse], error) {
	return c.updateStorePermission.CallUnary(ctx, req)
}

// DeleteStorePermission calls identity.v1.PermissionService.DeleteStorePermission.
func (c *permissionServiceClient) DeleteStorePermission(ctx context.Context, req *connect.Request[v1.DeleteStorePermissionRequest]) (*connect.Response[v1.DeleteStorePermissionResponse], error) {
	return c.deleteStorePermission.CallUnary(ctx, req)
}

// CheckBusinessPermission calls identity.v1.PermissionService.CheckBusinessPermission.
func (c *permissionServiceClient) CheckBusinessPermission(ctx context.Context, req *connect.Request[v1.CheckBusinessPermissionRequest]) (*connect.Response[v1.CheckBusinessPermissionResponse], error) {
	return c.checkBusinessPermission.CallUnary(ctx, req)
}

// CheckStorePermission calls identity.v1.PermissionService.CheckStorePermission.
func (c *permissionServiceClient) CheckStorePermission(ctx context.Context, req *connect.Request[v1.CheckStorePermissionRequest]) (*connect.Response[v1.CheckStorePermissionResponse], error) {
	return c.checkStorePermission.CallUnary(ctx, req)
}

// PermissionServiceHandler is an implementation of the identity.v1.PermissionService service.
type PermissionServiceHandler interface {
	// Creates a new business permission.
	CreateBusinessPermission(context.Context, *connect.Request[v1.CreateBusinessPermissionRequest]) (*connect.Response[v1.CreateBusinessPermissionResponse], error)
	// Updates a business permission.
	UpdateBusinessPermission(context.Context, *connect.Request[v1.UpdateBusinessPermissionRequest]) (*connect.Response[v1.UpdateBusinessPermissionResponse], error)
	// Deletes a business permission.
	DeleteBusinessPermission(context.Context, *connect.Request[v1.DeleteBusinessPermissionRequest]) (*connect.Response[v1.DeleteBusinessPermissionResponse], error)
	// Creates a new store permission.
	CreateStorePermission(context.Context, *connect.Request[v1.CreateStorePermissionRequest]) (*connect.Response[v1.CreateStorePermissionResponse], error)
	// Updates a store permission.
	UpdateStorePermission(context.Context, *connect.Request[v1.UpdateStorePermissionRequest]) (*connect.Response[v1.UpdateStorePermissionResponse], error)
	// Deletes a store permission.
	DeleteStorePermission(context.Context, *connect.Request[v1.DeleteStorePermissionRequest]) (*connect.Response[v1.DeleteStorePermissionResponse], error)
	// Checks if a member has a business permission.
	CheckBusinessPermission(context.Context, *connect.Request[v1.CheckBusinessPermissionRequest]) (*connect.Response[v1.CheckBusinessPermissionResponse], error)
	// Checks if a member has a store permission.
	CheckStorePermission(context.Context, *connect.Request[v1.CheckStorePermissionRequest]) (*connect.Response[v1.CheckStorePermissionResponse], error)
}

// NewPermissionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPermissionServiceHandler(svc PermissionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	permissionServiceMethods := v1.File_identity_v1_permission_proto.Services().ByName("PermissionService").Methods()
	permissionServiceCreateBusinessPermissionHandler := connect.NewUnaryHandler(
		PermissionServiceCreateBusinessPermissionProcedure,
		svc.CreateBusinessPermission,
		connect.WithSchema(permissionServiceMethods.ByName("CreateBusinessPermission")),
		connect.WithHandlerOptions(opts...),
	)
	permissionServiceUpdateBusinessPermissionHandler := connect.NewUnaryHandler(
		PermissionServiceUpdateBusinessPermissionProcedure,
		svc.UpdateBusinessPermission,
		connect.WithSchema(permissionServiceMethods.ByName("UpdateBusinessPermission")),
		connect.WithHandlerOptions(opts...),
	)
	permissionServiceDeleteBusinessPermissionHandler := connect.NewUnaryHandler(
		PermissionServiceDeleteBusinessPermissionProcedure,
		svc.DeleteBusinessPermission,
		connect.WithSchema(permissionServiceMethods.ByName("DeleteBusinessPermission")),
		connect.WithHandlerOptions(opts...),
	)
	permissionServiceCreateStorePermissionHandler := connect.NewUnaryHandler(
		PermissionServiceCreateStorePermissionProcedure,
		svc.CreateStorePermission,
		connect.WithSchema(permissionServiceMethods.ByName("CreateStorePermission")),
		connect.WithHandlerOptions(opts...),
	)
	permissionServiceUpdateStorePermissionHandler := connect.NewUnaryHandler(
		PermissionServiceUpdateStorePermissionProcedure,
		svc.UpdateStorePermission,
		connect.WithSchema(permissionServiceMethods.ByName("UpdateStorePermission")),
		connect.WithHandlerOptions(opts...),
	)
	permissionServiceDeleteStorePermissionHandler := connect.NewUnaryHandler(
		PermissionServiceDeleteStorePermissionProcedure,
		svc.DeleteStorePermission,
		connect.WithSchema(permissionServiceMethods.ByName("DeleteStorePermission")),
		connect.WithHandlerOptions(opts...),
	)
	permissionServiceCheckBusinessPermissionHandler := connect.NewUnaryHandler(
		PermissionServiceCheckBusinessPermissionProcedure,
		svc.CheckBusinessPermission,
		connect.WithSchema(permissionServiceMethods.ByName("CheckBusinessPermission")),
		connect.WithHandlerOptions(opts...),
	)
	permissionServiceCheckStorePermissionHandler := connect.NewUnaryHandler(
		PermissionServiceCheckStorePermissionProcedure,
		svc.CheckStorePermission,
		connect.WithSchema(permissionServiceMethods.ByName("CheckStorePermission")),
		connect.WithHandlerOptions(opts...),
	)
	return "/identity.v1.PermissionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PermissionServiceCreateBusinessPermissionProcedure:
			permissionServiceCreateBusinessPermissionHandler.ServeHTTP(w, r)
		case PermissionServiceUpdateBusinessPermissionProcedure:
			permissionServiceUpdateBusinessPermissionHandler.ServeHTTP(w, r)
		case PermissionServiceDeleteBusinessPermissionProcedure:
			permissionServiceDeleteBusinessPermissionHandler.ServeHTTP(w, r)
		case PermissionServiceCreateStorePermissionProcedure:
			permissionServiceCreateStorePermissionHandler.ServeHTTP(w, r)
		case PermissionServiceUpdateStorePermissionProcedure:
			permissionServiceUpdateStorePermissionHandler.ServeHTTP(w, r)
		case PermissionServiceDeleteStorePermissionProcedure:
			permissionServiceDeleteStorePermissionHandler.ServeHTTP(w, r)
		case PermissionServiceCheckBusinessPermissionProcedure:
			permissionServiceCheckBusinessPermissionHandler.ServeHTTP(w, r)
		case PermissionServiceCheckStorePermissionProcedure:
			permissionServiceCheckStorePermissionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPermissionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPermissionServiceHandler struct{}

func (UnimplementedPermissionServiceHandler) CreateBusinessPermission(context.Context, *connect.Request[v1.CreateBusinessPermissionRequest]) (*connect.Response[v1.CreateBusinessPermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.PermissionService.CreateBusinessPermission is not implemented"))
}

func (UnimplementedPermissionServiceHandler) UpdateBusinessPermission(context.Context, *connect.Request[v1.UpdateBusinessPermissionRequest]) (*connect.Response[v1.UpdateBusinessPermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.PermissionService.UpdateBusinessPermission is not implemented"))
}

func (UnimplementedPermissionServiceHandler) DeleteBusinessPermission(context.Context, *connect.Request[v1.DeleteBusinessPermissionRequest]) (*connect.Response[v1.DeleteBusinessPermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.PermissionService.DeleteBusinessPermission is not implemented"))
}

func (UnimplementedPermissionServiceHandler) CreateStorePermission(context.Context, *connect.Request[v1.CreateStorePermissionRequest]) (*connect.Response[v1.CreateStorePermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.PermissionService.CreateStorePermission is not implemented"))
}

func (UnimplementedPermissionServiceHandler) UpdateStorePermission(context.Context, *connect.Request[v1.UpdateStorePermissionRequest]) (*connect.Response[v1.UpdateStorePermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.PermissionService.UpdateStorePermission is not implemented"))
}

func (UnimplementedPermissionServiceHandler) DeleteStorePermission(context.Context, *connect.Request[v1.DeleteStorePermissionRequest]) (*connect.Response[v1.DeleteStorePermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.PermissionService.DeleteStorePermission is not implemented"))
}

func (UnimplementedPermissionServiceHandler) CheckBusinessPermission(context.Context, *connect.Request[v1.CheckBusinessPermissionRequest]) (*connect.Response[v1.CheckBusinessPermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.PermissionService.CheckBusinessPermission is not implemented"))
}

func (UnimplementedPermissionServiceHandler) CheckStorePermission(context.Context, *connect.Request[v1.CheckStorePermissionRequest]) (*connect.Response[v1.CheckStorePermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.PermissionService.CheckStorePermission is not implemented"))
}
