// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: identity/v1/permission.proto

package identityv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/karibu-cap/sabitou/protos/gen/go/rpc/identity/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PermissionServiceName is the fully-qualified name of the PermissionService service.
	PermissionServiceName = "identity.v1.PermissionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PermissionServiceCreatePermissionsGroupProcedure is the fully-qualified name of the
	// PermissionService's CreatePermissionsGroup RPC.
	PermissionServiceCreatePermissionsGroupProcedure = "/identity.v1.PermissionService/CreatePermissionsGroup"
	// PermissionServiceGetPermissionsGroupProcedure is the fully-qualified name of the
	// PermissionService's GetPermissionsGroup RPC.
	PermissionServiceGetPermissionsGroupProcedure = "/identity.v1.PermissionService/GetPermissionsGroup"
	// PermissionServiceUpdatePermissionsGroupProcedure is the fully-qualified name of the
	// PermissionService's UpdatePermissionsGroup RPC.
	PermissionServiceUpdatePermissionsGroupProcedure = "/identity.v1.PermissionService/UpdatePermissionsGroup"
	// PermissionServiceDeletePermissionsGroupProcedure is the fully-qualified name of the
	// PermissionService's DeletePermissionsGroup RPC.
	PermissionServiceDeletePermissionsGroupProcedure = "/identity.v1.PermissionService/DeletePermissionsGroup"
	// PermissionServiceUpdateMemberPermissionsProcedure is the fully-qualified name of the
	// PermissionService's UpdateMemberPermissions RPC.
	PermissionServiceUpdateMemberPermissionsProcedure = "/identity.v1.PermissionService/UpdateMemberPermissions"
	// PermissionServiceGetBusinessPermissionsGroupsProcedure is the fully-qualified name of the
	// PermissionService's GetBusinessPermissionsGroups RPC.
	PermissionServiceGetBusinessPermissionsGroupsProcedure = "/identity.v1.PermissionService/GetBusinessPermissionsGroups"
	// PermissionServiceCheckPermissionProcedure is the fully-qualified name of the PermissionService's
	// CheckPermission RPC.
	PermissionServiceCheckPermissionProcedure = "/identity.v1.PermissionService/CheckPermission"
	// PermissionServiceStreamBusinessPermissionsGroupsProcedure is the fully-qualified name of the
	// PermissionService's StreamBusinessPermissionsGroups RPC.
	PermissionServiceStreamBusinessPermissionsGroupsProcedure = "/identity.v1.PermissionService/StreamBusinessPermissionsGroups"
)

// PermissionServiceClient is a client for the identity.v1.PermissionService service.
type PermissionServiceClient interface {
	// Creates a new permission group.
	CreatePermissionsGroup(context.Context, *connect.Request[v1.CreatePermissionsGroupRequest]) (*connect.Response[v1.CreatePermissionsGroupResponse], error)
	// Gets a permission group by id.
	GetPermissionsGroup(context.Context, *connect.Request[v1.GetPermissionsGroupRequest]) (*connect.Response[v1.GetPermissionsGroupResponse], error)
	// Updates a permission group.
	UpdatePermissionsGroup(context.Context, *connect.Request[v1.UpdatePermissionsGroupRequest]) (*connect.Response[v1.UpdatePermissionsGroupResponse], error)
	// Deletes a permission group.
	DeletePermissionsGroup(context.Context, *connect.Request[v1.DeletePermissionsGroupRequest]) (*connect.Response[v1.DeletePermissionsGroupResponse], error)
	// Update the member permissions on the provided business.
	UpdateMemberPermissions(context.Context, *connect.Request[v1.UpdateMemberPermissionsRequest]) (*connect.Response[v1.UpdateMemberPermissionsResponse], error)
	// Gets the permission groups of the business.
	GetBusinessPermissionsGroups(context.Context, *connect.Request[v1.GetBusinessPermissionsGroupsRequest]) (*connect.Response[v1.GetBusinessPermissionsGroupsResponse], error)
	// Checks if the member has the provided permission for the provided resource.
	CheckPermission(context.Context, *connect.Request[v1.CheckPermissionRequest]) (*connect.Response[v1.CheckPermissionResponse], error)
	// Stream the permission groups of the business with real-time updates.
	StreamBusinessPermissionsGroups(context.Context, *connect.Request[v1.StreamBusinessPermissionsGroupsRequest]) (*connect.ServerStreamForClient[v1.StreamBusinessPermissionsGroupsResponse], error)
}

// NewPermissionServiceClient constructs a client for the identity.v1.PermissionService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPermissionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PermissionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	permissionServiceMethods := v1.File_identity_v1_permission_proto.Services().ByName("PermissionService").Methods()
	return &permissionServiceClient{
		createPermissionsGroup: connect.NewClient[v1.CreatePermissionsGroupRequest, v1.CreatePermissionsGroupResponse](
			httpClient,
			baseURL+PermissionServiceCreatePermissionsGroupProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("CreatePermissionsGroup")),
			connect.WithClientOptions(opts...),
		),
		getPermissionsGroup: connect.NewClient[v1.GetPermissionsGroupRequest, v1.GetPermissionsGroupResponse](
			httpClient,
			baseURL+PermissionServiceGetPermissionsGroupProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("GetPermissionsGroup")),
			connect.WithClientOptions(opts...),
		),
		updatePermissionsGroup: connect.NewClient[v1.UpdatePermissionsGroupRequest, v1.UpdatePermissionsGroupResponse](
			httpClient,
			baseURL+PermissionServiceUpdatePermissionsGroupProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("UpdatePermissionsGroup")),
			connect.WithClientOptions(opts...),
		),
		deletePermissionsGroup: connect.NewClient[v1.DeletePermissionsGroupRequest, v1.DeletePermissionsGroupResponse](
			httpClient,
			baseURL+PermissionServiceDeletePermissionsGroupProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("DeletePermissionsGroup")),
			connect.WithClientOptions(opts...),
		),
		updateMemberPermissions: connect.NewClient[v1.UpdateMemberPermissionsRequest, v1.UpdateMemberPermissionsResponse](
			httpClient,
			baseURL+PermissionServiceUpdateMemberPermissionsProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("UpdateMemberPermissions")),
			connect.WithClientOptions(opts...),
		),
		getBusinessPermissionsGroups: connect.NewClient[v1.GetBusinessPermissionsGroupsRequest, v1.GetBusinessPermissionsGroupsResponse](
			httpClient,
			baseURL+PermissionServiceGetBusinessPermissionsGroupsProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("GetBusinessPermissionsGroups")),
			connect.WithClientOptions(opts...),
		),
		checkPermission: connect.NewClient[v1.CheckPermissionRequest, v1.CheckPermissionResponse](
			httpClient,
			baseURL+PermissionServiceCheckPermissionProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("CheckPermission")),
			connect.WithClientOptions(opts...),
		),
		streamBusinessPermissionsGroups: connect.NewClient[v1.StreamBusinessPermissionsGroupsRequest, v1.StreamBusinessPermissionsGroupsResponse](
			httpClient,
			baseURL+PermissionServiceStreamBusinessPermissionsGroupsProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("StreamBusinessPermissionsGroups")),
			connect.WithClientOptions(opts...),
		),
	}
}

// permissionServiceClient implements PermissionServiceClient.
type permissionServiceClient struct {
	createPermissionsGroup          *connect.Client[v1.CreatePermissionsGroupRequest, v1.CreatePermissionsGroupResponse]
	getPermissionsGroup             *connect.Client[v1.GetPermissionsGroupRequest, v1.GetPermissionsGroupResponse]
	updatePermissionsGroup          *connect.Client[v1.UpdatePermissionsGroupRequest, v1.UpdatePermissionsGroupResponse]
	deletePermissionsGroup          *connect.Client[v1.DeletePermissionsGroupRequest, v1.DeletePermissionsGroupResponse]
	updateMemberPermissions         *connect.Client[v1.UpdateMemberPermissionsRequest, v1.UpdateMemberPermissionsResponse]
	getBusinessPermissionsGroups    *connect.Client[v1.GetBusinessPermissionsGroupsRequest, v1.GetBusinessPermissionsGroupsResponse]
	checkPermission                 *connect.Client[v1.CheckPermissionRequest, v1.CheckPermissionResponse]
	streamBusinessPermissionsGroups *connect.Client[v1.StreamBusinessPermissionsGroupsRequest, v1.StreamBusinessPermissionsGroupsResponse]
}

// CreatePermissionsGroup calls identity.v1.PermissionService.CreatePermissionsGroup.
func (c *permissionServiceClient) CreatePermissionsGroup(ctx context.Context, req *connect.Request[v1.CreatePermissionsGroupRequest]) (*connect.Response[v1.CreatePermissionsGroupResponse], error) {
	return c.createPermissionsGroup.CallUnary(ctx, req)
}

// GetPermissionsGroup calls identity.v1.PermissionService.GetPermissionsGroup.
func (c *permissionServiceClient) GetPermissionsGroup(ctx context.Context, req *connect.Request[v1.GetPermissionsGroupRequest]) (*connect.Response[v1.GetPermissionsGroupResponse], error) {
	return c.getPermissionsGroup.CallUnary(ctx, req)
}

// UpdatePermissionsGroup calls identity.v1.PermissionService.UpdatePermissionsGroup.
func (c *permissionServiceClient) UpdatePermissionsGroup(ctx context.Context, req *connect.Request[v1.UpdatePermissionsGroupRequest]) (*connect.Response[v1.UpdatePermissionsGroupResponse], error) {
	return c.updatePermissionsGroup.CallUnary(ctx, req)
}

// DeletePermissionsGroup calls identity.v1.PermissionService.DeletePermissionsGroup.
func (c *permissionServiceClient) DeletePermissionsGroup(ctx context.Context, req *connect.Request[v1.DeletePermissionsGroupRequest]) (*connect.Response[v1.DeletePermissionsGroupResponse], error) {
	return c.deletePermissionsGroup.CallUnary(ctx, req)
}

// UpdateMemberPermissions calls identity.v1.PermissionService.UpdateMemberPermissions.
func (c *permissionServiceClient) UpdateMemberPermissions(ctx context.Context, req *connect.Request[v1.UpdateMemberPermissionsRequest]) (*connect.Response[v1.UpdateMemberPermissionsResponse], error) {
	return c.updateMemberPermissions.CallUnary(ctx, req)
}

// GetBusinessPermissionsGroups calls identity.v1.PermissionService.GetBusinessPermissionsGroups.
func (c *permissionServiceClient) GetBusinessPermissionsGroups(ctx context.Context, req *connect.Request[v1.GetBusinessPermissionsGroupsRequest]) (*connect.Response[v1.GetBusinessPermissionsGroupsResponse], error) {
	return c.getBusinessPermissionsGroups.CallUnary(ctx, req)
}

// CheckPermission calls identity.v1.PermissionService.CheckPermission.
func (c *permissionServiceClient) CheckPermission(ctx context.Context, req *connect.Request[v1.CheckPermissionRequest]) (*connect.Response[v1.CheckPermissionResponse], error) {
	return c.checkPermission.CallUnary(ctx, req)
}

// StreamBusinessPermissionsGroups calls
// identity.v1.PermissionService.StreamBusinessPermissionsGroups.
func (c *permissionServiceClient) StreamBusinessPermissionsGroups(ctx context.Context, req *connect.Request[v1.StreamBusinessPermissionsGroupsRequest]) (*connect.ServerStreamForClient[v1.StreamBusinessPermissionsGroupsResponse], error) {
	return c.streamBusinessPermissionsGroups.CallServerStream(ctx, req)
}

// PermissionServiceHandler is an implementation of the identity.v1.PermissionService service.
type PermissionServiceHandler interface {
	// Creates a new permission group.
	CreatePermissionsGroup(context.Context, *connect.Request[v1.CreatePermissionsGroupRequest]) (*connect.Response[v1.CreatePermissionsGroupResponse], error)
	// Gets a permission group by id.
	GetPermissionsGroup(context.Context, *connect.Request[v1.GetPermissionsGroupRequest]) (*connect.Response[v1.GetPermissionsGroupResponse], error)
	// Updates a permission group.
	UpdatePermissionsGroup(context.Context, *connect.Request[v1.UpdatePermissionsGroupRequest]) (*connect.Response[v1.UpdatePermissionsGroupResponse], error)
	// Deletes a permission group.
	DeletePermissionsGroup(context.Context, *connect.Request[v1.DeletePermissionsGroupRequest]) (*connect.Response[v1.DeletePermissionsGroupResponse], error)
	// Update the member permissions on the provided business.
	UpdateMemberPermissions(context.Context, *connect.Request[v1.UpdateMemberPermissionsRequest]) (*connect.Response[v1.UpdateMemberPermissionsResponse], error)
	// Gets the permission groups of the business.
	GetBusinessPermissionsGroups(context.Context, *connect.Request[v1.GetBusinessPermissionsGroupsRequest]) (*connect.Response[v1.GetBusinessPermissionsGroupsResponse], error)
	// Checks if the member has the provided permission for the provided resource.
	CheckPermission(context.Context, *connect.Request[v1.CheckPermissionRequest]) (*connect.Response[v1.CheckPermissionResponse], error)
	// Stream the permission groups of the business with real-time updates.
	StreamBusinessPermissionsGroups(context.Context, *connect.Request[v1.StreamBusinessPermissionsGroupsRequest], *connect.ServerStream[v1.StreamBusinessPermissionsGroupsResponse]) error
}

// NewPermissionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPermissionServiceHandler(svc PermissionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	permissionServiceMethods := v1.File_identity_v1_permission_proto.Services().ByName("PermissionService").Methods()
	permissionServiceCreatePermissionsGroupHandler := connect.NewUnaryHandler(
		PermissionServiceCreatePermissionsGroupProcedure,
		svc.CreatePermissionsGroup,
		connect.WithSchema(permissionServiceMethods.ByName("CreatePermissionsGroup")),
		connect.WithHandlerOptions(opts...),
	)
	permissionServiceGetPermissionsGroupHandler := connect.NewUnaryHandler(
		PermissionServiceGetPermissionsGroupProcedure,
		svc.GetPermissionsGroup,
		connect.WithSchema(permissionServiceMethods.ByName("GetPermissionsGroup")),
		connect.WithHandlerOptions(opts...),
	)
	permissionServiceUpdatePermissionsGroupHandler := connect.NewUnaryHandler(
		PermissionServiceUpdatePermissionsGroupProcedure,
		svc.UpdatePermissionsGroup,
		connect.WithSchema(permissionServiceMethods.ByName("UpdatePermissionsGroup")),
		connect.WithHandlerOptions(opts...),
	)
	permissionServiceDeletePermissionsGroupHandler := connect.NewUnaryHandler(
		PermissionServiceDeletePermissionsGroupProcedure,
		svc.DeletePermissionsGroup,
		connect.WithSchema(permissionServiceMethods.ByName("DeletePermissionsGroup")),
		connect.WithHandlerOptions(opts...),
	)
	permissionServiceUpdateMemberPermissionsHandler := connect.NewUnaryHandler(
		PermissionServiceUpdateMemberPermissionsProcedure,
		svc.UpdateMemberPermissions,
		connect.WithSchema(permissionServiceMethods.ByName("UpdateMemberPermissions")),
		connect.WithHandlerOptions(opts...),
	)
	permissionServiceGetBusinessPermissionsGroupsHandler := connect.NewUnaryHandler(
		PermissionServiceGetBusinessPermissionsGroupsProcedure,
		svc.GetBusinessPermissionsGroups,
		connect.WithSchema(permissionServiceMethods.ByName("GetBusinessPermissionsGroups")),
		connect.WithHandlerOptions(opts...),
	)
	permissionServiceCheckPermissionHandler := connect.NewUnaryHandler(
		PermissionServiceCheckPermissionProcedure,
		svc.CheckPermission,
		connect.WithSchema(permissionServiceMethods.ByName("CheckPermission")),
		connect.WithHandlerOptions(opts...),
	)
	permissionServiceStreamBusinessPermissionsGroupsHandler := connect.NewServerStreamHandler(
		PermissionServiceStreamBusinessPermissionsGroupsProcedure,
		svc.StreamBusinessPermissionsGroups,
		connect.WithSchema(permissionServiceMethods.ByName("StreamBusinessPermissionsGroups")),
		connect.WithHandlerOptions(opts...),
	)
	return "/identity.v1.PermissionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PermissionServiceCreatePermissionsGroupProcedure:
			permissionServiceCreatePermissionsGroupHandler.ServeHTTP(w, r)
		case PermissionServiceGetPermissionsGroupProcedure:
			permissionServiceGetPermissionsGroupHandler.ServeHTTP(w, r)
		case PermissionServiceUpdatePermissionsGroupProcedure:
			permissionServiceUpdatePermissionsGroupHandler.ServeHTTP(w, r)
		case PermissionServiceDeletePermissionsGroupProcedure:
			permissionServiceDeletePermissionsGroupHandler.ServeHTTP(w, r)
		case PermissionServiceUpdateMemberPermissionsProcedure:
			permissionServiceUpdateMemberPermissionsHandler.ServeHTTP(w, r)
		case PermissionServiceGetBusinessPermissionsGroupsProcedure:
			permissionServiceGetBusinessPermissionsGroupsHandler.ServeHTTP(w, r)
		case PermissionServiceCheckPermissionProcedure:
			permissionServiceCheckPermissionHandler.ServeHTTP(w, r)
		case PermissionServiceStreamBusinessPermissionsGroupsProcedure:
			permissionServiceStreamBusinessPermissionsGroupsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPermissionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPermissionServiceHandler struct{}

func (UnimplementedPermissionServiceHandler) CreatePermissionsGroup(context.Context, *connect.Request[v1.CreatePermissionsGroupRequest]) (*connect.Response[v1.CreatePermissionsGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.PermissionService.CreatePermissionsGroup is not implemented"))
}

func (UnimplementedPermissionServiceHandler) GetPermissionsGroup(context.Context, *connect.Request[v1.GetPermissionsGroupRequest]) (*connect.Response[v1.GetPermissionsGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.PermissionService.GetPermissionsGroup is not implemented"))
}

func (UnimplementedPermissionServiceHandler) UpdatePermissionsGroup(context.Context, *connect.Request[v1.UpdatePermissionsGroupRequest]) (*connect.Response[v1.UpdatePermissionsGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.PermissionService.UpdatePermissionsGroup is not implemented"))
}

func (UnimplementedPermissionServiceHandler) DeletePermissionsGroup(context.Context, *connect.Request[v1.DeletePermissionsGroupRequest]) (*connect.Response[v1.DeletePermissionsGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.PermissionService.DeletePermissionsGroup is not implemented"))
}

func (UnimplementedPermissionServiceHandler) UpdateMemberPermissions(context.Context, *connect.Request[v1.UpdateMemberPermissionsRequest]) (*connect.Response[v1.UpdateMemberPermissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.PermissionService.UpdateMemberPermissions is not implemented"))
}

func (UnimplementedPermissionServiceHandler) GetBusinessPermissionsGroups(context.Context, *connect.Request[v1.GetBusinessPermissionsGroupsRequest]) (*connect.Response[v1.GetBusinessPermissionsGroupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.PermissionService.GetBusinessPermissionsGroups is not implemented"))
}

func (UnimplementedPermissionServiceHandler) CheckPermission(context.Context, *connect.Request[v1.CheckPermissionRequest]) (*connect.Response[v1.CheckPermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.PermissionService.CheckPermission is not implemented"))
}

func (UnimplementedPermissionServiceHandler) StreamBusinessPermissionsGroups(context.Context, *connect.Request[v1.StreamBusinessPermissionsGroupsRequest], *connect.ServerStream[v1.StreamBusinessPermissionsGroupsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.PermissionService.StreamBusinessPermissionsGroups is not implemented"))
}
