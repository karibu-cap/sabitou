// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: media/v1/media.proto

package mediav1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/karibu-cap/sabitou/protos/gen/go/media/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MediaServiceName is the fully-qualified name of the MediaService service.
	MediaServiceName = "media.v1.MediaService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MediaServiceGetMediasProcedure is the fully-qualified name of the MediaService's GetMedias RPC.
	MediaServiceGetMediasProcedure = "/media.v1.MediaService/GetMedias"
)

// MediaServiceClient is a client for the media.v1.MediaService service.
type MediaServiceClient interface {
	// Gets a media by id.
	GetMedias(context.Context, *connect.Request[v1.GetMediasRequest]) (*connect.Response[v1.GetMediasResponse], error)
}

// NewMediaServiceClient constructs a client for the media.v1.MediaService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMediaServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MediaServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	mediaServiceMethods := v1.File_media_v1_media_proto.Services().ByName("MediaService").Methods()
	return &mediaServiceClient{
		getMedias: connect.NewClient[v1.GetMediasRequest, v1.GetMediasResponse](
			httpClient,
			baseURL+MediaServiceGetMediasProcedure,
			connect.WithSchema(mediaServiceMethods.ByName("GetMedias")),
			connect.WithClientOptions(opts...),
		),
	}
}

// mediaServiceClient implements MediaServiceClient.
type mediaServiceClient struct {
	getMedias *connect.Client[v1.GetMediasRequest, v1.GetMediasResponse]
}

// GetMedias calls media.v1.MediaService.GetMedias.
func (c *mediaServiceClient) GetMedias(ctx context.Context, req *connect.Request[v1.GetMediasRequest]) (*connect.Response[v1.GetMediasResponse], error) {
	return c.getMedias.CallUnary(ctx, req)
}

// MediaServiceHandler is an implementation of the media.v1.MediaService service.
type MediaServiceHandler interface {
	// Gets a media by id.
	GetMedias(context.Context, *connect.Request[v1.GetMediasRequest]) (*connect.Response[v1.GetMediasResponse], error)
}

// NewMediaServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMediaServiceHandler(svc MediaServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mediaServiceMethods := v1.File_media_v1_media_proto.Services().ByName("MediaService").Methods()
	mediaServiceGetMediasHandler := connect.NewUnaryHandler(
		MediaServiceGetMediasProcedure,
		svc.GetMedias,
		connect.WithSchema(mediaServiceMethods.ByName("GetMedias")),
		connect.WithHandlerOptions(opts...),
	)
	return "/media.v1.MediaService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MediaServiceGetMediasProcedure:
			mediaServiceGetMediasHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMediaServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMediaServiceHandler struct{}

func (UnimplementedMediaServiceHandler) GetMedias(context.Context, *connect.Request[v1.GetMediasRequest]) (*connect.Response[v1.GetMediasResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("media.v1.MediaService.GetMedias is not implemented"))
}
