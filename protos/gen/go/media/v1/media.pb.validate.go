// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: media/v1/media.proto

package mediav1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Media with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Media) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Media with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MediaMultiError, or nil if none found.
func (m *Media) ValidateAll() error {
	return m.validate(true)
}

func (m *Media) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Type

	// no validation rules for Link

	// no validation rules for Meta

	// no validation rules for CreatedAt

	// no validation rules for LastAccessedAt

	if len(errors) > 0 {
		return MediaMultiError(errors)
	}

	return nil
}

// MediaMultiError is an error wrapping multiple validation errors returned by
// Media.ValidateAll() if the designated constraints aren't met.
type MediaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MediaMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MediaMultiError) AllErrors() []error { return m }

// MediaValidationError is the validation error returned by Media.Validate if
// the designated constraints aren't met.
type MediaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MediaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MediaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MediaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MediaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MediaValidationError) ErrorName() string { return "MediaValidationError" }

// Error satisfies the builtin error interface
func (e MediaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMedia.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MediaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MediaValidationError{}

// Validate checks the field values on GetMediasRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMediasRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMediasRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMediasRequestMultiError, or nil if none found.
func (m *GetMediasRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMediasRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetMediasRequestMultiError(errors)
	}

	return nil
}

// GetMediasRequestMultiError is an error wrapping multiple validation errors
// returned by GetMediasRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMediasRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMediasRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMediasRequestMultiError) AllErrors() []error { return m }

// GetMediasRequestValidationError is the validation error returned by
// GetMediasRequest.Validate if the designated constraints aren't met.
type GetMediasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMediasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMediasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMediasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMediasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMediasRequestValidationError) ErrorName() string { return "GetMediasRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetMediasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMediasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMediasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMediasRequestValidationError{}

// Validate checks the field values on GetMediasResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMediasResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMediasResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMediasResponseMultiError, or nil if none found.
func (m *GetMediasResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMediasResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMedia() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMediasResponseValidationError{
						field:  fmt.Sprintf("Media[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMediasResponseValidationError{
						field:  fmt.Sprintf("Media[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMediasResponseValidationError{
					field:  fmt.Sprintf("Media[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMediasResponseMultiError(errors)
	}

	return nil
}

// GetMediasResponseMultiError is an error wrapping multiple validation errors
// returned by GetMediasResponse.ValidateAll() if the designated constraints
// aren't met.
type GetMediasResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMediasResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMediasResponseMultiError) AllErrors() []error { return m }

// GetMediasResponseValidationError is the validation error returned by
// GetMediasResponse.Validate if the designated constraints aren't met.
type GetMediasResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMediasResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMediasResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMediasResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMediasResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMediasResponseValidationError) ErrorName() string {
	return "GetMediasResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMediasResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMediasResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMediasResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMediasResponseValidationError{}
