// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: identity/v1/permission.proto

package identityv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResourceActionType int32

const (
	ResourceActionType_RESOURCE_ACTION_TYPE_UNSPECIFIED ResourceActionType = 0
	// Can read the resource.
	ResourceActionType_RESOURCE_ACTION_TYPE_READ ResourceActionType = 1
	// Can read and (create or add) the resource.
	ResourceActionType_RESOURCE_ACTION_TYPE_ADD ResourceActionType = 2
	// Can read, create, update the resource.
	ResourceActionType_RESOURCE_ACTION_TYPE_UPDATE ResourceActionType = 3
	// Can read, create, update, delete the resource.
	ResourceActionType_RESOURCE_ACTION_TYPE_REMOVE ResourceActionType = 4
)

// Enum value maps for ResourceActionType.
var (
	ResourceActionType_name = map[int32]string{
		0: "RESOURCE_ACTION_TYPE_UNSPECIFIED",
		1: "RESOURCE_ACTION_TYPE_READ",
		2: "RESOURCE_ACTION_TYPE_ADD",
		3: "RESOURCE_ACTION_TYPE_UPDATE",
		4: "RESOURCE_ACTION_TYPE_REMOVE",
	}
	ResourceActionType_value = map[string]int32{
		"RESOURCE_ACTION_TYPE_UNSPECIFIED": 0,
		"RESOURCE_ACTION_TYPE_READ":        1,
		"RESOURCE_ACTION_TYPE_ADD":         2,
		"RESOURCE_ACTION_TYPE_UPDATE":      3,
		"RESOURCE_ACTION_TYPE_REMOVE":      4,
	}
)

func (x ResourceActionType) Enum() *ResourceActionType {
	p := new(ResourceActionType)
	*p = x
	return p
}

func (x ResourceActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_identity_v1_permission_proto_enumTypes[0].Descriptor()
}

func (ResourceActionType) Type() protoreflect.EnumType {
	return &file_identity_v1_permission_proto_enumTypes[0]
}

func (x ResourceActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceActionType.Descriptor instead.
func (ResourceActionType) EnumDescriptor() ([]byte, []int) {
	return file_identity_v1_permission_proto_rawDescGZIP(), []int{0}
}

type ResourceType int32

const (
	ResourceType_RESOURCE_TYPE_UNSPECIFIED       ResourceType = 0
	ResourceType_RESOURCE_TYPE_BUSINESS          ResourceType = 1
	ResourceType_RESOURCE_TYPE_BUSINESS_MEMBER   ResourceType = 2
	ResourceType_RESOURCE_TYPE_BUSINESS_CLIENT   ResourceType = 3
	ResourceType_RESOURCE_TYPE_BUSINESS_SUPPLIER ResourceType = 4
	ResourceType_RESOURCE_TYPE_STORE             ResourceType = 5
	ResourceType_RESOURCE_TYPE_INVOICE           ResourceType = 6
	ResourceType_RESOURCE_TYPE_STORE_ORDER       ResourceType = 7
	ResourceType_RESOURCE_TYPE_SUPPLIER_ORDER    ResourceType = 8
	ResourceType_RESOURCE_TYPE_PRODUCT           ResourceType = 9
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0: "RESOURCE_TYPE_UNSPECIFIED",
		1: "RESOURCE_TYPE_BUSINESS",
		2: "RESOURCE_TYPE_BUSINESS_MEMBER",
		3: "RESOURCE_TYPE_BUSINESS_CLIENT",
		4: "RESOURCE_TYPE_BUSINESS_SUPPLIER",
		5: "RESOURCE_TYPE_STORE",
		6: "RESOURCE_TYPE_INVOICE",
		7: "RESOURCE_TYPE_STORE_ORDER",
		8: "RESOURCE_TYPE_SUPPLIER_ORDER",
		9: "RESOURCE_TYPE_PRODUCT",
	}
	ResourceType_value = map[string]int32{
		"RESOURCE_TYPE_UNSPECIFIED":       0,
		"RESOURCE_TYPE_BUSINESS":          1,
		"RESOURCE_TYPE_BUSINESS_MEMBER":   2,
		"RESOURCE_TYPE_BUSINESS_CLIENT":   3,
		"RESOURCE_TYPE_BUSINESS_SUPPLIER": 4,
		"RESOURCE_TYPE_STORE":             5,
		"RESOURCE_TYPE_INVOICE":           6,
		"RESOURCE_TYPE_STORE_ORDER":       7,
		"RESOURCE_TYPE_SUPPLIER_ORDER":    8,
		"RESOURCE_TYPE_PRODUCT":           9,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_identity_v1_permission_proto_enumTypes[1].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_identity_v1_permission_proto_enumTypes[1]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_identity_v1_permission_proto_rawDescGZIP(), []int{1}
}

type Permission struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	ResourceType ResourceType           `protobuf:"varint,1,opt,name=resource_type,json=resourceType,proto3,enum=identity.v1.ResourceType" json:"resource_type,omitempty"`
	// The resource_id is only specified when we want to restrict action on a specific resource.
	ResourceId *string `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3,oneof" json:"resource_id,omitempty"`
	// The action that the user can perform on the resource.
	ActionType    ResourceActionType `protobuf:"varint,3,opt,name=action_type,json=actionType,proto3,enum=identity.v1.ResourceActionType" json:"action_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Permission) Reset() {
	*x = Permission{}
	mi := &file_identity_v1_permission_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Permission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permission) ProtoMessage() {}

func (x *Permission) ProtoReflect() protoreflect.Message {
	mi := &file_identity_v1_permission_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permission.ProtoReflect.Descriptor instead.
func (*Permission) Descriptor() ([]byte, []int) {
	return file_identity_v1_permission_proto_rawDescGZIP(), []int{0}
}

func (x *Permission) GetResourceType() ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return ResourceType_RESOURCE_TYPE_UNSPECIFIED
}

func (x *Permission) GetResourceId() string {
	if x != nil && x.ResourceId != nil {
		return *x.ResourceId
	}
	return ""
}

func (x *Permission) GetActionType() ResourceActionType {
	if x != nil {
		return x.ActionType
	}
	return ResourceActionType_RESOURCE_ACTION_TYPE_UNSPECIFIED
}

type PermissionsGroup struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The reference id to the permission group identifier.
	RefId *string `protobuf:"bytes,1,opt,name=ref_id,json=refId,proto3,oneof" json:"ref_id,omitempty"`
	// The name of the permission group. Generally the role of the group.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the permission group.
	Description *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// The permissions that the permission group has.
	Permissions []*Permission `protobuf:"bytes,4,rep,name=permissions,proto3" json:"permissions,omitempty"`
	// The unique identifier of the business.
	// must be set if the permission group is create by a business.
	BusinessId    *string `protobuf:"bytes,6,opt,name=business_id,json=businessId,proto3,oneof" json:"business_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PermissionsGroup) Reset() {
	*x = PermissionsGroup{}
	mi := &file_identity_v1_permission_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PermissionsGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionsGroup) ProtoMessage() {}

func (x *PermissionsGroup) ProtoReflect() protoreflect.Message {
	mi := &file_identity_v1_permission_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionsGroup.ProtoReflect.Descriptor instead.
func (*PermissionsGroup) Descriptor() ([]byte, []int) {
	return file_identity_v1_permission_proto_rawDescGZIP(), []int{1}
}

func (x *PermissionsGroup) GetRefId() string {
	if x != nil && x.RefId != nil {
		return *x.RefId
	}
	return ""
}

func (x *PermissionsGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PermissionsGroup) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *PermissionsGroup) GetPermissions() []*Permission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *PermissionsGroup) GetBusinessId() string {
	if x != nil && x.BusinessId != nil {
		return *x.BusinessId
	}
	return ""
}

type CreatePermissionsGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The permission group information to create.
	// Note:Only the fields that are set will be created.
	PermissionsGroup *PermissionsGroup `protobuf:"bytes,1,opt,name=permissions_group,json=permissionsGroup,proto3" json:"permissions_group,omitempty"`
	// The unique identifier of the business on which the permission group is created.
	BusinessId    string `protobuf:"bytes,2,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePermissionsGroupRequest) Reset() {
	*x = CreatePermissionsGroupRequest{}
	mi := &file_identity_v1_permission_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePermissionsGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePermissionsGroupRequest) ProtoMessage() {}

func (x *CreatePermissionsGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_identity_v1_permission_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePermissionsGroupRequest.ProtoReflect.Descriptor instead.
func (*CreatePermissionsGroupRequest) Descriptor() ([]byte, []int) {
	return file_identity_v1_permission_proto_rawDescGZIP(), []int{2}
}

func (x *CreatePermissionsGroupRequest) GetPermissionsGroup() *PermissionsGroup {
	if x != nil {
		return x.PermissionsGroup
	}
	return nil
}

func (x *CreatePermissionsGroupRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

type CreatePermissionsGroupResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the created permission group.
	RefId         string `protobuf:"bytes,1,opt,name=ref_id,json=refId,proto3" json:"ref_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePermissionsGroupResponse) Reset() {
	*x = CreatePermissionsGroupResponse{}
	mi := &file_identity_v1_permission_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePermissionsGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePermissionsGroupResponse) ProtoMessage() {}

func (x *CreatePermissionsGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_identity_v1_permission_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePermissionsGroupResponse.ProtoReflect.Descriptor instead.
func (*CreatePermissionsGroupResponse) Descriptor() ([]byte, []int) {
	return file_identity_v1_permission_proto_rawDescGZIP(), []int{3}
}

func (x *CreatePermissionsGroupResponse) GetRefId() string {
	if x != nil {
		return x.RefId
	}
	return ""
}

type GetPermissionsGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the permission group to retrieve.
	RefId         string `protobuf:"bytes,1,opt,name=ref_id,json=refId,proto3" json:"ref_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPermissionsGroupRequest) Reset() {
	*x = GetPermissionsGroupRequest{}
	mi := &file_identity_v1_permission_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPermissionsGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPermissionsGroupRequest) ProtoMessage() {}

func (x *GetPermissionsGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_identity_v1_permission_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPermissionsGroupRequest.ProtoReflect.Descriptor instead.
func (*GetPermissionsGroupRequest) Descriptor() ([]byte, []int) {
	return file_identity_v1_permission_proto_rawDescGZIP(), []int{4}
}

func (x *GetPermissionsGroupRequest) GetRefId() string {
	if x != nil {
		return x.RefId
	}
	return ""
}

type GetPermissionsGroupResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The retrieved permission group data.
	PermissionsGroup *PermissionsGroup `protobuf:"bytes,1,opt,name=permissions_group,json=permissionsGroup,proto3" json:"permissions_group,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetPermissionsGroupResponse) Reset() {
	*x = GetPermissionsGroupResponse{}
	mi := &file_identity_v1_permission_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPermissionsGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPermissionsGroupResponse) ProtoMessage() {}

func (x *GetPermissionsGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_identity_v1_permission_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPermissionsGroupResponse.ProtoReflect.Descriptor instead.
func (*GetPermissionsGroupResponse) Descriptor() ([]byte, []int) {
	return file_identity_v1_permission_proto_rawDescGZIP(), []int{5}
}

func (x *GetPermissionsGroupResponse) GetPermissionsGroup() *PermissionsGroup {
	if x != nil {
		return x.PermissionsGroup
	}
	return nil
}

type UpdatePermissionsGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The permission group information to update.
	// Note:Only the fields that are set will be updated.
	PermissionsGroup *PermissionsGroup `protobuf:"bytes,1,opt,name=permissions_group,json=permissionsGroup,proto3" json:"permissions_group,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UpdatePermissionsGroupRequest) Reset() {
	*x = UpdatePermissionsGroupRequest{}
	mi := &file_identity_v1_permission_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePermissionsGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePermissionsGroupRequest) ProtoMessage() {}

func (x *UpdatePermissionsGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_identity_v1_permission_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePermissionsGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdatePermissionsGroupRequest) Descriptor() ([]byte, []int) {
	return file_identity_v1_permission_proto_rawDescGZIP(), []int{6}
}

func (x *UpdatePermissionsGroupRequest) GetPermissionsGroup() *PermissionsGroup {
	if x != nil {
		return x.PermissionsGroup
	}
	return nil
}

type UpdatePermissionsGroupResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the permission group was successfully updated.
	Success       bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePermissionsGroupResponse) Reset() {
	*x = UpdatePermissionsGroupResponse{}
	mi := &file_identity_v1_permission_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePermissionsGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePermissionsGroupResponse) ProtoMessage() {}

func (x *UpdatePermissionsGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_identity_v1_permission_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePermissionsGroupResponse.ProtoReflect.Descriptor instead.
func (*UpdatePermissionsGroupResponse) Descriptor() ([]byte, []int) {
	return file_identity_v1_permission_proto_rawDescGZIP(), []int{7}
}

func (x *UpdatePermissionsGroupResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DeletePermissionsGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the permission group to delete.
	RefId string `protobuf:"bytes,1,opt,name=ref_id,json=refId,proto3" json:"ref_id,omitempty"`
	// The unique identifier of the business.
	BusinessId    string `protobuf:"bytes,2,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeletePermissionsGroupRequest) Reset() {
	*x = DeletePermissionsGroupRequest{}
	mi := &file_identity_v1_permission_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePermissionsGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePermissionsGroupRequest) ProtoMessage() {}

func (x *DeletePermissionsGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_identity_v1_permission_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePermissionsGroupRequest.ProtoReflect.Descriptor instead.
func (*DeletePermissionsGroupRequest) Descriptor() ([]byte, []int) {
	return file_identity_v1_permission_proto_rawDescGZIP(), []int{8}
}

func (x *DeletePermissionsGroupRequest) GetRefId() string {
	if x != nil {
		return x.RefId
	}
	return ""
}

func (x *DeletePermissionsGroupRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

type DeletePermissionsGroupResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the permission group was successfully deleted.
	Success       bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeletePermissionsGroupResponse) Reset() {
	*x = DeletePermissionsGroupResponse{}
	mi := &file_identity_v1_permission_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePermissionsGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePermissionsGroupResponse) ProtoMessage() {}

func (x *DeletePermissionsGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_identity_v1_permission_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePermissionsGroupResponse.ProtoReflect.Descriptor instead.
func (*DeletePermissionsGroupResponse) Descriptor() ([]byte, []int) {
	return file_identity_v1_permission_proto_rawDescGZIP(), []int{9}
}

func (x *DeletePermissionsGroupResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type RemoveUserPermissionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the user.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The unique identifier of the permission group.
	PermissionsGroupId string `protobuf:"bytes,2,opt,name=permissions_group_id,json=permissionsGroupId,proto3" json:"permissions_group_id,omitempty"`
	// The unique identifier of the resource.
	ResourceId    string `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveUserPermissionRequest) Reset() {
	*x = RemoveUserPermissionRequest{}
	mi := &file_identity_v1_permission_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveUserPermissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserPermissionRequest) ProtoMessage() {}

func (x *RemoveUserPermissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_identity_v1_permission_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserPermissionRequest.ProtoReflect.Descriptor instead.
func (*RemoveUserPermissionRequest) Descriptor() ([]byte, []int) {
	return file_identity_v1_permission_proto_rawDescGZIP(), []int{10}
}

func (x *RemoveUserPermissionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RemoveUserPermissionRequest) GetPermissionsGroupId() string {
	if x != nil {
		return x.PermissionsGroupId
	}
	return ""
}

func (x *RemoveUserPermissionRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

type RemoveUserPermissionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the user was successfully removed from the permission group.
	Success       bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveUserPermissionResponse) Reset() {
	*x = RemoveUserPermissionResponse{}
	mi := &file_identity_v1_permission_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveUserPermissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserPermissionResponse) ProtoMessage() {}

func (x *RemoveUserPermissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_identity_v1_permission_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserPermissionResponse.ProtoReflect.Descriptor instead.
func (*RemoveUserPermissionResponse) Descriptor() ([]byte, []int) {
	return file_identity_v1_permission_proto_rawDescGZIP(), []int{11}
}

func (x *RemoveUserPermissionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type AddUserPermissionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the user.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The unique identifier of the permission group.
	PermissionsGroupId string `protobuf:"bytes,2,opt,name=permissions_group_id,json=permissionsGroupId,proto3" json:"permissions_group_id,omitempty"`
	// The unique identifier of the resource.
	ResourceId    string `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddUserPermissionRequest) Reset() {
	*x = AddUserPermissionRequest{}
	mi := &file_identity_v1_permission_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUserPermissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserPermissionRequest) ProtoMessage() {}

func (x *AddUserPermissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_identity_v1_permission_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserPermissionRequest.ProtoReflect.Descriptor instead.
func (*AddUserPermissionRequest) Descriptor() ([]byte, []int) {
	return file_identity_v1_permission_proto_rawDescGZIP(), []int{12}
}

func (x *AddUserPermissionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AddUserPermissionRequest) GetPermissionsGroupId() string {
	if x != nil {
		return x.PermissionsGroupId
	}
	return ""
}

func (x *AddUserPermissionRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

type AddUserPermissionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the user was successfully added to the permission group.
	Success       bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddUserPermissionResponse) Reset() {
	*x = AddUserPermissionResponse{}
	mi := &file_identity_v1_permission_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUserPermissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserPermissionResponse) ProtoMessage() {}

func (x *AddUserPermissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_identity_v1_permission_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserPermissionResponse.ProtoReflect.Descriptor instead.
func (*AddUserPermissionResponse) Descriptor() ([]byte, []int) {
	return file_identity_v1_permission_proto_rawDescGZIP(), []int{13}
}

func (x *AddUserPermissionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetBusinessPermissionsGroupsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the business to retrieve.
	BusinessId    string `protobuf:"bytes,1,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBusinessPermissionsGroupsRequest) Reset() {
	*x = GetBusinessPermissionsGroupsRequest{}
	mi := &file_identity_v1_permission_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBusinessPermissionsGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessPermissionsGroupsRequest) ProtoMessage() {}

func (x *GetBusinessPermissionsGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_identity_v1_permission_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessPermissionsGroupsRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessPermissionsGroupsRequest) Descriptor() ([]byte, []int) {
	return file_identity_v1_permission_proto_rawDescGZIP(), []int{14}
}

func (x *GetBusinessPermissionsGroupsRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

type GetBusinessPermissionsGroupsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The permission groups that the business has.
	PermissionsGroups []*PermissionsGroup `protobuf:"bytes,1,rep,name=permissions_groups,json=permissionsGroups,proto3" json:"permissions_groups,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetBusinessPermissionsGroupsResponse) Reset() {
	*x = GetBusinessPermissionsGroupsResponse{}
	mi := &file_identity_v1_permission_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBusinessPermissionsGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessPermissionsGroupsResponse) ProtoMessage() {}

func (x *GetBusinessPermissionsGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_identity_v1_permission_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessPermissionsGroupsResponse.ProtoReflect.Descriptor instead.
func (*GetBusinessPermissionsGroupsResponse) Descriptor() ([]byte, []int) {
	return file_identity_v1_permission_proto_rawDescGZIP(), []int{15}
}

func (x *GetBusinessPermissionsGroupsResponse) GetPermissionsGroups() []*PermissionsGroup {
	if x != nil {
		return x.PermissionsGroups
	}
	return nil
}

type CheckPermissionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the user.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The unique identifier of the resource.
	ResourceId string `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// The permission to check.
	Permission    *Permission `protobuf:"bytes,4,opt,name=permission,proto3" json:"permission,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckPermissionRequest) Reset() {
	*x = CheckPermissionRequest{}
	mi := &file_identity_v1_permission_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckPermissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPermissionRequest) ProtoMessage() {}

func (x *CheckPermissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_identity_v1_permission_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPermissionRequest.ProtoReflect.Descriptor instead.
func (*CheckPermissionRequest) Descriptor() ([]byte, []int) {
	return file_identity_v1_permission_proto_rawDescGZIP(), []int{16}
}

func (x *CheckPermissionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CheckPermissionRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *CheckPermissionRequest) GetPermission() *Permission {
	if x != nil {
		return x.Permission
	}
	return nil
}

type CheckPermissionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the user has the permission.
	HasPermission bool `protobuf:"varint,1,opt,name=has_permission,json=hasPermission,proto3" json:"has_permission,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckPermissionResponse) Reset() {
	*x = CheckPermissionResponse{}
	mi := &file_identity_v1_permission_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckPermissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPermissionResponse) ProtoMessage() {}

func (x *CheckPermissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_identity_v1_permission_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPermissionResponse.ProtoReflect.Descriptor instead.
func (*CheckPermissionResponse) Descriptor() ([]byte, []int) {
	return file_identity_v1_permission_proto_rawDescGZIP(), []int{17}
}

func (x *CheckPermissionResponse) GetHasPermission() bool {
	if x != nil {
		return x.HasPermission
	}
	return false
}

var File_identity_v1_permission_proto protoreflect.FileDescriptor

var file_identity_v1_permission_proto_rawDesc = string([]byte{
	0x0a, 0x1c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc4, 0x01, 0x0a, 0x0a, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x22,
	0xf5, 0x01, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0b, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x11, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01,
	0x72, 0x02, 0x10, 0x03, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x06, 0x72, 0x65, 0x66,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01,
	0x01, 0x72, 0x02, 0x10, 0x03, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x6b, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x22, 0x3a, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0x63, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x10, 0x03, 0x52, 0x05, 0x72,
	0x65, 0x66, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x38, 0x0a,
	0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x22, 0x35, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x46, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22,
	0x74, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x11, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x40, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2a, 0xb9, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x02, 0x12,
	0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03,
	0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10,
	0x04, 0x2a, 0xc4, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x21, 0x0a,
	0x1d, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x55,
	0x50, 0x50, 0x4c, 0x49, 0x45, 0x52, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10,
	0x05, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x50,
	0x50, 0x4c, 0x49, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x08, 0x12, 0x19, 0x0a,
	0x15, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x09, 0x32, 0x9b, 0x07, 0x0a, 0x11, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x73,
	0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x2e, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x73, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a,
	0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x14, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85,
	0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x30, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xb3, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x42, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61, 0x72, 0x69, 0x62, 0x75,
	0x2d, 0x63, 0x61, 0x70, 0x2f, 0x73, 0x61, 0x62, 0x69, 0x74, 0x6f, 0x75, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x3b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x49, 0x58, 0x58, 0xaa, 0x02, 0x0b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5c, 0x56, 0x31, 0xe2, 0x02, 0x17, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_identity_v1_permission_proto_rawDescOnce sync.Once
	file_identity_v1_permission_proto_rawDescData []byte
)

func file_identity_v1_permission_proto_rawDescGZIP() []byte {
	file_identity_v1_permission_proto_rawDescOnce.Do(func() {
		file_identity_v1_permission_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_identity_v1_permission_proto_rawDesc), len(file_identity_v1_permission_proto_rawDesc)))
	})
	return file_identity_v1_permission_proto_rawDescData
}

var file_identity_v1_permission_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_identity_v1_permission_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_identity_v1_permission_proto_goTypes = []any{
	(ResourceActionType)(0),                      // 0: identity.v1.ResourceActionType
	(ResourceType)(0),                            // 1: identity.v1.ResourceType
	(*Permission)(nil),                           // 2: identity.v1.Permission
	(*PermissionsGroup)(nil),                     // 3: identity.v1.PermissionsGroup
	(*CreatePermissionsGroupRequest)(nil),        // 4: identity.v1.CreatePermissionsGroupRequest
	(*CreatePermissionsGroupResponse)(nil),       // 5: identity.v1.CreatePermissionsGroupResponse
	(*GetPermissionsGroupRequest)(nil),           // 6: identity.v1.GetPermissionsGroupRequest
	(*GetPermissionsGroupResponse)(nil),          // 7: identity.v1.GetPermissionsGroupResponse
	(*UpdatePermissionsGroupRequest)(nil),        // 8: identity.v1.UpdatePermissionsGroupRequest
	(*UpdatePermissionsGroupResponse)(nil),       // 9: identity.v1.UpdatePermissionsGroupResponse
	(*DeletePermissionsGroupRequest)(nil),        // 10: identity.v1.DeletePermissionsGroupRequest
	(*DeletePermissionsGroupResponse)(nil),       // 11: identity.v1.DeletePermissionsGroupResponse
	(*RemoveUserPermissionRequest)(nil),          // 12: identity.v1.RemoveUserPermissionRequest
	(*RemoveUserPermissionResponse)(nil),         // 13: identity.v1.RemoveUserPermissionResponse
	(*AddUserPermissionRequest)(nil),             // 14: identity.v1.AddUserPermissionRequest
	(*AddUserPermissionResponse)(nil),            // 15: identity.v1.AddUserPermissionResponse
	(*GetBusinessPermissionsGroupsRequest)(nil),  // 16: identity.v1.GetBusinessPermissionsGroupsRequest
	(*GetBusinessPermissionsGroupsResponse)(nil), // 17: identity.v1.GetBusinessPermissionsGroupsResponse
	(*CheckPermissionRequest)(nil),               // 18: identity.v1.CheckPermissionRequest
	(*CheckPermissionResponse)(nil),              // 19: identity.v1.CheckPermissionResponse
}
var file_identity_v1_permission_proto_depIdxs = []int32{
	1,  // 0: identity.v1.Permission.resource_type:type_name -> identity.v1.ResourceType
	0,  // 1: identity.v1.Permission.action_type:type_name -> identity.v1.ResourceActionType
	2,  // 2: identity.v1.PermissionsGroup.permissions:type_name -> identity.v1.Permission
	3,  // 3: identity.v1.CreatePermissionsGroupRequest.permissions_group:type_name -> identity.v1.PermissionsGroup
	3,  // 4: identity.v1.GetPermissionsGroupResponse.permissions_group:type_name -> identity.v1.PermissionsGroup
	3,  // 5: identity.v1.UpdatePermissionsGroupRequest.permissions_group:type_name -> identity.v1.PermissionsGroup
	3,  // 6: identity.v1.GetBusinessPermissionsGroupsResponse.permissions_groups:type_name -> identity.v1.PermissionsGroup
	2,  // 7: identity.v1.CheckPermissionRequest.permission:type_name -> identity.v1.Permission
	4,  // 8: identity.v1.PermissionService.CreatePermissionsGroup:input_type -> identity.v1.CreatePermissionsGroupRequest
	6,  // 9: identity.v1.PermissionService.GetPermissionsGroup:input_type -> identity.v1.GetPermissionsGroupRequest
	8,  // 10: identity.v1.PermissionService.UpdatePermissionsGroup:input_type -> identity.v1.UpdatePermissionsGroupRequest
	10, // 11: identity.v1.PermissionService.DeletePermissionsGroup:input_type -> identity.v1.DeletePermissionsGroupRequest
	12, // 12: identity.v1.PermissionService.RemoveUserPermission:input_type -> identity.v1.RemoveUserPermissionRequest
	14, // 13: identity.v1.PermissionService.AddUserPermission:input_type -> identity.v1.AddUserPermissionRequest
	16, // 14: identity.v1.PermissionService.GetBusinessPermissionsGroups:input_type -> identity.v1.GetBusinessPermissionsGroupsRequest
	18, // 15: identity.v1.PermissionService.CheckPermission:input_type -> identity.v1.CheckPermissionRequest
	5,  // 16: identity.v1.PermissionService.CreatePermissionsGroup:output_type -> identity.v1.CreatePermissionsGroupResponse
	7,  // 17: identity.v1.PermissionService.GetPermissionsGroup:output_type -> identity.v1.GetPermissionsGroupResponse
	9,  // 18: identity.v1.PermissionService.UpdatePermissionsGroup:output_type -> identity.v1.UpdatePermissionsGroupResponse
	11, // 19: identity.v1.PermissionService.DeletePermissionsGroup:output_type -> identity.v1.DeletePermissionsGroupResponse
	13, // 20: identity.v1.PermissionService.RemoveUserPermission:output_type -> identity.v1.RemoveUserPermissionResponse
	15, // 21: identity.v1.PermissionService.AddUserPermission:output_type -> identity.v1.AddUserPermissionResponse
	17, // 22: identity.v1.PermissionService.GetBusinessPermissionsGroups:output_type -> identity.v1.GetBusinessPermissionsGroupsResponse
	19, // 23: identity.v1.PermissionService.CheckPermission:output_type -> identity.v1.CheckPermissionResponse
	16, // [16:24] is the sub-list for method output_type
	8,  // [8:16] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_identity_v1_permission_proto_init() }
func file_identity_v1_permission_proto_init() {
	if File_identity_v1_permission_proto != nil {
		return
	}
	file_identity_v1_permission_proto_msgTypes[0].OneofWrappers = []any{}
	file_identity_v1_permission_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_identity_v1_permission_proto_rawDesc), len(file_identity_v1_permission_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_identity_v1_permission_proto_goTypes,
		DependencyIndexes: file_identity_v1_permission_proto_depIdxs,
		EnumInfos:         file_identity_v1_permission_proto_enumTypes,
		MessageInfos:      file_identity_v1_permission_proto_msgTypes,
	}.Build()
	File_identity_v1_permission_proto = out.File
	file_identity_v1_permission_proto_goTypes = nil
	file_identity_v1_permission_proto_depIdxs = nil
}
