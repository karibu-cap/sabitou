// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: identity/v1/permission.proto

package identityv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/karibu-cap/sabitou/protos/gen/go/identity/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PermissionServiceName is the fully-qualified name of the PermissionService service.
	PermissionServiceName = "identity.v1.PermissionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PermissionServiceCreatePermissionGroupProcedure is the fully-qualified name of the
	// PermissionService's CreatePermissionGroup RPC.
	PermissionServiceCreatePermissionGroupProcedure = "/identity.v1.PermissionService/CreatePermissionGroup"
	// PermissionServiceGetPermissionGroupProcedure is the fully-qualified name of the
	// PermissionService's GetPermissionGroup RPC.
	PermissionServiceGetPermissionGroupProcedure = "/identity.v1.PermissionService/GetPermissionGroup"
	// PermissionServiceUpdatePermissionGroupProcedure is the fully-qualified name of the
	// PermissionService's UpdatePermissionGroup RPC.
	PermissionServiceUpdatePermissionGroupProcedure = "/identity.v1.PermissionService/UpdatePermissionGroup"
	// PermissionServiceDeletePermissionGroupProcedure is the fully-qualified name of the
	// PermissionService's DeletePermissionGroup RPC.
	PermissionServiceDeletePermissionGroupProcedure = "/identity.v1.PermissionService/DeletePermissionGroup"
	// PermissionServiceGetUserPermissionsProcedure is the fully-qualified name of the
	// PermissionService's GetUserPermissions RPC.
	PermissionServiceGetUserPermissionsProcedure = "/identity.v1.PermissionService/GetUserPermissions"
	// PermissionServiceRemoveUserPermissionProcedure is the fully-qualified name of the
	// PermissionService's RemoveUserPermission RPC.
	PermissionServiceRemoveUserPermissionProcedure = "/identity.v1.PermissionService/RemoveUserPermission"
	// PermissionServiceAddUserPermissionProcedure is the fully-qualified name of the
	// PermissionService's AddUserPermission RPC.
	PermissionServiceAddUserPermissionProcedure = "/identity.v1.PermissionService/AddUserPermission"
	// PermissionServiceGetBusinessPermissionGroupsProcedure is the fully-qualified name of the
	// PermissionService's GetBusinessPermissionGroups RPC.
	PermissionServiceGetBusinessPermissionGroupsProcedure = "/identity.v1.PermissionService/GetBusinessPermissionGroups"
	// PermissionServiceCheckPermissionProcedure is the fully-qualified name of the PermissionService's
	// CheckPermission RPC.
	PermissionServiceCheckPermissionProcedure = "/identity.v1.PermissionService/CheckPermission"
)

// PermissionServiceClient is a client for the identity.v1.PermissionService service.
type PermissionServiceClient interface {
	// Creates a new permission group.
	CreatePermissionGroup(context.Context, *connect.Request[v1.CreatePermissionGroupRequest]) (*connect.Response[v1.CreatePermissionGroupResponse], error)
	// Gets a permission group by id.
	GetPermissionGroup(context.Context, *connect.Request[v1.GetPermissionGroupRequest]) (*connect.Response[v1.GetPermissionGroupResponse], error)
	// Updates a permission group.
	UpdatePermissionGroup(context.Context, *connect.Request[v1.UpdatePermissionGroupRequest]) (*connect.Response[v1.UpdatePermissionGroupResponse], error)
	// Deletes a permission group.
	DeletePermissionGroup(context.Context, *connect.Request[v1.DeletePermissionGroupRequest]) (*connect.Response[v1.DeletePermissionGroupResponse], error)
	// Gets the permissions of the user.
	GetUserPermissions(context.Context, *connect.Request[v1.GetUserPermissionsRequest]) (*connect.Response[v1.GetUserPermissionsResponse], error)
	// Removes a permission from the user.
	RemoveUserPermission(context.Context, *connect.Request[v1.RemoveUserPermissionRequest]) (*connect.Response[v1.RemoveUserPermissionResponse], error)
	// Adds a permission to the user.
	AddUserPermission(context.Context, *connect.Request[v1.AddUserPermissionRequest]) (*connect.Response[v1.AddUserPermissionResponse], error)
	// Gets the permission groups of the business.
	GetBusinessPermissionGroups(context.Context, *connect.Request[v1.GetBusinessPermissionGroupsRequest]) (*connect.Response[v1.GetBusinessPermissionGroupsResponse], error)
	// Checks if the user has the provided permission for the provided resource.
	CheckPermission(context.Context, *connect.Request[v1.CheckPermissionRequest]) (*connect.Response[v1.CheckPermissionResponse], error)
}

// NewPermissionServiceClient constructs a client for the identity.v1.PermissionService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPermissionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PermissionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	permissionServiceMethods := v1.File_identity_v1_permission_proto.Services().ByName("PermissionService").Methods()
	return &permissionServiceClient{
		createPermissionGroup: connect.NewClient[v1.CreatePermissionGroupRequest, v1.CreatePermissionGroupResponse](
			httpClient,
			baseURL+PermissionServiceCreatePermissionGroupProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("CreatePermissionGroup")),
			connect.WithClientOptions(opts...),
		),
		getPermissionGroup: connect.NewClient[v1.GetPermissionGroupRequest, v1.GetPermissionGroupResponse](
			httpClient,
			baseURL+PermissionServiceGetPermissionGroupProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("GetPermissionGroup")),
			connect.WithClientOptions(opts...),
		),
		updatePermissionGroup: connect.NewClient[v1.UpdatePermissionGroupRequest, v1.UpdatePermissionGroupResponse](
			httpClient,
			baseURL+PermissionServiceUpdatePermissionGroupProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("UpdatePermissionGroup")),
			connect.WithClientOptions(opts...),
		),
		deletePermissionGroup: connect.NewClient[v1.DeletePermissionGroupRequest, v1.DeletePermissionGroupResponse](
			httpClient,
			baseURL+PermissionServiceDeletePermissionGroupProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("DeletePermissionGroup")),
			connect.WithClientOptions(opts...),
		),
		getUserPermissions: connect.NewClient[v1.GetUserPermissionsRequest, v1.GetUserPermissionsResponse](
			httpClient,
			baseURL+PermissionServiceGetUserPermissionsProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("GetUserPermissions")),
			connect.WithClientOptions(opts...),
		),
		removeUserPermission: connect.NewClient[v1.RemoveUserPermissionRequest, v1.RemoveUserPermissionResponse](
			httpClient,
			baseURL+PermissionServiceRemoveUserPermissionProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("RemoveUserPermission")),
			connect.WithClientOptions(opts...),
		),
		addUserPermission: connect.NewClient[v1.AddUserPermissionRequest, v1.AddUserPermissionResponse](
			httpClient,
			baseURL+PermissionServiceAddUserPermissionProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("AddUserPermission")),
			connect.WithClientOptions(opts...),
		),
		getBusinessPermissionGroups: connect.NewClient[v1.GetBusinessPermissionGroupsRequest, v1.GetBusinessPermissionGroupsResponse](
			httpClient,
			baseURL+PermissionServiceGetBusinessPermissionGroupsProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("GetBusinessPermissionGroups")),
			connect.WithClientOptions(opts...),
		),
		checkPermission: connect.NewClient[v1.CheckPermissionRequest, v1.CheckPermissionResponse](
			httpClient,
			baseURL+PermissionServiceCheckPermissionProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("CheckPermission")),
			connect.WithClientOptions(opts...),
		),
	}
}

// permissionServiceClient implements PermissionServiceClient.
type permissionServiceClient struct {
	createPermissionGroup       *connect.Client[v1.CreatePermissionGroupRequest, v1.CreatePermissionGroupResponse]
	getPermissionGroup          *connect.Client[v1.GetPermissionGroupRequest, v1.GetPermissionGroupResponse]
	updatePermissionGroup       *connect.Client[v1.UpdatePermissionGroupRequest, v1.UpdatePermissionGroupResponse]
	deletePermissionGroup       *connect.Client[v1.DeletePermissionGroupRequest, v1.DeletePermissionGroupResponse]
	getUserPermissions          *connect.Client[v1.GetUserPermissionsRequest, v1.GetUserPermissionsResponse]
	removeUserPermission        *connect.Client[v1.RemoveUserPermissionRequest, v1.RemoveUserPermissionResponse]
	addUserPermission           *connect.Client[v1.AddUserPermissionRequest, v1.AddUserPermissionResponse]
	getBusinessPermissionGroups *connect.Client[v1.GetBusinessPermissionGroupsRequest, v1.GetBusinessPermissionGroupsResponse]
	checkPermission             *connect.Client[v1.CheckPermissionRequest, v1.CheckPermissionResponse]
}

// CreatePermissionGroup calls identity.v1.PermissionService.CreatePermissionGroup.
func (c *permissionServiceClient) CreatePermissionGroup(ctx context.Context, req *connect.Request[v1.CreatePermissionGroupRequest]) (*connect.Response[v1.CreatePermissionGroupResponse], error) {
	return c.createPermissionGroup.CallUnary(ctx, req)
}

// GetPermissionGroup calls identity.v1.PermissionService.GetPermissionGroup.
func (c *permissionServiceClient) GetPermissionGroup(ctx context.Context, req *connect.Request[v1.GetPermissionGroupRequest]) (*connect.Response[v1.GetPermissionGroupResponse], error) {
	return c.getPermissionGroup.CallUnary(ctx, req)
}

// UpdatePermissionGroup calls identity.v1.PermissionService.UpdatePermissionGroup.
func (c *permissionServiceClient) UpdatePermissionGroup(ctx context.Context, req *connect.Request[v1.UpdatePermissionGroupRequest]) (*connect.Response[v1.UpdatePermissionGroupResponse], error) {
	return c.updatePermissionGroup.CallUnary(ctx, req)
}

// DeletePermissionGroup calls identity.v1.PermissionService.DeletePermissionGroup.
func (c *permissionServiceClient) DeletePermissionGroup(ctx context.Context, req *connect.Request[v1.DeletePermissionGroupRequest]) (*connect.Response[v1.DeletePermissionGroupResponse], error) {
	return c.deletePermissionGroup.CallUnary(ctx, req)
}

// GetUserPermissions calls identity.v1.PermissionService.GetUserPermissions.
func (c *permissionServiceClient) GetUserPermissions(ctx context.Context, req *connect.Request[v1.GetUserPermissionsRequest]) (*connect.Response[v1.GetUserPermissionsResponse], error) {
	return c.getUserPermissions.CallUnary(ctx, req)
}

// RemoveUserPermission calls identity.v1.PermissionService.RemoveUserPermission.
func (c *permissionServiceClient) RemoveUserPermission(ctx context.Context, req *connect.Request[v1.RemoveUserPermissionRequest]) (*connect.Response[v1.RemoveUserPermissionResponse], error) {
	return c.removeUserPermission.CallUnary(ctx, req)
}

// AddUserPermission calls identity.v1.PermissionService.AddUserPermission.
func (c *permissionServiceClient) AddUserPermission(ctx context.Context, req *connect.Request[v1.AddUserPermissionRequest]) (*connect.Response[v1.AddUserPermissionResponse], error) {
	return c.addUserPermission.CallUnary(ctx, req)
}

// GetBusinessPermissionGroups calls identity.v1.PermissionService.GetBusinessPermissionGroups.
func (c *permissionServiceClient) GetBusinessPermissionGroups(ctx context.Context, req *connect.Request[v1.GetBusinessPermissionGroupsRequest]) (*connect.Response[v1.GetBusinessPermissionGroupsResponse], error) {
	return c.getBusinessPermissionGroups.CallUnary(ctx, req)
}

// CheckPermission calls identity.v1.PermissionService.CheckPermission.
func (c *permissionServiceClient) CheckPermission(ctx context.Context, req *connect.Request[v1.CheckPermissionRequest]) (*connect.Response[v1.CheckPermissionResponse], error) {
	return c.checkPermission.CallUnary(ctx, req)
}

// PermissionServiceHandler is an implementation of the identity.v1.PermissionService service.
type PermissionServiceHandler interface {
	// Creates a new permission group.
	CreatePermissionGroup(context.Context, *connect.Request[v1.CreatePermissionGroupRequest]) (*connect.Response[v1.CreatePermissionGroupResponse], error)
	// Gets a permission group by id.
	GetPermissionGroup(context.Context, *connect.Request[v1.GetPermissionGroupRequest]) (*connect.Response[v1.GetPermissionGroupResponse], error)
	// Updates a permission group.
	UpdatePermissionGroup(context.Context, *connect.Request[v1.UpdatePermissionGroupRequest]) (*connect.Response[v1.UpdatePermissionGroupResponse], error)
	// Deletes a permission group.
	DeletePermissionGroup(context.Context, *connect.Request[v1.DeletePermissionGroupRequest]) (*connect.Response[v1.DeletePermissionGroupResponse], error)
	// Gets the permissions of the user.
	GetUserPermissions(context.Context, *connect.Request[v1.GetUserPermissionsRequest]) (*connect.Response[v1.GetUserPermissionsResponse], error)
	// Removes a permission from the user.
	RemoveUserPermission(context.Context, *connect.Request[v1.RemoveUserPermissionRequest]) (*connect.Response[v1.RemoveUserPermissionResponse], error)
	// Adds a permission to the user.
	AddUserPermission(context.Context, *connect.Request[v1.AddUserPermissionRequest]) (*connect.Response[v1.AddUserPermissionResponse], error)
	// Gets the permission groups of the business.
	GetBusinessPermissionGroups(context.Context, *connect.Request[v1.GetBusinessPermissionGroupsRequest]) (*connect.Response[v1.GetBusinessPermissionGroupsResponse], error)
	// Checks if the user has the provided permission for the provided resource.
	CheckPermission(context.Context, *connect.Request[v1.CheckPermissionRequest]) (*connect.Response[v1.CheckPermissionResponse], error)
}

// NewPermissionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPermissionServiceHandler(svc PermissionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	permissionServiceMethods := v1.File_identity_v1_permission_proto.Services().ByName("PermissionService").Methods()
	permissionServiceCreatePermissionGroupHandler := connect.NewUnaryHandler(
		PermissionServiceCreatePermissionGroupProcedure,
		svc.CreatePermissionGroup,
		connect.WithSchema(permissionServiceMethods.ByName("CreatePermissionGroup")),
		connect.WithHandlerOptions(opts...),
	)
	permissionServiceGetPermissionGroupHandler := connect.NewUnaryHandler(
		PermissionServiceGetPermissionGroupProcedure,
		svc.GetPermissionGroup,
		connect.WithSchema(permissionServiceMethods.ByName("GetPermissionGroup")),
		connect.WithHandlerOptions(opts...),
	)
	permissionServiceUpdatePermissionGroupHandler := connect.NewUnaryHandler(
		PermissionServiceUpdatePermissionGroupProcedure,
		svc.UpdatePermissionGroup,
		connect.WithSchema(permissionServiceMethods.ByName("UpdatePermissionGroup")),
		connect.WithHandlerOptions(opts...),
	)
	permissionServiceDeletePermissionGroupHandler := connect.NewUnaryHandler(
		PermissionServiceDeletePermissionGroupProcedure,
		svc.DeletePermissionGroup,
		connect.WithSchema(permissionServiceMethods.ByName("DeletePermissionGroup")),
		connect.WithHandlerOptions(opts...),
	)
	permissionServiceGetUserPermissionsHandler := connect.NewUnaryHandler(
		PermissionServiceGetUserPermissionsProcedure,
		svc.GetUserPermissions,
		connect.WithSchema(permissionServiceMethods.ByName("GetUserPermissions")),
		connect.WithHandlerOptions(opts...),
	)
	permissionServiceRemoveUserPermissionHandler := connect.NewUnaryHandler(
		PermissionServiceRemoveUserPermissionProcedure,
		svc.RemoveUserPermission,
		connect.WithSchema(permissionServiceMethods.ByName("RemoveUserPermission")),
		connect.WithHandlerOptions(opts...),
	)
	permissionServiceAddUserPermissionHandler := connect.NewUnaryHandler(
		PermissionServiceAddUserPermissionProcedure,
		svc.AddUserPermission,
		connect.WithSchema(permissionServiceMethods.ByName("AddUserPermission")),
		connect.WithHandlerOptions(opts...),
	)
	permissionServiceGetBusinessPermissionGroupsHandler := connect.NewUnaryHandler(
		PermissionServiceGetBusinessPermissionGroupsProcedure,
		svc.GetBusinessPermissionGroups,
		connect.WithSchema(permissionServiceMethods.ByName("GetBusinessPermissionGroups")),
		connect.WithHandlerOptions(opts...),
	)
	permissionServiceCheckPermissionHandler := connect.NewUnaryHandler(
		PermissionServiceCheckPermissionProcedure,
		svc.CheckPermission,
		connect.WithSchema(permissionServiceMethods.ByName("CheckPermission")),
		connect.WithHandlerOptions(opts...),
	)
	return "/identity.v1.PermissionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PermissionServiceCreatePermissionGroupProcedure:
			permissionServiceCreatePermissionGroupHandler.ServeHTTP(w, r)
		case PermissionServiceGetPermissionGroupProcedure:
			permissionServiceGetPermissionGroupHandler.ServeHTTP(w, r)
		case PermissionServiceUpdatePermissionGroupProcedure:
			permissionServiceUpdatePermissionGroupHandler.ServeHTTP(w, r)
		case PermissionServiceDeletePermissionGroupProcedure:
			permissionServiceDeletePermissionGroupHandler.ServeHTTP(w, r)
		case PermissionServiceGetUserPermissionsProcedure:
			permissionServiceGetUserPermissionsHandler.ServeHTTP(w, r)
		case PermissionServiceRemoveUserPermissionProcedure:
			permissionServiceRemoveUserPermissionHandler.ServeHTTP(w, r)
		case PermissionServiceAddUserPermissionProcedure:
			permissionServiceAddUserPermissionHandler.ServeHTTP(w, r)
		case PermissionServiceGetBusinessPermissionGroupsProcedure:
			permissionServiceGetBusinessPermissionGroupsHandler.ServeHTTP(w, r)
		case PermissionServiceCheckPermissionProcedure:
			permissionServiceCheckPermissionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPermissionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPermissionServiceHandler struct{}

func (UnimplementedPermissionServiceHandler) CreatePermissionGroup(context.Context, *connect.Request[v1.CreatePermissionGroupRequest]) (*connect.Response[v1.CreatePermissionGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.PermissionService.CreatePermissionGroup is not implemented"))
}

func (UnimplementedPermissionServiceHandler) GetPermissionGroup(context.Context, *connect.Request[v1.GetPermissionGroupRequest]) (*connect.Response[v1.GetPermissionGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.PermissionService.GetPermissionGroup is not implemented"))
}

func (UnimplementedPermissionServiceHandler) UpdatePermissionGroup(context.Context, *connect.Request[v1.UpdatePermissionGroupRequest]) (*connect.Response[v1.UpdatePermissionGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.PermissionService.UpdatePermissionGroup is not implemented"))
}

func (UnimplementedPermissionServiceHandler) DeletePermissionGroup(context.Context, *connect.Request[v1.DeletePermissionGroupRequest]) (*connect.Response[v1.DeletePermissionGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.PermissionService.DeletePermissionGroup is not implemented"))
}

func (UnimplementedPermissionServiceHandler) GetUserPermissions(context.Context, *connect.Request[v1.GetUserPermissionsRequest]) (*connect.Response[v1.GetUserPermissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.PermissionService.GetUserPermissions is not implemented"))
}

func (UnimplementedPermissionServiceHandler) RemoveUserPermission(context.Context, *connect.Request[v1.RemoveUserPermissionRequest]) (*connect.Response[v1.RemoveUserPermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.PermissionService.RemoveUserPermission is not implemented"))
}

func (UnimplementedPermissionServiceHandler) AddUserPermission(context.Context, *connect.Request[v1.AddUserPermissionRequest]) (*connect.Response[v1.AddUserPermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.PermissionService.AddUserPermission is not implemented"))
}

func (UnimplementedPermissionServiceHandler) GetBusinessPermissionGroups(context.Context, *connect.Request[v1.GetBusinessPermissionGroupsRequest]) (*connect.Response[v1.GetBusinessPermissionGroupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.PermissionService.GetBusinessPermissionGroups is not implemented"))
}

func (UnimplementedPermissionServiceHandler) CheckPermission(context.Context, *connect.Request[v1.CheckPermissionRequest]) (*connect.Response[v1.CheckPermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.PermissionService.CheckPermission is not implemented"))
}
