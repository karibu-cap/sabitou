// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: identity/v1/permission.proto

package identityv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Permission with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Permission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Permission with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PermissionMultiError, or
// nil if none found.
func (m *Permission) ValidateAll() error {
	return m.validate(true)
}

func (m *Permission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceType

	// no validation rules for ActionType

	if m.ResourceId != nil {
		// no validation rules for ResourceId
	}

	if len(errors) > 0 {
		return PermissionMultiError(errors)
	}

	return nil
}

// PermissionMultiError is an error wrapping multiple validation errors
// returned by Permission.ValidateAll() if the designated constraints aren't met.
type PermissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionMultiError) AllErrors() []error { return m }

// PermissionValidationError is the validation error returned by
// Permission.Validate if the designated constraints aren't met.
type PermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionValidationError) ErrorName() string { return "PermissionValidationError" }

// Error satisfies the builtin error interface
func (e PermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionValidationError{}

// Validate checks the field values on PermissionsGroup with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PermissionsGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PermissionsGroup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PermissionsGroupMultiError, or nil if none found.
func (m *PermissionsGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *PermissionsGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PermissionsGroupValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PermissionsGroupValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PermissionsGroupValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.RefId != nil {
		// no validation rules for RefId
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.BusinessId != nil {
		// no validation rules for BusinessId
	}

	if len(errors) > 0 {
		return PermissionsGroupMultiError(errors)
	}

	return nil
}

// PermissionsGroupMultiError is an error wrapping multiple validation errors
// returned by PermissionsGroup.ValidateAll() if the designated constraints
// aren't met.
type PermissionsGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionsGroupMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionsGroupMultiError) AllErrors() []error { return m }

// PermissionsGroupValidationError is the validation error returned by
// PermissionsGroup.Validate if the designated constraints aren't met.
type PermissionsGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionsGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionsGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionsGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionsGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionsGroupValidationError) ErrorName() string { return "PermissionsGroupValidationError" }

// Error satisfies the builtin error interface
func (e PermissionsGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionsGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionsGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionsGroupValidationError{}

// Validate checks the field values on CreatePermissionsGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePermissionsGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePermissionsGroupRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePermissionsGroupRequestMultiError, or nil if none found.
func (m *CreatePermissionsGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePermissionsGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPermissionsGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePermissionsGroupRequestValidationError{
					field:  "PermissionsGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePermissionsGroupRequestValidationError{
					field:  "PermissionsGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermissionsGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePermissionsGroupRequestValidationError{
				field:  "PermissionsGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BusinessId

	if len(errors) > 0 {
		return CreatePermissionsGroupRequestMultiError(errors)
	}

	return nil
}

// CreatePermissionsGroupRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePermissionsGroupRequest.ValidateAll()
// if the designated constraints aren't met.
type CreatePermissionsGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePermissionsGroupRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePermissionsGroupRequestMultiError) AllErrors() []error { return m }

// CreatePermissionsGroupRequestValidationError is the validation error
// returned by CreatePermissionsGroupRequest.Validate if the designated
// constraints aren't met.
type CreatePermissionsGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePermissionsGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePermissionsGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePermissionsGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePermissionsGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePermissionsGroupRequestValidationError) ErrorName() string {
	return "CreatePermissionsGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePermissionsGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePermissionsGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePermissionsGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePermissionsGroupRequestValidationError{}

// Validate checks the field values on CreatePermissionsGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePermissionsGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePermissionsGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePermissionsGroupResponseMultiError, or nil if none found.
func (m *CreatePermissionsGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePermissionsGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefId

	if len(errors) > 0 {
		return CreatePermissionsGroupResponseMultiError(errors)
	}

	return nil
}

// CreatePermissionsGroupResponseMultiError is an error wrapping multiple
// validation errors returned by CreatePermissionsGroupResponse.ValidateAll()
// if the designated constraints aren't met.
type CreatePermissionsGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePermissionsGroupResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePermissionsGroupResponseMultiError) AllErrors() []error { return m }

// CreatePermissionsGroupResponseValidationError is the validation error
// returned by CreatePermissionsGroupResponse.Validate if the designated
// constraints aren't met.
type CreatePermissionsGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePermissionsGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePermissionsGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePermissionsGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePermissionsGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePermissionsGroupResponseValidationError) ErrorName() string {
	return "CreatePermissionsGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePermissionsGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePermissionsGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePermissionsGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePermissionsGroupResponseValidationError{}

// Validate checks the field values on GetPermissionsGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPermissionsGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPermissionsGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPermissionsGroupRequestMultiError, or nil if none found.
func (m *GetPermissionsGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPermissionsGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefId

	if len(errors) > 0 {
		return GetPermissionsGroupRequestMultiError(errors)
	}

	return nil
}

// GetPermissionsGroupRequestMultiError is an error wrapping multiple
// validation errors returned by GetPermissionsGroupRequest.ValidateAll() if
// the designated constraints aren't met.
type GetPermissionsGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPermissionsGroupRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPermissionsGroupRequestMultiError) AllErrors() []error { return m }

// GetPermissionsGroupRequestValidationError is the validation error returned
// by GetPermissionsGroupRequest.Validate if the designated constraints aren't met.
type GetPermissionsGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPermissionsGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPermissionsGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPermissionsGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPermissionsGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPermissionsGroupRequestValidationError) ErrorName() string {
	return "GetPermissionsGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPermissionsGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPermissionsGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPermissionsGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPermissionsGroupRequestValidationError{}

// Validate checks the field values on GetPermissionsGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPermissionsGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPermissionsGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPermissionsGroupResponseMultiError, or nil if none found.
func (m *GetPermissionsGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPermissionsGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPermissionsGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPermissionsGroupResponseValidationError{
					field:  "PermissionsGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPermissionsGroupResponseValidationError{
					field:  "PermissionsGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermissionsGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPermissionsGroupResponseValidationError{
				field:  "PermissionsGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPermissionsGroupResponseMultiError(errors)
	}

	return nil
}

// GetPermissionsGroupResponseMultiError is an error wrapping multiple
// validation errors returned by GetPermissionsGroupResponse.ValidateAll() if
// the designated constraints aren't met.
type GetPermissionsGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPermissionsGroupResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPermissionsGroupResponseMultiError) AllErrors() []error { return m }

// GetPermissionsGroupResponseValidationError is the validation error returned
// by GetPermissionsGroupResponse.Validate if the designated constraints
// aren't met.
type GetPermissionsGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPermissionsGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPermissionsGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPermissionsGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPermissionsGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPermissionsGroupResponseValidationError) ErrorName() string {
	return "GetPermissionsGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPermissionsGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPermissionsGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPermissionsGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPermissionsGroupResponseValidationError{}

// Validate checks the field values on UpdatePermissionsGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePermissionsGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePermissionsGroupRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdatePermissionsGroupRequestMultiError, or nil if none found.
func (m *UpdatePermissionsGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePermissionsGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPermissionsGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePermissionsGroupRequestValidationError{
					field:  "PermissionsGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePermissionsGroupRequestValidationError{
					field:  "PermissionsGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermissionsGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePermissionsGroupRequestValidationError{
				field:  "PermissionsGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePermissionsGroupRequestMultiError(errors)
	}

	return nil
}

// UpdatePermissionsGroupRequestMultiError is an error wrapping multiple
// validation errors returned by UpdatePermissionsGroupRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdatePermissionsGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePermissionsGroupRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePermissionsGroupRequestMultiError) AllErrors() []error { return m }

// UpdatePermissionsGroupRequestValidationError is the validation error
// returned by UpdatePermissionsGroupRequest.Validate if the designated
// constraints aren't met.
type UpdatePermissionsGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePermissionsGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePermissionsGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePermissionsGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePermissionsGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePermissionsGroupRequestValidationError) ErrorName() string {
	return "UpdatePermissionsGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePermissionsGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePermissionsGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePermissionsGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePermissionsGroupRequestValidationError{}

// Validate checks the field values on UpdatePermissionsGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePermissionsGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePermissionsGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdatePermissionsGroupResponseMultiError, or nil if none found.
func (m *UpdatePermissionsGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePermissionsGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdatePermissionsGroupResponseMultiError(errors)
	}

	return nil
}

// UpdatePermissionsGroupResponseMultiError is an error wrapping multiple
// validation errors returned by UpdatePermissionsGroupResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdatePermissionsGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePermissionsGroupResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePermissionsGroupResponseMultiError) AllErrors() []error { return m }

// UpdatePermissionsGroupResponseValidationError is the validation error
// returned by UpdatePermissionsGroupResponse.Validate if the designated
// constraints aren't met.
type UpdatePermissionsGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePermissionsGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePermissionsGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePermissionsGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePermissionsGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePermissionsGroupResponseValidationError) ErrorName() string {
	return "UpdatePermissionsGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePermissionsGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePermissionsGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePermissionsGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePermissionsGroupResponseValidationError{}

// Validate checks the field values on DeletePermissionsGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePermissionsGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePermissionsGroupRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeletePermissionsGroupRequestMultiError, or nil if none found.
func (m *DeletePermissionsGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePermissionsGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefId

	// no validation rules for BusinessId

	if len(errors) > 0 {
		return DeletePermissionsGroupRequestMultiError(errors)
	}

	return nil
}

// DeletePermissionsGroupRequestMultiError is an error wrapping multiple
// validation errors returned by DeletePermissionsGroupRequest.ValidateAll()
// if the designated constraints aren't met.
type DeletePermissionsGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePermissionsGroupRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePermissionsGroupRequestMultiError) AllErrors() []error { return m }

// DeletePermissionsGroupRequestValidationError is the validation error
// returned by DeletePermissionsGroupRequest.Validate if the designated
// constraints aren't met.
type DeletePermissionsGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePermissionsGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePermissionsGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePermissionsGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePermissionsGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePermissionsGroupRequestValidationError) ErrorName() string {
	return "DeletePermissionsGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePermissionsGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePermissionsGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePermissionsGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePermissionsGroupRequestValidationError{}

// Validate checks the field values on DeletePermissionsGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePermissionsGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePermissionsGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeletePermissionsGroupResponseMultiError, or nil if none found.
func (m *DeletePermissionsGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePermissionsGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeletePermissionsGroupResponseMultiError(errors)
	}

	return nil
}

// DeletePermissionsGroupResponseMultiError is an error wrapping multiple
// validation errors returned by DeletePermissionsGroupResponse.ValidateAll()
// if the designated constraints aren't met.
type DeletePermissionsGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePermissionsGroupResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePermissionsGroupResponseMultiError) AllErrors() []error { return m }

// DeletePermissionsGroupResponseValidationError is the validation error
// returned by DeletePermissionsGroupResponse.Validate if the designated
// constraints aren't met.
type DeletePermissionsGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePermissionsGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePermissionsGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePermissionsGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePermissionsGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePermissionsGroupResponseValidationError) ErrorName() string {
	return "DeletePermissionsGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePermissionsGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePermissionsGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePermissionsGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePermissionsGroupResponseValidationError{}

// Validate checks the field values on RemoveUserPermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveUserPermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveUserPermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveUserPermissionRequestMultiError, or nil if none found.
func (m *RemoveUserPermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveUserPermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for PermissionsGroupId

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return RemoveUserPermissionRequestMultiError(errors)
	}

	return nil
}

// RemoveUserPermissionRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveUserPermissionRequest.ValidateAll() if
// the designated constraints aren't met.
type RemoveUserPermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveUserPermissionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveUserPermissionRequestMultiError) AllErrors() []error { return m }

// RemoveUserPermissionRequestValidationError is the validation error returned
// by RemoveUserPermissionRequest.Validate if the designated constraints
// aren't met.
type RemoveUserPermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveUserPermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveUserPermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveUserPermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveUserPermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveUserPermissionRequestValidationError) ErrorName() string {
	return "RemoveUserPermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveUserPermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveUserPermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveUserPermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveUserPermissionRequestValidationError{}

// Validate checks the field values on RemoveUserPermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveUserPermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveUserPermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveUserPermissionResponseMultiError, or nil if none found.
func (m *RemoveUserPermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveUserPermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RemoveUserPermissionResponseMultiError(errors)
	}

	return nil
}

// RemoveUserPermissionResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveUserPermissionResponse.ValidateAll() if
// the designated constraints aren't met.
type RemoveUserPermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveUserPermissionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveUserPermissionResponseMultiError) AllErrors() []error { return m }

// RemoveUserPermissionResponseValidationError is the validation error returned
// by RemoveUserPermissionResponse.Validate if the designated constraints
// aren't met.
type RemoveUserPermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveUserPermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveUserPermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveUserPermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveUserPermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveUserPermissionResponseValidationError) ErrorName() string {
	return "RemoveUserPermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveUserPermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveUserPermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveUserPermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveUserPermissionResponseValidationError{}

// Validate checks the field values on AddUserPermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddUserPermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserPermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddUserPermissionRequestMultiError, or nil if none found.
func (m *AddUserPermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserPermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for PermissionsGroupId

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return AddUserPermissionRequestMultiError(errors)
	}

	return nil
}

// AddUserPermissionRequestMultiError is an error wrapping multiple validation
// errors returned by AddUserPermissionRequest.ValidateAll() if the designated
// constraints aren't met.
type AddUserPermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserPermissionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserPermissionRequestMultiError) AllErrors() []error { return m }

// AddUserPermissionRequestValidationError is the validation error returned by
// AddUserPermissionRequest.Validate if the designated constraints aren't met.
type AddUserPermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserPermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserPermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserPermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserPermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserPermissionRequestValidationError) ErrorName() string {
	return "AddUserPermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserPermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserPermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserPermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserPermissionRequestValidationError{}

// Validate checks the field values on AddUserPermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddUserPermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserPermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddUserPermissionResponseMultiError, or nil if none found.
func (m *AddUserPermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserPermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return AddUserPermissionResponseMultiError(errors)
	}

	return nil
}

// AddUserPermissionResponseMultiError is an error wrapping multiple validation
// errors returned by AddUserPermissionResponse.ValidateAll() if the
// designated constraints aren't met.
type AddUserPermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserPermissionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserPermissionResponseMultiError) AllErrors() []error { return m }

// AddUserPermissionResponseValidationError is the validation error returned by
// AddUserPermissionResponse.Validate if the designated constraints aren't met.
type AddUserPermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserPermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserPermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserPermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserPermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserPermissionResponseValidationError) ErrorName() string {
	return "AddUserPermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserPermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserPermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserPermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserPermissionResponseValidationError{}

// Validate checks the field values on GetBusinessPermissionsGroupsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetBusinessPermissionsGroupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessPermissionsGroupsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetBusinessPermissionsGroupsRequestMultiError, or nil if none found.
func (m *GetBusinessPermissionsGroupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessPermissionsGroupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessId

	if len(errors) > 0 {
		return GetBusinessPermissionsGroupsRequestMultiError(errors)
	}

	return nil
}

// GetBusinessPermissionsGroupsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetBusinessPermissionsGroupsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessPermissionsGroupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessPermissionsGroupsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessPermissionsGroupsRequestMultiError) AllErrors() []error { return m }

// GetBusinessPermissionsGroupsRequestValidationError is the validation error
// returned by GetBusinessPermissionsGroupsRequest.Validate if the designated
// constraints aren't met.
type GetBusinessPermissionsGroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessPermissionsGroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessPermissionsGroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessPermissionsGroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessPermissionsGroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessPermissionsGroupsRequestValidationError) ErrorName() string {
	return "GetBusinessPermissionsGroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessPermissionsGroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessPermissionsGroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessPermissionsGroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessPermissionsGroupsRequestValidationError{}

// Validate checks the field values on GetBusinessPermissionsGroupsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetBusinessPermissionsGroupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessPermissionsGroupsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetBusinessPermissionsGroupsResponseMultiError, or nil if none found.
func (m *GetBusinessPermissionsGroupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessPermissionsGroupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPermissionsGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBusinessPermissionsGroupsResponseValidationError{
						field:  fmt.Sprintf("PermissionsGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBusinessPermissionsGroupsResponseValidationError{
						field:  fmt.Sprintf("PermissionsGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBusinessPermissionsGroupsResponseValidationError{
					field:  fmt.Sprintf("PermissionsGroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBusinessPermissionsGroupsResponseMultiError(errors)
	}

	return nil
}

// GetBusinessPermissionsGroupsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetBusinessPermissionsGroupsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessPermissionsGroupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessPermissionsGroupsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessPermissionsGroupsResponseMultiError) AllErrors() []error { return m }

// GetBusinessPermissionsGroupsResponseValidationError is the validation error
// returned by GetBusinessPermissionsGroupsResponse.Validate if the designated
// constraints aren't met.
type GetBusinessPermissionsGroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessPermissionsGroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessPermissionsGroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessPermissionsGroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessPermissionsGroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessPermissionsGroupsResponseValidationError) ErrorName() string {
	return "GetBusinessPermissionsGroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessPermissionsGroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessPermissionsGroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessPermissionsGroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessPermissionsGroupsResponseValidationError{}

// Validate checks the field values on CheckPermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckPermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckPermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckPermissionRequestMultiError, or nil if none found.
func (m *CheckPermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckPermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ResourceId

	if all {
		switch v := interface{}(m.GetPermission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckPermissionRequestValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckPermissionRequestValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckPermissionRequestValidationError{
				field:  "Permission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CheckPermissionRequestMultiError(errors)
	}

	return nil
}

// CheckPermissionRequestMultiError is an error wrapping multiple validation
// errors returned by CheckPermissionRequest.ValidateAll() if the designated
// constraints aren't met.
type CheckPermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckPermissionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckPermissionRequestMultiError) AllErrors() []error { return m }

// CheckPermissionRequestValidationError is the validation error returned by
// CheckPermissionRequest.Validate if the designated constraints aren't met.
type CheckPermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckPermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckPermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckPermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckPermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckPermissionRequestValidationError) ErrorName() string {
	return "CheckPermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckPermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckPermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckPermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckPermissionRequestValidationError{}

// Validate checks the field values on CheckPermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckPermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckPermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckPermissionResponseMultiError, or nil if none found.
func (m *CheckPermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckPermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HasPermission

	if len(errors) > 0 {
		return CheckPermissionResponseMultiError(errors)
	}

	return nil
}

// CheckPermissionResponseMultiError is an error wrapping multiple validation
// errors returned by CheckPermissionResponse.ValidateAll() if the designated
// constraints aren't met.
type CheckPermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckPermissionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckPermissionResponseMultiError) AllErrors() []error { return m }

// CheckPermissionResponseValidationError is the validation error returned by
// CheckPermissionResponse.Validate if the designated constraints aren't met.
type CheckPermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckPermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckPermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckPermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckPermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckPermissionResponseValidationError) ErrorName() string {
	return "CheckPermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckPermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckPermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckPermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckPermissionResponseValidationError{}
