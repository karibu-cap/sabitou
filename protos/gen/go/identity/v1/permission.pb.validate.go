// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: identity/v1/permission.proto

package identityv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Permission with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Permission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Permission with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PermissionMultiError, or
// nil if none found.
func (m *Permission) ValidateAll() error {
	return m.validate(true)
}

func (m *Permission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Action

	// no validation rules for Entity

	// no validation rules for ResourceType

	if len(errors) > 0 {
		return PermissionMultiError(errors)
	}

	return nil
}

// PermissionMultiError is an error wrapping multiple validation errors
// returned by Permission.ValidateAll() if the designated constraints aren't met.
type PermissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionMultiError) AllErrors() []error { return m }

// PermissionValidationError is the validation error returned by
// Permission.Validate if the designated constraints aren't met.
type PermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionValidationError) ErrorName() string { return "PermissionValidationError" }

// Error satisfies the builtin error interface
func (e PermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionValidationError{}

// Validate checks the field values on UserPermission with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserPermission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPermission with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserPermissionMultiError,
// or nil if none found.
func (m *UserPermission) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPermission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserUid

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserPermissionValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserPermissionValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserPermissionValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ResourceUid

	if m.PermissionGroupUid != nil {
		// no validation rules for PermissionGroupUid
	}

	if len(errors) > 0 {
		return UserPermissionMultiError(errors)
	}

	return nil
}

// UserPermissionMultiError is an error wrapping multiple validation errors
// returned by UserPermission.ValidateAll() if the designated constraints
// aren't met.
type UserPermissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPermissionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPermissionMultiError) AllErrors() []error { return m }

// UserPermissionValidationError is the validation error returned by
// UserPermission.Validate if the designated constraints aren't met.
type UserPermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPermissionValidationError) ErrorName() string { return "UserPermissionValidationError" }

// Error satisfies the builtin error interface
func (e UserPermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPermissionValidationError{}

// Validate checks the field values on PermissionGroup with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PermissionGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PermissionGroup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PermissionGroupMultiError, or nil if none found.
func (m *PermissionGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *PermissionGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Name

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PermissionGroupValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PermissionGroupValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PermissionGroupValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.BusinessUid != nil {
		// no validation rules for BusinessUid
	}

	if len(errors) > 0 {
		return PermissionGroupMultiError(errors)
	}

	return nil
}

// PermissionGroupMultiError is an error wrapping multiple validation errors
// returned by PermissionGroup.ValidateAll() if the designated constraints
// aren't met.
type PermissionGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionGroupMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionGroupMultiError) AllErrors() []error { return m }

// PermissionGroupValidationError is the validation error returned by
// PermissionGroup.Validate if the designated constraints aren't met.
type PermissionGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionGroupValidationError) ErrorName() string { return "PermissionGroupValidationError" }

// Error satisfies the builtin error interface
func (e PermissionGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionGroupValidationError{}

// Validate checks the field values on CreatePermissionGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePermissionGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePermissionGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePermissionGroupRequestMultiError, or nil if none found.
func (m *CreatePermissionGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePermissionGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPermissionGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePermissionGroupRequestValidationError{
					field:  "PermissionGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePermissionGroupRequestValidationError{
					field:  "PermissionGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermissionGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePermissionGroupRequestValidationError{
				field:  "PermissionGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePermissionGroupRequestMultiError(errors)
	}

	return nil
}

// CreatePermissionGroupRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePermissionGroupRequest.ValidateAll() if
// the designated constraints aren't met.
type CreatePermissionGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePermissionGroupRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePermissionGroupRequestMultiError) AllErrors() []error { return m }

// CreatePermissionGroupRequestValidationError is the validation error returned
// by CreatePermissionGroupRequest.Validate if the designated constraints
// aren't met.
type CreatePermissionGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePermissionGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePermissionGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePermissionGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePermissionGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePermissionGroupRequestValidationError) ErrorName() string {
	return "CreatePermissionGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePermissionGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePermissionGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePermissionGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePermissionGroupRequestValidationError{}

// Validate checks the field values on CreatePermissionGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePermissionGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePermissionGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePermissionGroupResponseMultiError, or nil if none found.
func (m *CreatePermissionGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePermissionGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return CreatePermissionGroupResponseMultiError(errors)
	}

	return nil
}

// CreatePermissionGroupResponseMultiError is an error wrapping multiple
// validation errors returned by CreatePermissionGroupResponse.ValidateAll()
// if the designated constraints aren't met.
type CreatePermissionGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePermissionGroupResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePermissionGroupResponseMultiError) AllErrors() []error { return m }

// CreatePermissionGroupResponseValidationError is the validation error
// returned by CreatePermissionGroupResponse.Validate if the designated
// constraints aren't met.
type CreatePermissionGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePermissionGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePermissionGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePermissionGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePermissionGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePermissionGroupResponseValidationError) ErrorName() string {
	return "CreatePermissionGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePermissionGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePermissionGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePermissionGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePermissionGroupResponseValidationError{}

// Validate checks the field values on GetPermissionGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPermissionGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPermissionGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPermissionGroupRequestMultiError, or nil if none found.
func (m *GetPermissionGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPermissionGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return GetPermissionGroupRequestMultiError(errors)
	}

	return nil
}

// GetPermissionGroupRequestMultiError is an error wrapping multiple validation
// errors returned by GetPermissionGroupRequest.ValidateAll() if the
// designated constraints aren't met.
type GetPermissionGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPermissionGroupRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPermissionGroupRequestMultiError) AllErrors() []error { return m }

// GetPermissionGroupRequestValidationError is the validation error returned by
// GetPermissionGroupRequest.Validate if the designated constraints aren't met.
type GetPermissionGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPermissionGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPermissionGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPermissionGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPermissionGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPermissionGroupRequestValidationError) ErrorName() string {
	return "GetPermissionGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPermissionGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPermissionGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPermissionGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPermissionGroupRequestValidationError{}

// Validate checks the field values on GetPermissionGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPermissionGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPermissionGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPermissionGroupResponseMultiError, or nil if none found.
func (m *GetPermissionGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPermissionGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPermissionGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPermissionGroupResponseValidationError{
					field:  "PermissionGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPermissionGroupResponseValidationError{
					field:  "PermissionGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermissionGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPermissionGroupResponseValidationError{
				field:  "PermissionGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPermissionGroupResponseMultiError(errors)
	}

	return nil
}

// GetPermissionGroupResponseMultiError is an error wrapping multiple
// validation errors returned by GetPermissionGroupResponse.ValidateAll() if
// the designated constraints aren't met.
type GetPermissionGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPermissionGroupResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPermissionGroupResponseMultiError) AllErrors() []error { return m }

// GetPermissionGroupResponseValidationError is the validation error returned
// by GetPermissionGroupResponse.Validate if the designated constraints aren't met.
type GetPermissionGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPermissionGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPermissionGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPermissionGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPermissionGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPermissionGroupResponseValidationError) ErrorName() string {
	return "GetPermissionGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPermissionGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPermissionGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPermissionGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPermissionGroupResponseValidationError{}

// Validate checks the field values on UpdatePermissionGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePermissionGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePermissionGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePermissionGroupRequestMultiError, or nil if none found.
func (m *UpdatePermissionGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePermissionGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPermissionGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePermissionGroupRequestValidationError{
					field:  "PermissionGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePermissionGroupRequestValidationError{
					field:  "PermissionGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermissionGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePermissionGroupRequestValidationError{
				field:  "PermissionGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePermissionGroupRequestMultiError(errors)
	}

	return nil
}

// UpdatePermissionGroupRequestMultiError is an error wrapping multiple
// validation errors returned by UpdatePermissionGroupRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdatePermissionGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePermissionGroupRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePermissionGroupRequestMultiError) AllErrors() []error { return m }

// UpdatePermissionGroupRequestValidationError is the validation error returned
// by UpdatePermissionGroupRequest.Validate if the designated constraints
// aren't met.
type UpdatePermissionGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePermissionGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePermissionGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePermissionGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePermissionGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePermissionGroupRequestValidationError) ErrorName() string {
	return "UpdatePermissionGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePermissionGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePermissionGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePermissionGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePermissionGroupRequestValidationError{}

// Validate checks the field values on UpdatePermissionGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePermissionGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePermissionGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdatePermissionGroupResponseMultiError, or nil if none found.
func (m *UpdatePermissionGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePermissionGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdatePermissionGroupResponseMultiError(errors)
	}

	return nil
}

// UpdatePermissionGroupResponseMultiError is an error wrapping multiple
// validation errors returned by UpdatePermissionGroupResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdatePermissionGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePermissionGroupResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePermissionGroupResponseMultiError) AllErrors() []error { return m }

// UpdatePermissionGroupResponseValidationError is the validation error
// returned by UpdatePermissionGroupResponse.Validate if the designated
// constraints aren't met.
type UpdatePermissionGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePermissionGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePermissionGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePermissionGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePermissionGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePermissionGroupResponseValidationError) ErrorName() string {
	return "UpdatePermissionGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePermissionGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePermissionGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePermissionGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePermissionGroupResponseValidationError{}

// Validate checks the field values on DeletePermissionGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePermissionGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePermissionGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePermissionGroupRequestMultiError, or nil if none found.
func (m *DeletePermissionGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePermissionGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for BusinessUid

	if len(errors) > 0 {
		return DeletePermissionGroupRequestMultiError(errors)
	}

	return nil
}

// DeletePermissionGroupRequestMultiError is an error wrapping multiple
// validation errors returned by DeletePermissionGroupRequest.ValidateAll() if
// the designated constraints aren't met.
type DeletePermissionGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePermissionGroupRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePermissionGroupRequestMultiError) AllErrors() []error { return m }

// DeletePermissionGroupRequestValidationError is the validation error returned
// by DeletePermissionGroupRequest.Validate if the designated constraints
// aren't met.
type DeletePermissionGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePermissionGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePermissionGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePermissionGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePermissionGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePermissionGroupRequestValidationError) ErrorName() string {
	return "DeletePermissionGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePermissionGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePermissionGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePermissionGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePermissionGroupRequestValidationError{}

// Validate checks the field values on DeletePermissionGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePermissionGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePermissionGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeletePermissionGroupResponseMultiError, or nil if none found.
func (m *DeletePermissionGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePermissionGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeletePermissionGroupResponseMultiError(errors)
	}

	return nil
}

// DeletePermissionGroupResponseMultiError is an error wrapping multiple
// validation errors returned by DeletePermissionGroupResponse.ValidateAll()
// if the designated constraints aren't met.
type DeletePermissionGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePermissionGroupResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePermissionGroupResponseMultiError) AllErrors() []error { return m }

// DeletePermissionGroupResponseValidationError is the validation error
// returned by DeletePermissionGroupResponse.Validate if the designated
// constraints aren't met.
type DeletePermissionGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePermissionGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePermissionGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePermissionGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePermissionGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePermissionGroupResponseValidationError) ErrorName() string {
	return "DeletePermissionGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePermissionGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePermissionGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePermissionGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePermissionGroupResponseValidationError{}

// Validate checks the field values on GetUserPermissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserPermissionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserPermissionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserPermissionsRequestMultiError, or nil if none found.
func (m *GetUserPermissionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserPermissionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserUid

	if len(errors) > 0 {
		return GetUserPermissionsRequestMultiError(errors)
	}

	return nil
}

// GetUserPermissionsRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserPermissionsRequest.ValidateAll() if the
// designated constraints aren't met.
type GetUserPermissionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserPermissionsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserPermissionsRequestMultiError) AllErrors() []error { return m }

// GetUserPermissionsRequestValidationError is the validation error returned by
// GetUserPermissionsRequest.Validate if the designated constraints aren't met.
type GetUserPermissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserPermissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserPermissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserPermissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserPermissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserPermissionsRequestValidationError) ErrorName() string {
	return "GetUserPermissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserPermissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserPermissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserPermissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserPermissionsRequestValidationError{}

// Validate checks the field values on GetUserPermissionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserPermissionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserPermissionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserPermissionsResponseMultiError, or nil if none found.
func (m *GetUserPermissionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserPermissionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUserPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserPermissionsResponseValidationError{
						field:  fmt.Sprintf("UserPermissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserPermissionsResponseValidationError{
						field:  fmt.Sprintf("UserPermissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserPermissionsResponseValidationError{
					field:  fmt.Sprintf("UserPermissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserPermissionsResponseMultiError(errors)
	}

	return nil
}

// GetUserPermissionsResponseMultiError is an error wrapping multiple
// validation errors returned by GetUserPermissionsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetUserPermissionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserPermissionsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserPermissionsResponseMultiError) AllErrors() []error { return m }

// GetUserPermissionsResponseValidationError is the validation error returned
// by GetUserPermissionsResponse.Validate if the designated constraints aren't met.
type GetUserPermissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserPermissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserPermissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserPermissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserPermissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserPermissionsResponseValidationError) ErrorName() string {
	return "GetUserPermissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserPermissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserPermissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserPermissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserPermissionsResponseValidationError{}

// Validate checks the field values on RemoveUserPermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveUserPermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveUserPermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveUserPermissionRequestMultiError, or nil if none found.
func (m *RemoveUserPermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveUserPermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserUid

	// no validation rules for PermissionGroupUid

	// no validation rules for ResourceUid

	if len(errors) > 0 {
		return RemoveUserPermissionRequestMultiError(errors)
	}

	return nil
}

// RemoveUserPermissionRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveUserPermissionRequest.ValidateAll() if
// the designated constraints aren't met.
type RemoveUserPermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveUserPermissionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveUserPermissionRequestMultiError) AllErrors() []error { return m }

// RemoveUserPermissionRequestValidationError is the validation error returned
// by RemoveUserPermissionRequest.Validate if the designated constraints
// aren't met.
type RemoveUserPermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveUserPermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveUserPermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveUserPermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveUserPermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveUserPermissionRequestValidationError) ErrorName() string {
	return "RemoveUserPermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveUserPermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveUserPermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveUserPermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveUserPermissionRequestValidationError{}

// Validate checks the field values on RemoveUserPermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveUserPermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveUserPermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveUserPermissionResponseMultiError, or nil if none found.
func (m *RemoveUserPermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveUserPermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RemoveUserPermissionResponseMultiError(errors)
	}

	return nil
}

// RemoveUserPermissionResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveUserPermissionResponse.ValidateAll() if
// the designated constraints aren't met.
type RemoveUserPermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveUserPermissionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveUserPermissionResponseMultiError) AllErrors() []error { return m }

// RemoveUserPermissionResponseValidationError is the validation error returned
// by RemoveUserPermissionResponse.Validate if the designated constraints
// aren't met.
type RemoveUserPermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveUserPermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveUserPermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveUserPermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveUserPermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveUserPermissionResponseValidationError) ErrorName() string {
	return "RemoveUserPermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveUserPermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveUserPermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveUserPermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveUserPermissionResponseValidationError{}

// Validate checks the field values on AddUserPermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddUserPermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserPermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddUserPermissionRequestMultiError, or nil if none found.
func (m *AddUserPermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserPermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserUid

	// no validation rules for PermissionGroupUid

	// no validation rules for ResourceUid

	if len(errors) > 0 {
		return AddUserPermissionRequestMultiError(errors)
	}

	return nil
}

// AddUserPermissionRequestMultiError is an error wrapping multiple validation
// errors returned by AddUserPermissionRequest.ValidateAll() if the designated
// constraints aren't met.
type AddUserPermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserPermissionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserPermissionRequestMultiError) AllErrors() []error { return m }

// AddUserPermissionRequestValidationError is the validation error returned by
// AddUserPermissionRequest.Validate if the designated constraints aren't met.
type AddUserPermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserPermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserPermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserPermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserPermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserPermissionRequestValidationError) ErrorName() string {
	return "AddUserPermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserPermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserPermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserPermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserPermissionRequestValidationError{}

// Validate checks the field values on AddUserPermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddUserPermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserPermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddUserPermissionResponseMultiError, or nil if none found.
func (m *AddUserPermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserPermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return AddUserPermissionResponseMultiError(errors)
	}

	return nil
}

// AddUserPermissionResponseMultiError is an error wrapping multiple validation
// errors returned by AddUserPermissionResponse.ValidateAll() if the
// designated constraints aren't met.
type AddUserPermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserPermissionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserPermissionResponseMultiError) AllErrors() []error { return m }

// AddUserPermissionResponseValidationError is the validation error returned by
// AddUserPermissionResponse.Validate if the designated constraints aren't met.
type AddUserPermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserPermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserPermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserPermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserPermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserPermissionResponseValidationError) ErrorName() string {
	return "AddUserPermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserPermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserPermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserPermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserPermissionResponseValidationError{}

// Validate checks the field values on GetBusinessPermissionGroupsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetBusinessPermissionGroupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessPermissionGroupsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetBusinessPermissionGroupsRequestMultiError, or nil if none found.
func (m *GetBusinessPermissionGroupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessPermissionGroupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUid

	if len(errors) > 0 {
		return GetBusinessPermissionGroupsRequestMultiError(errors)
	}

	return nil
}

// GetBusinessPermissionGroupsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetBusinessPermissionGroupsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessPermissionGroupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessPermissionGroupsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessPermissionGroupsRequestMultiError) AllErrors() []error { return m }

// GetBusinessPermissionGroupsRequestValidationError is the validation error
// returned by GetBusinessPermissionGroupsRequest.Validate if the designated
// constraints aren't met.
type GetBusinessPermissionGroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessPermissionGroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessPermissionGroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessPermissionGroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessPermissionGroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessPermissionGroupsRequestValidationError) ErrorName() string {
	return "GetBusinessPermissionGroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessPermissionGroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessPermissionGroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessPermissionGroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessPermissionGroupsRequestValidationError{}

// Validate checks the field values on GetBusinessPermissionGroupsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetBusinessPermissionGroupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessPermissionGroupsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetBusinessPermissionGroupsResponseMultiError, or nil if none found.
func (m *GetBusinessPermissionGroupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessPermissionGroupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPermissionGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBusinessPermissionGroupsResponseValidationError{
						field:  fmt.Sprintf("PermissionGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBusinessPermissionGroupsResponseValidationError{
						field:  fmt.Sprintf("PermissionGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBusinessPermissionGroupsResponseValidationError{
					field:  fmt.Sprintf("PermissionGroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBusinessPermissionGroupsResponseMultiError(errors)
	}

	return nil
}

// GetBusinessPermissionGroupsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetBusinessPermissionGroupsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessPermissionGroupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessPermissionGroupsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessPermissionGroupsResponseMultiError) AllErrors() []error { return m }

// GetBusinessPermissionGroupsResponseValidationError is the validation error
// returned by GetBusinessPermissionGroupsResponse.Validate if the designated
// constraints aren't met.
type GetBusinessPermissionGroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessPermissionGroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessPermissionGroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessPermissionGroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessPermissionGroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessPermissionGroupsResponseValidationError) ErrorName() string {
	return "GetBusinessPermissionGroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessPermissionGroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessPermissionGroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessPermissionGroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessPermissionGroupsResponseValidationError{}

// Validate checks the field values on CheckPermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckPermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckPermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckPermissionRequestMultiError, or nil if none found.
func (m *CheckPermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckPermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserUid

	// no validation rules for ResourceUid

	if all {
		switch v := interface{}(m.GetPermission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckPermissionRequestValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckPermissionRequestValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckPermissionRequestValidationError{
				field:  "Permission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CheckPermissionRequestMultiError(errors)
	}

	return nil
}

// CheckPermissionRequestMultiError is an error wrapping multiple validation
// errors returned by CheckPermissionRequest.ValidateAll() if the designated
// constraints aren't met.
type CheckPermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckPermissionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckPermissionRequestMultiError) AllErrors() []error { return m }

// CheckPermissionRequestValidationError is the validation error returned by
// CheckPermissionRequest.Validate if the designated constraints aren't met.
type CheckPermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckPermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckPermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckPermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckPermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckPermissionRequestValidationError) ErrorName() string {
	return "CheckPermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckPermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckPermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckPermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckPermissionRequestValidationError{}

// Validate checks the field values on CheckPermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckPermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckPermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckPermissionResponseMultiError, or nil if none found.
func (m *CheckPermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckPermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HasPermission

	if len(errors) > 0 {
		return CheckPermissionResponseMultiError(errors)
	}

	return nil
}

// CheckPermissionResponseMultiError is an error wrapping multiple validation
// errors returned by CheckPermissionResponse.ValidateAll() if the designated
// constraints aren't met.
type CheckPermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckPermissionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckPermissionResponseMultiError) AllErrors() []error { return m }

// CheckPermissionResponseValidationError is the validation error returned by
// CheckPermissionResponse.Validate if the designated constraints aren't met.
type CheckPermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckPermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckPermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckPermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckPermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckPermissionResponseValidationError) ErrorName() string {
	return "CheckPermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckPermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckPermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckPermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckPermissionResponseValidationError{}
