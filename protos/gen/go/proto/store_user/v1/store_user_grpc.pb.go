// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: store_user/v1/store_user.proto

package storeUserV1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StoreUserService_CreateStoreUser_FullMethodName = "/store_user.v1.StoreUserService/CreateStoreUser"
	StoreUserService_GetStoreUser_FullMethodName    = "/store_user.v1.StoreUserService/GetStoreUser"
	StoreUserService_UpdateStoreUser_FullMethodName = "/store_user.v1.StoreUserService/UpdateStoreUser"
	StoreUserService_DeleteStoreUser_FullMethodName = "/store_user.v1.StoreUserService/DeleteStoreUser"
)

// StoreUserServiceClient is the client API for StoreUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreUserServiceClient interface {
	CreateStoreUser(ctx context.Context, in *CreateStoreUserRequest, opts ...grpc.CallOption) (*CreateStoreUserResponse, error)
	GetStoreUser(ctx context.Context, in *GetStoreUserRequest, opts ...grpc.CallOption) (*GetStoreUserResponse, error)
	UpdateStoreUser(ctx context.Context, in *UpdateStoreUserRequest, opts ...grpc.CallOption) (*UpdateStoreUserResponse, error)
	DeleteStoreUser(ctx context.Context, in *DeleteStoreUserRequest, opts ...grpc.CallOption) (*DeleteStoreUserResponse, error)
}

type storeUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreUserServiceClient(cc grpc.ClientConnInterface) StoreUserServiceClient {
	return &storeUserServiceClient{cc}
}

func (c *storeUserServiceClient) CreateStoreUser(ctx context.Context, in *CreateStoreUserRequest, opts ...grpc.CallOption) (*CreateStoreUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStoreUserResponse)
	err := c.cc.Invoke(ctx, StoreUserService_CreateStoreUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeUserServiceClient) GetStoreUser(ctx context.Context, in *GetStoreUserRequest, opts ...grpc.CallOption) (*GetStoreUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStoreUserResponse)
	err := c.cc.Invoke(ctx, StoreUserService_GetStoreUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeUserServiceClient) UpdateStoreUser(ctx context.Context, in *UpdateStoreUserRequest, opts ...grpc.CallOption) (*UpdateStoreUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStoreUserResponse)
	err := c.cc.Invoke(ctx, StoreUserService_UpdateStoreUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeUserServiceClient) DeleteStoreUser(ctx context.Context, in *DeleteStoreUserRequest, opts ...grpc.CallOption) (*DeleteStoreUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStoreUserResponse)
	err := c.cc.Invoke(ctx, StoreUserService_DeleteStoreUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreUserServiceServer is the server API for StoreUserService service.
// All implementations must embed UnimplementedStoreUserServiceServer
// for forward compatibility.
type StoreUserServiceServer interface {
	CreateStoreUser(context.Context, *CreateStoreUserRequest) (*CreateStoreUserResponse, error)
	GetStoreUser(context.Context, *GetStoreUserRequest) (*GetStoreUserResponse, error)
	UpdateStoreUser(context.Context, *UpdateStoreUserRequest) (*UpdateStoreUserResponse, error)
	DeleteStoreUser(context.Context, *DeleteStoreUserRequest) (*DeleteStoreUserResponse, error)
	mustEmbedUnimplementedStoreUserServiceServer()
}

// UnimplementedStoreUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStoreUserServiceServer struct{}

func (UnimplementedStoreUserServiceServer) CreateStoreUser(context.Context, *CreateStoreUserRequest) (*CreateStoreUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStoreUser not implemented")
}
func (UnimplementedStoreUserServiceServer) GetStoreUser(context.Context, *GetStoreUserRequest) (*GetStoreUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreUser not implemented")
}
func (UnimplementedStoreUserServiceServer) UpdateStoreUser(context.Context, *UpdateStoreUserRequest) (*UpdateStoreUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStoreUser not implemented")
}
func (UnimplementedStoreUserServiceServer) DeleteStoreUser(context.Context, *DeleteStoreUserRequest) (*DeleteStoreUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStoreUser not implemented")
}
func (UnimplementedStoreUserServiceServer) mustEmbedUnimplementedStoreUserServiceServer() {}
func (UnimplementedStoreUserServiceServer) testEmbeddedByValue()                          {}

// UnsafeStoreUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreUserServiceServer will
// result in compilation errors.
type UnsafeStoreUserServiceServer interface {
	mustEmbedUnimplementedStoreUserServiceServer()
}

func RegisterStoreUserServiceServer(s grpc.ServiceRegistrar, srv StoreUserServiceServer) {
	// If the following call pancis, it indicates UnimplementedStoreUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StoreUserService_ServiceDesc, srv)
}

func _StoreUserService_CreateStoreUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoreUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreUserServiceServer).CreateStoreUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreUserService_CreateStoreUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreUserServiceServer).CreateStoreUser(ctx, req.(*CreateStoreUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreUserService_GetStoreUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreUserServiceServer).GetStoreUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreUserService_GetStoreUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreUserServiceServer).GetStoreUser(ctx, req.(*GetStoreUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreUserService_UpdateStoreUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoreUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreUserServiceServer).UpdateStoreUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreUserService_UpdateStoreUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreUserServiceServer).UpdateStoreUser(ctx, req.(*UpdateStoreUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreUserService_DeleteStoreUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStoreUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreUserServiceServer).DeleteStoreUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreUserService_DeleteStoreUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreUserServiceServer).DeleteStoreUser(ctx, req.(*DeleteStoreUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StoreUserService_ServiceDesc is the grpc.ServiceDesc for StoreUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoreUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "store_user.v1.StoreUserService",
	HandlerType: (*StoreUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStoreUser",
			Handler:    _StoreUserService_CreateStoreUser_Handler,
		},
		{
			MethodName: "GetStoreUser",
			Handler:    _StoreUserService_GetStoreUser_Handler,
		},
		{
			MethodName: "UpdateStoreUser",
			Handler:    _StoreUserService_UpdateStoreUser_Handler,
		},
		{
			MethodName: "DeleteStoreUser",
			Handler:    _StoreUserService_DeleteStoreUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "store_user/v1/store_user.proto",
}
