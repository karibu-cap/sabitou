// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: article_category/v1/article_category.proto

package articleCategoryV1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ArticleCategoryService_CreateArticleCategory_FullMethodName = "/article_category.v1.ArticleCategoryService/CreateArticleCategory"
	ArticleCategoryService_GetArticleCategory_FullMethodName    = "/article_category.v1.ArticleCategoryService/GetArticleCategory"
	ArticleCategoryService_UpdateArticleCategory_FullMethodName = "/article_category.v1.ArticleCategoryService/UpdateArticleCategory"
	ArticleCategoryService_DeleteArticleCategory_FullMethodName = "/article_category.v1.ArticleCategoryService/DeleteArticleCategory"
)

// ArticleCategoryServiceClient is the client API for ArticleCategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleCategoryServiceClient interface {
	CreateArticleCategory(ctx context.Context, in *CreateArticleCategoryRequest, opts ...grpc.CallOption) (*CreateArticleCategoryResponse, error)
	GetArticleCategory(ctx context.Context, in *GetArticleCategoryRequest, opts ...grpc.CallOption) (*GetArticleCategoryResponse, error)
	UpdateArticleCategory(ctx context.Context, in *UpdateArticleCategoryRequest, opts ...grpc.CallOption) (*UpdateArticleCategoryResponse, error)
	DeleteArticleCategory(ctx context.Context, in *DeleteArticleCategoryRequest, opts ...grpc.CallOption) (*DeleteArticleCategoryResponse, error)
}

type articleCategoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleCategoryServiceClient(cc grpc.ClientConnInterface) ArticleCategoryServiceClient {
	return &articleCategoryServiceClient{cc}
}

func (c *articleCategoryServiceClient) CreateArticleCategory(ctx context.Context, in *CreateArticleCategoryRequest, opts ...grpc.CallOption) (*CreateArticleCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateArticleCategoryResponse)
	err := c.cc.Invoke(ctx, ArticleCategoryService_CreateArticleCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleCategoryServiceClient) GetArticleCategory(ctx context.Context, in *GetArticleCategoryRequest, opts ...grpc.CallOption) (*GetArticleCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetArticleCategoryResponse)
	err := c.cc.Invoke(ctx, ArticleCategoryService_GetArticleCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleCategoryServiceClient) UpdateArticleCategory(ctx context.Context, in *UpdateArticleCategoryRequest, opts ...grpc.CallOption) (*UpdateArticleCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateArticleCategoryResponse)
	err := c.cc.Invoke(ctx, ArticleCategoryService_UpdateArticleCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleCategoryServiceClient) DeleteArticleCategory(ctx context.Context, in *DeleteArticleCategoryRequest, opts ...grpc.CallOption) (*DeleteArticleCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteArticleCategoryResponse)
	err := c.cc.Invoke(ctx, ArticleCategoryService_DeleteArticleCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleCategoryServiceServer is the server API for ArticleCategoryService service.
// All implementations must embed UnimplementedArticleCategoryServiceServer
// for forward compatibility.
type ArticleCategoryServiceServer interface {
	CreateArticleCategory(context.Context, *CreateArticleCategoryRequest) (*CreateArticleCategoryResponse, error)
	GetArticleCategory(context.Context, *GetArticleCategoryRequest) (*GetArticleCategoryResponse, error)
	UpdateArticleCategory(context.Context, *UpdateArticleCategoryRequest) (*UpdateArticleCategoryResponse, error)
	DeleteArticleCategory(context.Context, *DeleteArticleCategoryRequest) (*DeleteArticleCategoryResponse, error)
	mustEmbedUnimplementedArticleCategoryServiceServer()
}

// UnimplementedArticleCategoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedArticleCategoryServiceServer struct{}

func (UnimplementedArticleCategoryServiceServer) CreateArticleCategory(context.Context, *CreateArticleCategoryRequest) (*CreateArticleCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticleCategory not implemented")
}
func (UnimplementedArticleCategoryServiceServer) GetArticleCategory(context.Context, *GetArticleCategoryRequest) (*GetArticleCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleCategory not implemented")
}
func (UnimplementedArticleCategoryServiceServer) UpdateArticleCategory(context.Context, *UpdateArticleCategoryRequest) (*UpdateArticleCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticleCategory not implemented")
}
func (UnimplementedArticleCategoryServiceServer) DeleteArticleCategory(context.Context, *DeleteArticleCategoryRequest) (*DeleteArticleCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticleCategory not implemented")
}
func (UnimplementedArticleCategoryServiceServer) mustEmbedUnimplementedArticleCategoryServiceServer() {
}
func (UnimplementedArticleCategoryServiceServer) testEmbeddedByValue() {}

// UnsafeArticleCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleCategoryServiceServer will
// result in compilation errors.
type UnsafeArticleCategoryServiceServer interface {
	mustEmbedUnimplementedArticleCategoryServiceServer()
}

func RegisterArticleCategoryServiceServer(s grpc.ServiceRegistrar, srv ArticleCategoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedArticleCategoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ArticleCategoryService_ServiceDesc, srv)
}

func _ArticleCategoryService_CreateArticleCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArticleCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleCategoryServiceServer).CreateArticleCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleCategoryService_CreateArticleCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleCategoryServiceServer).CreateArticleCategory(ctx, req.(*CreateArticleCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleCategoryService_GetArticleCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleCategoryServiceServer).GetArticleCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleCategoryService_GetArticleCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleCategoryServiceServer).GetArticleCategory(ctx, req.(*GetArticleCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleCategoryService_UpdateArticleCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArticleCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleCategoryServiceServer).UpdateArticleCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleCategoryService_UpdateArticleCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleCategoryServiceServer).UpdateArticleCategory(ctx, req.(*UpdateArticleCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleCategoryService_DeleteArticleCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArticleCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleCategoryServiceServer).DeleteArticleCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleCategoryService_DeleteArticleCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleCategoryServiceServer).DeleteArticleCategory(ctx, req.(*DeleteArticleCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArticleCategoryService_ServiceDesc is the grpc.ServiceDesc for ArticleCategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticleCategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "article_category.v1.ArticleCategoryService",
	HandlerType: (*ArticleCategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArticleCategory",
			Handler:    _ArticleCategoryService_CreateArticleCategory_Handler,
		},
		{
			MethodName: "GetArticleCategory",
			Handler:    _ArticleCategoryService_GetArticleCategory_Handler,
		},
		{
			MethodName: "UpdateArticleCategory",
			Handler:    _ArticleCategoryService_UpdateArticleCategory_Handler,
		},
		{
			MethodName: "DeleteArticleCategory",
			Handler:    _ArticleCategoryService_DeleteArticleCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "article_category/v1/article_category.proto",
}
