// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: business_article/v1/business_article.proto

package businessArticleV1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BusinessArticleService_CreateBusinessArticle_FullMethodName = "/business_article.v1.BusinessArticleService/CreateBusinessArticle"
	BusinessArticleService_GetBusinessArticle_FullMethodName    = "/business_article.v1.BusinessArticleService/GetBusinessArticle"
	BusinessArticleService_UpdateBusinessArticle_FullMethodName = "/business_article.v1.BusinessArticleService/UpdateBusinessArticle"
	BusinessArticleService_DeleteBusinessArticle_FullMethodName = "/business_article.v1.BusinessArticleService/DeleteBusinessArticle"
)

// BusinessArticleServiceClient is the client API for BusinessArticleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusinessArticleServiceClient interface {
	CreateBusinessArticle(ctx context.Context, in *CreateBusinessArticleRequest, opts ...grpc.CallOption) (*CreateBusinessArticleResponse, error)
	GetBusinessArticle(ctx context.Context, in *GetBusinessArticleRequest, opts ...grpc.CallOption) (*GetBusinessArticleResponse, error)
	UpdateBusinessArticle(ctx context.Context, in *UpdateBusinessArticleRequest, opts ...grpc.CallOption) (*UpdateBusinessArticleResponse, error)
	DeleteBusinessArticle(ctx context.Context, in *DeleteBusinessArticleRequest, opts ...grpc.CallOption) (*DeleteBusinessArticleResponse, error)
}

type businessArticleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessArticleServiceClient(cc grpc.ClientConnInterface) BusinessArticleServiceClient {
	return &businessArticleServiceClient{cc}
}

func (c *businessArticleServiceClient) CreateBusinessArticle(ctx context.Context, in *CreateBusinessArticleRequest, opts ...grpc.CallOption) (*CreateBusinessArticleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBusinessArticleResponse)
	err := c.cc.Invoke(ctx, BusinessArticleService_CreateBusinessArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessArticleServiceClient) GetBusinessArticle(ctx context.Context, in *GetBusinessArticleRequest, opts ...grpc.CallOption) (*GetBusinessArticleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBusinessArticleResponse)
	err := c.cc.Invoke(ctx, BusinessArticleService_GetBusinessArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessArticleServiceClient) UpdateBusinessArticle(ctx context.Context, in *UpdateBusinessArticleRequest, opts ...grpc.CallOption) (*UpdateBusinessArticleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBusinessArticleResponse)
	err := c.cc.Invoke(ctx, BusinessArticleService_UpdateBusinessArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessArticleServiceClient) DeleteBusinessArticle(ctx context.Context, in *DeleteBusinessArticleRequest, opts ...grpc.CallOption) (*DeleteBusinessArticleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBusinessArticleResponse)
	err := c.cc.Invoke(ctx, BusinessArticleService_DeleteBusinessArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessArticleServiceServer is the server API for BusinessArticleService service.
// All implementations must embed UnimplementedBusinessArticleServiceServer
// for forward compatibility.
type BusinessArticleServiceServer interface {
	CreateBusinessArticle(context.Context, *CreateBusinessArticleRequest) (*CreateBusinessArticleResponse, error)
	GetBusinessArticle(context.Context, *GetBusinessArticleRequest) (*GetBusinessArticleResponse, error)
	UpdateBusinessArticle(context.Context, *UpdateBusinessArticleRequest) (*UpdateBusinessArticleResponse, error)
	DeleteBusinessArticle(context.Context, *DeleteBusinessArticleRequest) (*DeleteBusinessArticleResponse, error)
	mustEmbedUnimplementedBusinessArticleServiceServer()
}

// UnimplementedBusinessArticleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBusinessArticleServiceServer struct{}

func (UnimplementedBusinessArticleServiceServer) CreateBusinessArticle(context.Context, *CreateBusinessArticleRequest) (*CreateBusinessArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessArticle not implemented")
}
func (UnimplementedBusinessArticleServiceServer) GetBusinessArticle(context.Context, *GetBusinessArticleRequest) (*GetBusinessArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessArticle not implemented")
}
func (UnimplementedBusinessArticleServiceServer) UpdateBusinessArticle(context.Context, *UpdateBusinessArticleRequest) (*UpdateBusinessArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessArticle not implemented")
}
func (UnimplementedBusinessArticleServiceServer) DeleteBusinessArticle(context.Context, *DeleteBusinessArticleRequest) (*DeleteBusinessArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessArticle not implemented")
}
func (UnimplementedBusinessArticleServiceServer) mustEmbedUnimplementedBusinessArticleServiceServer() {
}
func (UnimplementedBusinessArticleServiceServer) testEmbeddedByValue() {}

// UnsafeBusinessArticleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusinessArticleServiceServer will
// result in compilation errors.
type UnsafeBusinessArticleServiceServer interface {
	mustEmbedUnimplementedBusinessArticleServiceServer()
}

func RegisterBusinessArticleServiceServer(s grpc.ServiceRegistrar, srv BusinessArticleServiceServer) {
	// If the following call pancis, it indicates UnimplementedBusinessArticleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BusinessArticleService_ServiceDesc, srv)
}

func _BusinessArticleService_CreateBusinessArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessArticleServiceServer).CreateBusinessArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessArticleService_CreateBusinessArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessArticleServiceServer).CreateBusinessArticle(ctx, req.(*CreateBusinessArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessArticleService_GetBusinessArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessArticleServiceServer).GetBusinessArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessArticleService_GetBusinessArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessArticleServiceServer).GetBusinessArticle(ctx, req.(*GetBusinessArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessArticleService_UpdateBusinessArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessArticleServiceServer).UpdateBusinessArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessArticleService_UpdateBusinessArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessArticleServiceServer).UpdateBusinessArticle(ctx, req.(*UpdateBusinessArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessArticleService_DeleteBusinessArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessArticleServiceServer).DeleteBusinessArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessArticleService_DeleteBusinessArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessArticleServiceServer).DeleteBusinessArticle(ctx, req.(*DeleteBusinessArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BusinessArticleService_ServiceDesc is the grpc.ServiceDesc for BusinessArticleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BusinessArticleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "business_article.v1.BusinessArticleService",
	HandlerType: (*BusinessArticleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBusinessArticle",
			Handler:    _BusinessArticleService_CreateBusinessArticle_Handler,
		},
		{
			MethodName: "GetBusinessArticle",
			Handler:    _BusinessArticleService_GetBusinessArticle_Handler,
		},
		{
			MethodName: "UpdateBusinessArticle",
			Handler:    _BusinessArticleService_UpdateBusinessArticle_Handler,
		},
		{
			MethodName: "DeleteBusinessArticle",
			Handler:    _BusinessArticleService_DeleteBusinessArticle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "business_article/v1/business_article.proto",
}
