// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: store/v1/store.proto

package storev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Store with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Store) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Store with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StoreMultiError, or nil if none found.
func (m *Store) ValidateAll() error {
	return m.validate(true)
}

func (m *Store) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Name

	// no validation rules for BusinessId

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.Address != nil {
		// no validation rules for Address
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.LogoMediaUid != nil {
		// no validation rules for LogoMediaUid
	}

	if len(errors) > 0 {
		return StoreMultiError(errors)
	}

	return nil
}

// StoreMultiError is an error wrapping multiple validation errors returned by
// Store.ValidateAll() if the designated constraints aren't met.
type StoreMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoreMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoreMultiError) AllErrors() []error { return m }

// StoreValidationError is the validation error returned by Store.Validate if
// the designated constraints aren't met.
type StoreValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoreValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoreValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoreValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoreValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoreValidationError) ErrorName() string { return "StoreValidationError" }

// Error satisfies the builtin error interface
func (e StoreValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStore.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoreValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoreValidationError{}

// Validate checks the field values on CreateStoreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStoreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStoreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStoreRequestMultiError, or nil if none found.
func (m *CreateStoreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStoreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateStoreRequestValidationError{
					field:  "Store",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateStoreRequestValidationError{
					field:  "Store",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStoreRequestValidationError{
				field:  "Store",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.LogoRawImage != nil {
		// no validation rules for LogoRawImage
	}

	if len(errors) > 0 {
		return CreateStoreRequestMultiError(errors)
	}

	return nil
}

// CreateStoreRequestMultiError is an error wrapping multiple validation errors
// returned by CreateStoreRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateStoreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStoreRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStoreRequestMultiError) AllErrors() []error { return m }

// CreateStoreRequestValidationError is the validation error returned by
// CreateStoreRequest.Validate if the designated constraints aren't met.
type CreateStoreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStoreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStoreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStoreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStoreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStoreRequestValidationError) ErrorName() string {
	return "CreateStoreRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStoreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStoreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStoreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStoreRequestValidationError{}

// Validate checks the field values on CreateStoreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStoreResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStoreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStoreResponseMultiError, or nil if none found.
func (m *CreateStoreResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStoreResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return CreateStoreResponseMultiError(errors)
	}

	return nil
}

// CreateStoreResponseMultiError is an error wrapping multiple validation
// errors returned by CreateStoreResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateStoreResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStoreResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStoreResponseMultiError) AllErrors() []error { return m }

// CreateStoreResponseValidationError is the validation error returned by
// CreateStoreResponse.Validate if the designated constraints aren't met.
type CreateStoreResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStoreResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStoreResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStoreResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStoreResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStoreResponseValidationError) ErrorName() string {
	return "CreateStoreResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStoreResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStoreResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStoreResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStoreResponseValidationError{}

// Validate checks the field values on GetStoreRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStoreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoreRequestMultiError, or nil if none found.
func (m *GetStoreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return GetStoreRequestMultiError(errors)
	}

	return nil
}

// GetStoreRequestMultiError is an error wrapping multiple validation errors
// returned by GetStoreRequest.ValidateAll() if the designated constraints
// aren't met.
type GetStoreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoreRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoreRequestMultiError) AllErrors() []error { return m }

// GetStoreRequestValidationError is the validation error returned by
// GetStoreRequest.Validate if the designated constraints aren't met.
type GetStoreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoreRequestValidationError) ErrorName() string { return "GetStoreRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetStoreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoreRequestValidationError{}

// Validate checks the field values on GetStoreResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStoreResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoreResponseMultiError, or nil if none found.
func (m *GetStoreResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoreResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStoreResponseValidationError{
					field:  "Store",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStoreResponseValidationError{
					field:  "Store",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStoreResponseValidationError{
				field:  "Store",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStoreResponseMultiError(errors)
	}

	return nil
}

// GetStoreResponseMultiError is an error wrapping multiple validation errors
// returned by GetStoreResponse.ValidateAll() if the designated constraints
// aren't met.
type GetStoreResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoreResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoreResponseMultiError) AllErrors() []error { return m }

// GetStoreResponseValidationError is the validation error returned by
// GetStoreResponse.Validate if the designated constraints aren't met.
type GetStoreResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoreResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoreResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoreResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoreResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoreResponseValidationError) ErrorName() string { return "GetStoreResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetStoreResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoreResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoreResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoreResponseValidationError{}

// Validate checks the field values on UpdateStoreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStoreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStoreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStoreRequestMultiError, or nil if none found.
func (m *UpdateStoreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStoreRequestValidationError{
					field:  "Store",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStoreRequestValidationError{
					field:  "Store",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStoreRequestValidationError{
				field:  "Store",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.LogoRawImage != nil {
		// no validation rules for LogoRawImage
	}

	if len(errors) > 0 {
		return UpdateStoreRequestMultiError(errors)
	}

	return nil
}

// UpdateStoreRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateStoreRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateStoreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoreRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoreRequestMultiError) AllErrors() []error { return m }

// UpdateStoreRequestValidationError is the validation error returned by
// UpdateStoreRequest.Validate if the designated constraints aren't met.
type UpdateStoreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoreRequestValidationError) ErrorName() string {
	return "UpdateStoreRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoreRequestValidationError{}

// Validate checks the field values on UpdateStoreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStoreResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStoreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStoreResponseMultiError, or nil if none found.
func (m *UpdateStoreResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoreResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStoreResponseValidationError{
					field:  "Store",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStoreResponseValidationError{
					field:  "Store",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStoreResponseValidationError{
				field:  "Store",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateStoreResponseMultiError(errors)
	}

	return nil
}

// UpdateStoreResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateStoreResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateStoreResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoreResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoreResponseMultiError) AllErrors() []error { return m }

// UpdateStoreResponseValidationError is the validation error returned by
// UpdateStoreResponse.Validate if the designated constraints aren't met.
type UpdateStoreResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoreResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoreResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoreResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoreResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoreResponseValidationError) ErrorName() string {
	return "UpdateStoreResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoreResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoreResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoreResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoreResponseValidationError{}

// Validate checks the field values on DeleteStoreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStoreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStoreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStoreRequestMultiError, or nil if none found.
func (m *DeleteStoreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStoreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return DeleteStoreRequestMultiError(errors)
	}

	return nil
}

// DeleteStoreRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteStoreRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteStoreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStoreRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStoreRequestMultiError) AllErrors() []error { return m }

// DeleteStoreRequestValidationError is the validation error returned by
// DeleteStoreRequest.Validate if the designated constraints aren't met.
type DeleteStoreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStoreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStoreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStoreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStoreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStoreRequestValidationError) ErrorName() string {
	return "DeleteStoreRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStoreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStoreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStoreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStoreRequestValidationError{}

// Validate checks the field values on DeleteStoreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStoreResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStoreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStoreResponseMultiError, or nil if none found.
func (m *DeleteStoreResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStoreResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteStoreResponseMultiError(errors)
	}

	return nil
}

// DeleteStoreResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteStoreResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteStoreResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStoreResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStoreResponseMultiError) AllErrors() []error { return m }

// DeleteStoreResponseValidationError is the validation error returned by
// DeleteStoreResponse.Validate if the designated constraints aren't met.
type DeleteStoreResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStoreResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStoreResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStoreResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStoreResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStoreResponseValidationError) ErrorName() string {
	return "DeleteStoreResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStoreResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStoreResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStoreResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStoreResponseValidationError{}
