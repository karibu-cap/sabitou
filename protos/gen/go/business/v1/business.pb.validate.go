// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: business/v1/business.proto

package businessv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Business with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Business) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Business with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BusinessMultiError, or nil
// if none found.
func (m *Business) ValidateAll() error {
	return m.validate(true)
}

func (m *Business) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for OwnerUid

	// no validation rules for CountryCode

	// no validation rules for CurrencyCode

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.LogoMediaUid != nil {
		// no validation rules for LogoMediaUid
	}

	if len(errors) > 0 {
		return BusinessMultiError(errors)
	}

	return nil
}

// BusinessMultiError is an error wrapping multiple validation errors returned
// by Business.ValidateAll() if the designated constraints aren't met.
type BusinessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessMultiError) AllErrors() []error { return m }

// BusinessValidationError is the validation error returned by
// Business.Validate if the designated constraints aren't met.
type BusinessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessValidationError) ErrorName() string { return "BusinessValidationError" }

// Error satisfies the builtin error interface
func (e BusinessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusiness.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessValidationError{}

// Validate checks the field values on CreateBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBusinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBusinessRequestMultiError, or nil if none found.
func (m *CreateBusinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusiness()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBusinessRequestValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBusinessRequestValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusiness()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessRequestValidationError{
				field:  "Business",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.LogoRawImage != nil {
		// no validation rules for LogoRawImage
	}

	if len(errors) > 0 {
		return CreateBusinessRequestMultiError(errors)
	}

	return nil
}

// CreateBusinessRequestMultiError is an error wrapping multiple validation
// errors returned by CreateBusinessRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBusinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessRequestMultiError) AllErrors() []error { return m }

// CreateBusinessRequestValidationError is the validation error returned by
// CreateBusinessRequest.Validate if the designated constraints aren't met.
type CreateBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessRequestValidationError) ErrorName() string {
	return "CreateBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessRequestValidationError{}

// Validate checks the field values on CreateBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBusinessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBusinessResponseMultiError, or nil if none found.
func (m *CreateBusinessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return CreateBusinessResponseMultiError(errors)
	}

	return nil
}

// CreateBusinessResponseMultiError is an error wrapping multiple validation
// errors returned by CreateBusinessResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateBusinessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessResponseMultiError) AllErrors() []error { return m }

// CreateBusinessResponseValidationError is the validation error returned by
// CreateBusinessResponse.Validate if the designated constraints aren't met.
type CreateBusinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessResponseValidationError) ErrorName() string {
	return "CreateBusinessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessResponseValidationError{}

// Validate checks the field values on GetBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBusinessRequestMultiError, or nil if none found.
func (m *GetBusinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return GetBusinessRequestMultiError(errors)
	}

	return nil
}

// GetBusinessRequestMultiError is an error wrapping multiple validation errors
// returned by GetBusinessRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBusinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessRequestMultiError) AllErrors() []error { return m }

// GetBusinessRequestValidationError is the validation error returned by
// GetBusinessRequest.Validate if the designated constraints aren't met.
type GetBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessRequestValidationError) ErrorName() string {
	return "GetBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessRequestValidationError{}

// Validate checks the field values on GetBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBusinessResponseMultiError, or nil if none found.
func (m *GetBusinessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusiness()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBusinessResponseValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBusinessResponseValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusiness()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBusinessResponseValidationError{
				field:  "Business",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBusinessResponseMultiError(errors)
	}

	return nil
}

// GetBusinessResponseMultiError is an error wrapping multiple validation
// errors returned by GetBusinessResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessResponseMultiError) AllErrors() []error { return m }

// GetBusinessResponseValidationError is the validation error returned by
// GetBusinessResponse.Validate if the designated constraints aren't met.
type GetBusinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessResponseValidationError) ErrorName() string {
	return "GetBusinessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessResponseValidationError{}

// Validate checks the field values on UpdateBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBusinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBusinessRequestMultiError, or nil if none found.
func (m *UpdateBusinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusiness()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBusinessRequestValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBusinessRequestValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusiness()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBusinessRequestValidationError{
				field:  "Business",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.LogoRawImage != nil {
		// no validation rules for LogoRawImage
	}

	if len(errors) > 0 {
		return UpdateBusinessRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateBusinessRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBusinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessRequestValidationError is the validation error returned by
// UpdateBusinessRequest.Validate if the designated constraints aren't met.
type UpdateBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessRequestValidationError) ErrorName() string {
	return "UpdateBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessRequestValidationError{}

// Validate checks the field values on UpdateBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBusinessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBusinessResponseMultiError, or nil if none found.
func (m *UpdateBusinessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateBusinessResponseMultiError(errors)
	}

	return nil
}

// UpdateBusinessResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateBusinessResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateBusinessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessResponseMultiError) AllErrors() []error { return m }

// UpdateBusinessResponseValidationError is the validation error returned by
// UpdateBusinessResponse.Validate if the designated constraints aren't met.
type UpdateBusinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessResponseValidationError) ErrorName() string {
	return "UpdateBusinessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessResponseValidationError{}

// Validate checks the field values on RequestDeleteBusinessRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestDeleteBusinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestDeleteBusinessRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestDeleteBusinessRequestMultiError, or nil if none found.
func (m *RequestDeleteBusinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestDeleteBusinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Password

	if len(errors) > 0 {
		return RequestDeleteBusinessRequestMultiError(errors)
	}

	return nil
}

// RequestDeleteBusinessRequestMultiError is an error wrapping multiple
// validation errors returned by RequestDeleteBusinessRequest.ValidateAll() if
// the designated constraints aren't met.
type RequestDeleteBusinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestDeleteBusinessRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestDeleteBusinessRequestMultiError) AllErrors() []error { return m }

// RequestDeleteBusinessRequestValidationError is the validation error returned
// by RequestDeleteBusinessRequest.Validate if the designated constraints
// aren't met.
type RequestDeleteBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestDeleteBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestDeleteBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestDeleteBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestDeleteBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestDeleteBusinessRequestValidationError) ErrorName() string {
	return "RequestDeleteBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestDeleteBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestDeleteBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestDeleteBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestDeleteBusinessRequestValidationError{}

// Validate checks the field values on RequestDeleteBusinessResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestDeleteBusinessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestDeleteBusinessResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RequestDeleteBusinessResponseMultiError, or nil if none found.
func (m *RequestDeleteBusinessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestDeleteBusinessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestToken

	if len(errors) > 0 {
		return RequestDeleteBusinessResponseMultiError(errors)
	}

	return nil
}

// RequestDeleteBusinessResponseMultiError is an error wrapping multiple
// validation errors returned by RequestDeleteBusinessResponse.ValidateAll()
// if the designated constraints aren't met.
type RequestDeleteBusinessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestDeleteBusinessResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestDeleteBusinessResponseMultiError) AllErrors() []error { return m }

// RequestDeleteBusinessResponseValidationError is the validation error
// returned by RequestDeleteBusinessResponse.Validate if the designated
// constraints aren't met.
type RequestDeleteBusinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestDeleteBusinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestDeleteBusinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestDeleteBusinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestDeleteBusinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestDeleteBusinessResponseValidationError) ErrorName() string {
	return "RequestDeleteBusinessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RequestDeleteBusinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestDeleteBusinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestDeleteBusinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestDeleteBusinessResponseValidationError{}

// Validate checks the field values on DeleteBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBusinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBusinessRequestMultiError, or nil if none found.
func (m *DeleteBusinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestToken

	// no validation rules for VerificationCode

	if len(errors) > 0 {
		return DeleteBusinessRequestMultiError(errors)
	}

	return nil
}

// DeleteBusinessRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteBusinessRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBusinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessRequestMultiError) AllErrors() []error { return m }

// DeleteBusinessRequestValidationError is the validation error returned by
// DeleteBusinessRequest.Validate if the designated constraints aren't met.
type DeleteBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessRequestValidationError) ErrorName() string {
	return "DeleteBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessRequestValidationError{}

// Validate checks the field values on DeleteBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBusinessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBusinessResponseMultiError, or nil if none found.
func (m *DeleteBusinessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteBusinessResponseMultiError(errors)
	}

	return nil
}

// DeleteBusinessResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteBusinessResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteBusinessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessResponseMultiError) AllErrors() []error { return m }

// DeleteBusinessResponseValidationError is the validation error returned by
// DeleteBusinessResponse.Validate if the designated constraints aren't met.
type DeleteBusinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessResponseValidationError) ErrorName() string {
	return "DeleteBusinessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessResponseValidationError{}

// Validate checks the field values on AddUserToBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddUserToBusinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserToBusinessRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddUserToBusinessRequestMultiError, or nil if none found.
func (m *AddUserToBusinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserToBusinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for URef

	if len(errors) > 0 {
		return AddUserToBusinessRequestMultiError(errors)
	}

	return nil
}

// AddUserToBusinessRequestMultiError is an error wrapping multiple validation
// errors returned by AddUserToBusinessRequest.ValidateAll() if the designated
// constraints aren't met.
type AddUserToBusinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserToBusinessRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserToBusinessRequestMultiError) AllErrors() []error { return m }

// AddUserToBusinessRequestValidationError is the validation error returned by
// AddUserToBusinessRequest.Validate if the designated constraints aren't met.
type AddUserToBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserToBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserToBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserToBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserToBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserToBusinessRequestValidationError) ErrorName() string {
	return "AddUserToBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserToBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserToBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserToBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserToBusinessRequestValidationError{}

// Validate checks the field values on AddUserToBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddUserToBusinessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserToBusinessResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddUserToBusinessResponseMultiError, or nil if none found.
func (m *AddUserToBusinessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserToBusinessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for URef

	if len(errors) > 0 {
		return AddUserToBusinessResponseMultiError(errors)
	}

	return nil
}

// AddUserToBusinessResponseMultiError is an error wrapping multiple validation
// errors returned by AddUserToBusinessResponse.ValidateAll() if the
// designated constraints aren't met.
type AddUserToBusinessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserToBusinessResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserToBusinessResponseMultiError) AllErrors() []error { return m }

// AddUserToBusinessResponseValidationError is the validation error returned by
// AddUserToBusinessResponse.Validate if the designated constraints aren't met.
type AddUserToBusinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserToBusinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserToBusinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserToBusinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserToBusinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserToBusinessResponseValidationError) ErrorName() string {
	return "AddUserToBusinessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserToBusinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserToBusinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserToBusinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserToBusinessResponseValidationError{}

// Validate checks the field values on RemoveUserFromBusinessRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveUserFromBusinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveUserFromBusinessRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveUserFromBusinessRequestMultiError, or nil if none found.
func (m *RemoveUserFromBusinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveUserFromBusinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for URef

	if len(errors) > 0 {
		return RemoveUserFromBusinessRequestMultiError(errors)
	}

	return nil
}

// RemoveUserFromBusinessRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveUserFromBusinessRequest.ValidateAll()
// if the designated constraints aren't met.
type RemoveUserFromBusinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveUserFromBusinessRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveUserFromBusinessRequestMultiError) AllErrors() []error { return m }

// RemoveUserFromBusinessRequestValidationError is the validation error
// returned by RemoveUserFromBusinessRequest.Validate if the designated
// constraints aren't met.
type RemoveUserFromBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveUserFromBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveUserFromBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveUserFromBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveUserFromBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveUserFromBusinessRequestValidationError) ErrorName() string {
	return "RemoveUserFromBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveUserFromBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveUserFromBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveUserFromBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveUserFromBusinessRequestValidationError{}

// Validate checks the field values on RemoveUserFromBusinessResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveUserFromBusinessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveUserFromBusinessResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveUserFromBusinessResponseMultiError, or nil if none found.
func (m *RemoveUserFromBusinessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveUserFromBusinessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RemoveUserFromBusinessResponseMultiError(errors)
	}

	return nil
}

// RemoveUserFromBusinessResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveUserFromBusinessResponse.ValidateAll()
// if the designated constraints aren't met.
type RemoveUserFromBusinessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveUserFromBusinessResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveUserFromBusinessResponseMultiError) AllErrors() []error { return m }

// RemoveUserFromBusinessResponseValidationError is the validation error
// returned by RemoveUserFromBusinessResponse.Validate if the designated
// constraints aren't met.
type RemoveUserFromBusinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveUserFromBusinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveUserFromBusinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveUserFromBusinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveUserFromBusinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveUserFromBusinessResponseValidationError) ErrorName() string {
	return "RemoveUserFromBusinessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveUserFromBusinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveUserFromBusinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveUserFromBusinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveUserFromBusinessResponseValidationError{}

// Validate checks the field values on GetBusinessUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBusinessUsersRequestMultiError, or nil if none found.
func (m *GetBusinessUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return GetBusinessUsersRequestMultiError(errors)
	}

	return nil
}

// GetBusinessUsersRequestMultiError is an error wrapping multiple validation
// errors returned by GetBusinessUsersRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessUsersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessUsersRequestMultiError) AllErrors() []error { return m }

// GetBusinessUsersRequestValidationError is the validation error returned by
// GetBusinessUsersRequest.Validate if the designated constraints aren't met.
type GetBusinessUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessUsersRequestValidationError) ErrorName() string {
	return "GetBusinessUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessUsersRequestValidationError{}

// Validate checks the field values on GetBusinessUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBusinessUsersResponseMultiError, or nil if none found.
func (m *GetBusinessUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetBusinessUsersResponseMultiError(errors)
	}

	return nil
}

// GetBusinessUsersResponseMultiError is an error wrapping multiple validation
// errors returned by GetBusinessUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessUsersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessUsersResponseMultiError) AllErrors() []error { return m }

// GetBusinessUsersResponseValidationError is the validation error returned by
// GetBusinessUsersResponse.Validate if the designated constraints aren't met.
type GetBusinessUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessUsersResponseValidationError) ErrorName() string {
	return "GetBusinessUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessUsersResponseValidationError{}
