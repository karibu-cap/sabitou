// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: business/v1/supplier.proto

package businessv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Link with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Link) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Link with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LinkMultiError, or nil if none found.
func (m *Link) ValidateAll() error {
	return m.validate(true)
}

func (m *Link) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Label

	// no validation rules for Url

	if len(errors) > 0 {
		return LinkMultiError(errors)
	}

	return nil
}

// LinkMultiError is an error wrapping multiple validation errors returned by
// Link.ValidateAll() if the designated constraints aren't met.
type LinkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LinkMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LinkMultiError) AllErrors() []error { return m }

// LinkValidationError is the validation error returned by Link.Validate if the
// designated constraints aren't met.
type LinkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkValidationError) ErrorName() string { return "LinkValidationError" }

// Error satisfies the builtin error interface
func (e LinkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLink.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkValidationError{}

// Validate checks the field values on Supplier with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Supplier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Supplier with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SupplierMultiError, or nil
// if none found.
func (m *Supplier) ValidateAll() error {
	return m.validate(true)
}

func (m *Supplier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for BusinessId

	if m.RefId != nil {
		// no validation rules for RefId
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.LogoMediaId != nil {
		// no validation rules for LogoMediaId
	}

	if len(errors) > 0 {
		return SupplierMultiError(errors)
	}

	return nil
}

// SupplierMultiError is an error wrapping multiple validation errors returned
// by Supplier.ValidateAll() if the designated constraints aren't met.
type SupplierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SupplierMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SupplierMultiError) AllErrors() []error { return m }

// SupplierValidationError is the validation error returned by
// Supplier.Validate if the designated constraints aren't met.
type SupplierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SupplierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SupplierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SupplierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SupplierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SupplierValidationError) ErrorName() string { return "SupplierValidationError" }

// Error satisfies the builtin error interface
func (e SupplierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSupplier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SupplierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SupplierValidationError{}

// Validate checks the field values on CreateSupplierRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSupplierRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSupplierRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSupplierRequestMultiError, or nil if none found.
func (m *CreateSupplierRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSupplierRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSupplier()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSupplierRequestValidationError{
					field:  "Supplier",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSupplierRequestValidationError{
					field:  "Supplier",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSupplier()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSupplierRequestValidationError{
				field:  "Supplier",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetExternalLinks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateSupplierRequestValidationError{
						field:  fmt.Sprintf("ExternalLinks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateSupplierRequestValidationError{
						field:  fmt.Sprintf("ExternalLinks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateSupplierRequestValidationError{
					field:  fmt.Sprintf("ExternalLinks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.LogoRawImage != nil {
		// no validation rules for LogoRawImage
	}

	if len(errors) > 0 {
		return CreateSupplierRequestMultiError(errors)
	}

	return nil
}

// CreateSupplierRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSupplierRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSupplierRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSupplierRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSupplierRequestMultiError) AllErrors() []error { return m }

// CreateSupplierRequestValidationError is the validation error returned by
// CreateSupplierRequest.Validate if the designated constraints aren't met.
type CreateSupplierRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSupplierRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSupplierRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSupplierRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSupplierRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSupplierRequestValidationError) ErrorName() string {
	return "CreateSupplierRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSupplierRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSupplierRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSupplierRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSupplierRequestValidationError{}

// Validate checks the field values on CreateSupplierResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSupplierResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSupplierResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSupplierResponseMultiError, or nil if none found.
func (m *CreateSupplierResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSupplierResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefId

	if len(errors) > 0 {
		return CreateSupplierResponseMultiError(errors)
	}

	return nil
}

// CreateSupplierResponseMultiError is an error wrapping multiple validation
// errors returned by CreateSupplierResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateSupplierResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSupplierResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSupplierResponseMultiError) AllErrors() []error { return m }

// CreateSupplierResponseValidationError is the validation error returned by
// CreateSupplierResponse.Validate if the designated constraints aren't met.
type CreateSupplierResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSupplierResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSupplierResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSupplierResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSupplierResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSupplierResponseValidationError) ErrorName() string {
	return "CreateSupplierResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSupplierResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSupplierResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSupplierResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSupplierResponseValidationError{}

// Validate checks the field values on GetSupplierRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSupplierRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSupplierRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSupplierRequestMultiError, or nil if none found.
func (m *GetSupplierRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSupplierRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefId

	if len(errors) > 0 {
		return GetSupplierRequestMultiError(errors)
	}

	return nil
}

// GetSupplierRequestMultiError is an error wrapping multiple validation errors
// returned by GetSupplierRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSupplierRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSupplierRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSupplierRequestMultiError) AllErrors() []error { return m }

// GetSupplierRequestValidationError is the validation error returned by
// GetSupplierRequest.Validate if the designated constraints aren't met.
type GetSupplierRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSupplierRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSupplierRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSupplierRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSupplierRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSupplierRequestValidationError) ErrorName() string {
	return "GetSupplierRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSupplierRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSupplierRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSupplierRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSupplierRequestValidationError{}

// Validate checks the field values on GetSupplierResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSupplierResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSupplierResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSupplierResponseMultiError, or nil if none found.
func (m *GetSupplierResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSupplierResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSupplier()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSupplierResponseValidationError{
					field:  "Supplier",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSupplierResponseValidationError{
					field:  "Supplier",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSupplier()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSupplierResponseValidationError{
				field:  "Supplier",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSupplierResponseMultiError(errors)
	}

	return nil
}

// GetSupplierResponseMultiError is an error wrapping multiple validation
// errors returned by GetSupplierResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSupplierResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSupplierResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSupplierResponseMultiError) AllErrors() []error { return m }

// GetSupplierResponseValidationError is the validation error returned by
// GetSupplierResponse.Validate if the designated constraints aren't met.
type GetSupplierResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSupplierResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSupplierResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSupplierResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSupplierResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSupplierResponseValidationError) ErrorName() string {
	return "GetSupplierResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSupplierResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSupplierResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSupplierResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSupplierResponseValidationError{}

// Validate checks the field values on GetBusinessSuppliersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessSuppliersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessSuppliersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBusinessSuppliersRequestMultiError, or nil if none found.
func (m *GetBusinessSuppliersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessSuppliersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefId

	if len(errors) > 0 {
		return GetBusinessSuppliersRequestMultiError(errors)
	}

	return nil
}

// GetBusinessSuppliersRequestMultiError is an error wrapping multiple
// validation errors returned by GetBusinessSuppliersRequest.ValidateAll() if
// the designated constraints aren't met.
type GetBusinessSuppliersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessSuppliersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessSuppliersRequestMultiError) AllErrors() []error { return m }

// GetBusinessSuppliersRequestValidationError is the validation error returned
// by GetBusinessSuppliersRequest.Validate if the designated constraints
// aren't met.
type GetBusinessSuppliersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessSuppliersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessSuppliersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessSuppliersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessSuppliersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessSuppliersRequestValidationError) ErrorName() string {
	return "GetBusinessSuppliersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessSuppliersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessSuppliersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessSuppliersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessSuppliersRequestValidationError{}

// Validate checks the field values on GetBusinessSuppliersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessSuppliersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessSuppliersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBusinessSuppliersResponseMultiError, or nil if none found.
func (m *GetBusinessSuppliersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessSuppliersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSuppliers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBusinessSuppliersResponseValidationError{
						field:  fmt.Sprintf("Suppliers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBusinessSuppliersResponseValidationError{
						field:  fmt.Sprintf("Suppliers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBusinessSuppliersResponseValidationError{
					field:  fmt.Sprintf("Suppliers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBusinessSuppliersResponseMultiError(errors)
	}

	return nil
}

// GetBusinessSuppliersResponseMultiError is an error wrapping multiple
// validation errors returned by GetBusinessSuppliersResponse.ValidateAll() if
// the designated constraints aren't met.
type GetBusinessSuppliersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessSuppliersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessSuppliersResponseMultiError) AllErrors() []error { return m }

// GetBusinessSuppliersResponseValidationError is the validation error returned
// by GetBusinessSuppliersResponse.Validate if the designated constraints
// aren't met.
type GetBusinessSuppliersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessSuppliersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessSuppliersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessSuppliersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessSuppliersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessSuppliersResponseValidationError) ErrorName() string {
	return "GetBusinessSuppliersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessSuppliersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessSuppliersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessSuppliersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessSuppliersResponseValidationError{}

// Validate checks the field values on UpdateSupplierRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSupplierRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSupplierRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSupplierRequestMultiError, or nil if none found.
func (m *UpdateSupplierRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSupplierRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSupplier()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSupplierRequestValidationError{
					field:  "Supplier",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSupplierRequestValidationError{
					field:  "Supplier",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSupplier()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSupplierRequestValidationError{
				field:  "Supplier",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.LogoRawImage != nil {
		// no validation rules for LogoRawImage
	}

	if len(errors) > 0 {
		return UpdateSupplierRequestMultiError(errors)
	}

	return nil
}

// UpdateSupplierRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateSupplierRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateSupplierRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSupplierRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSupplierRequestMultiError) AllErrors() []error { return m }

// UpdateSupplierRequestValidationError is the validation error returned by
// UpdateSupplierRequest.Validate if the designated constraints aren't met.
type UpdateSupplierRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSupplierRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSupplierRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSupplierRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSupplierRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSupplierRequestValidationError) ErrorName() string {
	return "UpdateSupplierRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSupplierRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSupplierRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSupplierRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSupplierRequestValidationError{}

// Validate checks the field values on UpdateSupplierResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSupplierResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSupplierResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSupplierResponseMultiError, or nil if none found.
func (m *UpdateSupplierResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSupplierResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSupplier()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSupplierResponseValidationError{
					field:  "Supplier",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSupplierResponseValidationError{
					field:  "Supplier",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSupplier()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSupplierResponseValidationError{
				field:  "Supplier",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateSupplierResponseMultiError(errors)
	}

	return nil
}

// UpdateSupplierResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateSupplierResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateSupplierResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSupplierResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSupplierResponseMultiError) AllErrors() []error { return m }

// UpdateSupplierResponseValidationError is the validation error returned by
// UpdateSupplierResponse.Validate if the designated constraints aren't met.
type UpdateSupplierResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSupplierResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSupplierResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSupplierResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSupplierResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSupplierResponseValidationError) ErrorName() string {
	return "UpdateSupplierResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSupplierResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSupplierResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSupplierResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSupplierResponseValidationError{}

// Validate checks the field values on DeleteSupplierRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSupplierRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSupplierRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSupplierRequestMultiError, or nil if none found.
func (m *DeleteSupplierRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSupplierRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefId

	if len(errors) > 0 {
		return DeleteSupplierRequestMultiError(errors)
	}

	return nil
}

// DeleteSupplierRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSupplierRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteSupplierRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSupplierRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSupplierRequestMultiError) AllErrors() []error { return m }

// DeleteSupplierRequestValidationError is the validation error returned by
// DeleteSupplierRequest.Validate if the designated constraints aren't met.
type DeleteSupplierRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSupplierRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSupplierRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSupplierRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSupplierRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSupplierRequestValidationError) ErrorName() string {
	return "DeleteSupplierRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSupplierRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSupplierRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSupplierRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSupplierRequestValidationError{}

// Validate checks the field values on DeleteSupplierResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSupplierResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSupplierResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSupplierResponseMultiError, or nil if none found.
func (m *DeleteSupplierResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSupplierResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteSupplierResponseMultiError(errors)
	}

	return nil
}

// DeleteSupplierResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteSupplierResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteSupplierResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSupplierResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSupplierResponseMultiError) AllErrors() []error { return m }

// DeleteSupplierResponseValidationError is the validation error returned by
// DeleteSupplierResponse.Validate if the designated constraints aren't met.
type DeleteSupplierResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSupplierResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSupplierResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSupplierResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSupplierResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSupplierResponseValidationError) ErrorName() string {
	return "DeleteSupplierResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSupplierResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSupplierResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSupplierResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSupplierResponseValidationError{}
