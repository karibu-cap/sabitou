// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: business/v1/client.proto

package businessv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BusinessClient with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BusinessClient) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessClient with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BusinessClientMultiError,
// or nil if none found.
func (m *BusinessClient) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessClient) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for PhoneNumber

	// no validation rules for BusinessId

	if m.RefId != nil {
		// no validation rules for RefId
	}

	if m.LogoMediaId != nil {
		// no validation rules for LogoMediaId
	}

	if len(errors) > 0 {
		return BusinessClientMultiError(errors)
	}

	return nil
}

// BusinessClientMultiError is an error wrapping multiple validation errors
// returned by BusinessClient.ValidateAll() if the designated constraints
// aren't met.
type BusinessClientMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessClientMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessClientMultiError) AllErrors() []error { return m }

// BusinessClientValidationError is the validation error returned by
// BusinessClient.Validate if the designated constraints aren't met.
type BusinessClientValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessClientValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessClientValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessClientValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessClientValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessClientValidationError) ErrorName() string { return "BusinessClientValidationError" }

// Error satisfies the builtin error interface
func (e BusinessClientValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessClient.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessClientValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessClientValidationError{}

// Validate checks the field values on CreateBusinessClientRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBusinessClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBusinessClientRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBusinessClientRequestMultiError, or nil if none found.
func (m *CreateBusinessClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetClient()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBusinessClientRequestValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBusinessClientRequestValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessClientRequestValidationError{
				field:  "Client",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.LogoRawImage != nil {
		// no validation rules for LogoRawImage
	}

	if len(errors) > 0 {
		return CreateBusinessClientRequestMultiError(errors)
	}

	return nil
}

// CreateBusinessClientRequestMultiError is an error wrapping multiple
// validation errors returned by CreateBusinessClientRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateBusinessClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessClientRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessClientRequestMultiError) AllErrors() []error { return m }

// CreateBusinessClientRequestValidationError is the validation error returned
// by CreateBusinessClientRequest.Validate if the designated constraints
// aren't met.
type CreateBusinessClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessClientRequestValidationError) ErrorName() string {
	return "CreateBusinessClientRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessClientRequestValidationError{}

// Validate checks the field values on CreateBusinessClientResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBusinessClientResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBusinessClientResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBusinessClientResponseMultiError, or nil if none found.
func (m *CreateBusinessClientResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessClientResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefId

	if len(errors) > 0 {
		return CreateBusinessClientResponseMultiError(errors)
	}

	return nil
}

// CreateBusinessClientResponseMultiError is an error wrapping multiple
// validation errors returned by CreateBusinessClientResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateBusinessClientResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessClientResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessClientResponseMultiError) AllErrors() []error { return m }

// CreateBusinessClientResponseValidationError is the validation error returned
// by CreateBusinessClientResponse.Validate if the designated constraints
// aren't met.
type CreateBusinessClientResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessClientResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessClientResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessClientResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessClientResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessClientResponseValidationError) ErrorName() string {
	return "CreateBusinessClientResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessClientResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessClientResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessClientResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessClientResponseValidationError{}

// Validate checks the field values on GetBusinessClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessClientRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBusinessClientRequestMultiError, or nil if none found.
func (m *GetBusinessClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefId

	if len(errors) > 0 {
		return GetBusinessClientRequestMultiError(errors)
	}

	return nil
}

// GetBusinessClientRequestMultiError is an error wrapping multiple validation
// errors returned by GetBusinessClientRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessClientRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessClientRequestMultiError) AllErrors() []error { return m }

// GetBusinessClientRequestValidationError is the validation error returned by
// GetBusinessClientRequest.Validate if the designated constraints aren't met.
type GetBusinessClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessClientRequestValidationError) ErrorName() string {
	return "GetBusinessClientRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessClientRequestValidationError{}

// Validate checks the field values on GetBusinessClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessClientResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessClientResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBusinessClientResponseMultiError, or nil if none found.
func (m *GetBusinessClientResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessClientResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetClient()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBusinessClientResponseValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBusinessClientResponseValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBusinessClientResponseValidationError{
				field:  "Client",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBusinessClientResponseMultiError(errors)
	}

	return nil
}

// GetBusinessClientResponseMultiError is an error wrapping multiple validation
// errors returned by GetBusinessClientResponse.ValidateAll() if the
// designated constraints aren't met.
type GetBusinessClientResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessClientResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessClientResponseMultiError) AllErrors() []error { return m }

// GetBusinessClientResponseValidationError is the validation error returned by
// GetBusinessClientResponse.Validate if the designated constraints aren't met.
type GetBusinessClientResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessClientResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessClientResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessClientResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessClientResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessClientResponseValidationError) ErrorName() string {
	return "GetBusinessClientResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessClientResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessClientResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessClientResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessClientResponseValidationError{}

// Validate checks the field values on UpdateBusinessClientRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBusinessClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessClientRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBusinessClientRequestMultiError, or nil if none found.
func (m *UpdateBusinessClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetClient()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBusinessClientRequestValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBusinessClientRequestValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBusinessClientRequestValidationError{
				field:  "Client",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.LogoRawImage != nil {
		// no validation rules for LogoRawImage
	}

	if len(errors) > 0 {
		return UpdateBusinessClientRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessClientRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateBusinessClientRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateBusinessClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessClientRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessClientRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessClientRequestValidationError is the validation error returned
// by UpdateBusinessClientRequest.Validate if the designated constraints
// aren't met.
type UpdateBusinessClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessClientRequestValidationError) ErrorName() string {
	return "UpdateBusinessClientRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessClientRequestValidationError{}

// Validate checks the field values on UpdateBusinessClientResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBusinessClientResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessClientResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBusinessClientResponseMultiError, or nil if none found.
func (m *UpdateBusinessClientResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessClientResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetClient()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBusinessClientResponseValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBusinessClientResponseValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBusinessClientResponseValidationError{
				field:  "Client",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBusinessClientResponseMultiError(errors)
	}

	return nil
}

// UpdateBusinessClientResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateBusinessClientResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateBusinessClientResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessClientResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessClientResponseMultiError) AllErrors() []error { return m }

// UpdateBusinessClientResponseValidationError is the validation error returned
// by UpdateBusinessClientResponse.Validate if the designated constraints
// aren't met.
type UpdateBusinessClientResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessClientResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessClientResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessClientResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessClientResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessClientResponseValidationError) ErrorName() string {
	return "UpdateBusinessClientResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessClientResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessClientResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessClientResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessClientResponseValidationError{}

// Validate checks the field values on DeleteBusinessClientRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBusinessClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBusinessClientRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBusinessClientRequestMultiError, or nil if none found.
func (m *DeleteBusinessClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefId

	if len(errors) > 0 {
		return DeleteBusinessClientRequestMultiError(errors)
	}

	return nil
}

// DeleteBusinessClientRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteBusinessClientRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteBusinessClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessClientRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessClientRequestMultiError) AllErrors() []error { return m }

// DeleteBusinessClientRequestValidationError is the validation error returned
// by DeleteBusinessClientRequest.Validate if the designated constraints
// aren't met.
type DeleteBusinessClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessClientRequestValidationError) ErrorName() string {
	return "DeleteBusinessClientRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessClientRequestValidationError{}

// Validate checks the field values on DeleteBusinessClientResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBusinessClientResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBusinessClientResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBusinessClientResponseMultiError, or nil if none found.
func (m *DeleteBusinessClientResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessClientResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteBusinessClientResponseMultiError(errors)
	}

	return nil
}

// DeleteBusinessClientResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteBusinessClientResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteBusinessClientResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessClientResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessClientResponseMultiError) AllErrors() []error { return m }

// DeleteBusinessClientResponseValidationError is the validation error returned
// by DeleteBusinessClientResponse.Validate if the designated constraints
// aren't met.
type DeleteBusinessClientResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessClientResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessClientResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessClientResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessClientResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessClientResponseValidationError) ErrorName() string {
	return "DeleteBusinessClientResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessClientResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessClientResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessClientResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessClientResponseValidationError{}
