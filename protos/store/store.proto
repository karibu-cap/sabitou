syntax = "proto3";

package karibu.sabitou.store;

option go_package = "rpc/store";


// Stores are used to store products.
// Note: A store is not always a shop.
message Store {
  // The unique identifier of the store.
  string uid = 1;

  // The address of the store.
  optional string address = 2;

  // The name of the store.
  string name = 3;

  // The description of the store.
  optional string description = 5;

  // The uid of the media of the logo of the store.
  optional string logo_media_uid = 6;

  // The uid of the business of the store.
  string business_id = 7;

  // The date and time the store was created.
  string created_at = 8;

  // The date and time the store was last updated.
  string updated_at = 9;
}

message CreateStoreRequest {
  // The store information to create.
  Store store = 1;

  // The raw image of the logo of the store.
  optional bytes logo_raw_image = 2;
}

message CreateStoreResponse {
  // The unique identifier of the created store.
  string uid = 1;
}

message GetStoreRequest {
  // The unique identifier of the store to retrieve.
  string uid = 1;
}

message GetStoreResponse {
  // The retrieved store data.
  Store store = 1;
}

message UpdateStoreRequest {
  // The store information to update.
  // Note:Only the fields that are set will be updated.
  Store store = 1;

  // The raw image of the logo of the store.
  optional bytes logo_raw_image = 2;
}

message UpdateStoreResponse {
  // The updated store data.
  Store store = 1;
}

message DeleteStoreRequest {
  // The unique identifier of the store to delete.
  string uid = 1;
}

message DeleteStoreResponse {
  // Whether the store was successfully deleted.
  bool success = 1;
}

service StoreService {
  // Creates a new store.
  rpc CreateStore(CreateStoreRequest) returns (CreateStoreResponse) {};

  // Gets a store by id.
  rpc GetStore(GetStoreRequest) returns (GetStoreResponse) {};

  // Updates a store.
  // Note:Only the fields that are set will be updated.
  rpc UpdateStore(UpdateStoreRequest) returns (UpdateStoreResponse) {};

  // Deletes a store.
  rpc DeleteStore(DeleteStoreRequest) returns (DeleteStoreResponse) {};
}