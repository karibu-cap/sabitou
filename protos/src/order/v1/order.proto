syntax = "proto3";

package order.v1;

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";

enum OrderStatus {
  ORDER_STATUS_UNSPECIFIED = 0;
  ORDER_STATUS_PENDING = 1;
  ORDER_STATUS_PROCESSING = 2;
  ORDER_STATUS_COMPLETED = 3;
  ORDER_STATUS_CANCELLED = 4;
}

message StatusHistory {
  OrderStatus status = 1;
  string updated_by = 2;
  google.protobuf.Timestamp updated_at = 3;
}

message OrderItem {
  // The unique identifier of the store product.
  string store_product_id = 1;

  // The quantity of the product.
  int32 quantity = 2;

  // The unit price in XAF of the product.
  // WARN: This value is stored because the unit price can change over time.
  int32 unit_price = 3;

  // The name of the product.
  string item_name = 4;
}

message PurchaseOrder {
  google.protobuf.Timestamp expected_delivery_date = 1;
  string supplier_id = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.uuid = true
  ];
}

message SaleOrder {
  google.protobuf.Timestamp commitment_date = 1;
  optional string client_id = 2 [(buf.validate.field).string.uuid = true];
}

message OrderPrices {
  int32 subtotal = 1;
  int32 discounts = 2;
  int32 total_vat_amount = 3;
  int32 grand_total = 4;
}

message Order {
  // The unique identifier of the order.
  optional string ref_id = 1;

  // The list of items in the order.
  repeated OrderItem order_items = 2;

  // The total price of the order in XAF.
  OrderPrices order_prices = 3;

  // The status of the order.
  OrderStatus status = 4;

  // The status history.
  repeated StatusHistory status_history = 5;

  // The date and time the order was created.
  google.protobuf.Timestamp created_at = 6;

  // The date and time the order was last updated.
  optional google.protobuf.Timestamp updated_at = 7;

  // The unique identifier of the store associated with the order.
  string store_id = 8 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.uuid = true
  ];

  // The unique identifier of the user who initiated the order.
  string initiated_by = 9 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 3
  ];

  // Whether the order is a purchase order or a sale order.
  oneof order_type {
    PurchaseOrder purchase_order = 10;
    SaleOrder sale_order = 11;
  }

  // The reason for the cancellation of the order.
  optional string cancellation_reason = 12;
}

message CreateOrderRequest {
  // The order to create.
  Order order = 1;
}

message CreateOrderResponse {
  // The unique identifier of the created order.
  string order_id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 3
  ];
}

message GetOrderRequest {
  // The unique identifier of the order to retrieve.
  string order_id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 3
  ];
}

message GetOrderResponse {
  // The retrieved order data.
  Order order = 1;

  // The date and time the order was created.
  google.protobuf.Timestamp created_at = 2;

  // The date and time the order was last updated.
  optional google.protobuf.Timestamp updated_at = 3;
}

message DeleteOrderRequest {
  // The unique identifier of the order to delete.
  string order_id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 3
  ];
}

message DeleteOrderResponse {
  // Whether the order was successfully deleted.
  bool success = 1;
}

message FindOrdersRequest {
  // The unique identifier of the order to retrieve.
  optional string ref_id = 1;

  // The id of the client or the supplier if available.
  optional string from_id = 2;

  // Whether the order is from the client or the supplier.
  optional string is_client_order = 3;

  // The status of the order.
  repeated OrderStatus status = 4;

  // The unique identifier of the store associated with the order.
  optional string store_id = 5;
}

message FindOrdersResponse {
  // The unique identifiers of the orders.
  repeated Order orders = 1;
}

service OrderService {
  // Creates a new order.
  rpc CreateOrder(CreateOrderRequest) returns (CreateOrderResponse) {}

  // Gets an order by id.
  rpc GetOrder(GetOrderRequest) returns (GetOrderResponse) {}

  // Deletes an order.
  rpc DeleteOrder(DeleteOrderRequest) returns (DeleteOrderResponse) {}

  // Finds orders by query.
  rpc FindOrders(FindOrdersRequest) returns (FindOrdersResponse) {}
}
