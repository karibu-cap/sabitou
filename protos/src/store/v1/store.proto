syntax = "proto3";

package store.v1;

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";
import "identity/v1/permission.proto";
import "identity/v1/user.proto";

// Stores are used to store products.
// Note: A store is not always a shop.
message Store {
  // The unique identifier of the store.
  optional string ref_id = 1;

  // The name of the store.
  string name = 3;

  // The description of the store.
  optional string description = 5;

  // The id of the media of the logo of the store.
  optional string logo_link_id = 6;

  // The list of external links of the store it can be an address link, a phone number, an email, a website etc.
  optional string external_links_ids = 7;

  // The id of the business of the store.
  string business_id = 8;

  // The date and time the store was created.
  google.protobuf.Timestamp created_at = 9;

  // The date and time the store was last updated.
  optional google.protobuf.Timestamp updated_at = 10;

  // The business contact information.
  optional string contact_info = 11;

  // The business address.
  optional string address = 12;

  // The business email.
  optional string email = 13;
}

enum StoreMemberStatus {
  STORE_MEMBER_STATUS_UNSPECIFIED = 0;
  /// The user is active.
  STORE_MEMBER_STATUS_ACTIVE = 1;
  /// The user is pending.
  STORE_MEMBER_STATUS_PENDING = 2; 
  /// The user is inactive.
  STORE_MEMBER_STATUS_INACTIVE = 3;
  /// The user is banned.
  STORE_MEMBER_STATUS_BANNED = 4;
}

enum StoreMemberStatus {
  STORE_MEMBER_STATUS_UNSPECIFIED = 0;
  /// The user is active.
  STORE_MEMBER_STATUS_ACTIVE = 1;
  /// The user is pending.
  STORE_MEMBER_STATUS_PENDING = 2; 
  /// The user is inactive.
  STORE_MEMBER_STATUS_INACTIVE = 3;
  /// The user is banned.
  STORE_MEMBER_STATUS_BANNED = 4;
}

message StoreMember {
  // The user.
  identity.v1.User user = 1;

  // The unique identifier of the store.
  string store_id = 2;

  // The permissions that the user has.
  repeated identity.v1.StorePermission permissions = 3;

  // The date since when the user became a member.
  google.protobuf.Timestamp member_since = 4;

  // The status of the user.
  StoreMemberStatus status = 5;
}

message CreateStoreRequest {
  // The store information to create.
  Store store = 1;

  // The raw image of the logo of the store.
  optional bytes logo_raw_image = 2;
}

message CreateStoreResponse {
  // The unique identifier of the created store.
  string store_id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 3
  ];
}

message GetStoreRequest {
  // The unique identifier of the store to retrieve.
  string store_id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 3
  ];
}

message GetStoreResponse {
  // The retrieved store data.
  Store store = 1;
}

message UpdateStoreRequest {
  // The store information to update.
  // Note:Only the fields that are set will be updated.
  Store store = 1;

  // The raw image of the logo of the store.
  optional bytes logo_raw_image = 2;
}

message UpdateStoreResponse {
  // The updated store data.
  Store store = 1;
}

message DeleteStoreRequest {
  // The unique identifier of the store to delete.
  string store_id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 3
  ];
}

message GetBusinessStoresRequest {
  // The reference id to the supplier identifier.
  string business_id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 3
  ];
}

message GetBusinessStoresResponse {
  // The list of stores of the business.
  // Note: Only the ids and names of the stores are returned.
  repeated Store stores = 1;
}

message DeleteStoreResponse {
  // Whether the store was successfully deleted.
  bool success = 1;
}

message AddUserToStoreRequest {
  // The email of the user.
  string email = 1;

  // The permissions that the user has.
  repeated identity.v1.StorePermission permissions = 2;

  // The store id.
  string store_id = 3;
}

message AddUserToStoreResponse {
  // Whether the store was successfully deleted.
  bool success = 1;

  // The store member to return
  StoreMember store_member = 2;
}

message UpdateStoreMemberRequest {
  // The unique identifier of the user.
  string user_id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 3
  ];
  
  // The unique identifier of the store.
  string store_id = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 3
  ];
  
  // The permissions to add (optional).
  repeated identity.v1.StorePermission add_permissions = 5;
  
  // The permissions to remove (optional).
  repeated identity.v1.StorePermission remove_permissions = 6;
}

message UpdateStoreMemberResponse {
  // Whether the member was successfully updated.
  bool success = 1;
  
  // The updated store member.
  StoreMember store_member = 2;
}

message StreamStoreMembersRequest {
  // The unique identifier of the store.
  string store_id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 3
  ];
}

message StreamStoreMembersResponse {
  // The store members.
  repeated StoreMember store_members = 1;
}

message SetStoreMemberStatusRequest {
  // The unique identifier of the store.
  string store_id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 3
  ];

  // The unique identifier of the user.
  string user_id = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 3
  ];

  // The status of the user.
  StoreMemberStatus status = 3;
}

message SetStoreMemberStatusResponse {
  // Whether the member was successfully updated.
  bool success = 1;
}

message GetStoreMembersRequest {
  // The unique identifier of the store.
  string store_id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 3
  ];
}

message GetStoreMembersResponse {
  // The store members.
  repeated StoreMember store_members = 1;
}

message RemoveUserFromStoreRequest {
  // The unique identifier of the user.
  string user_id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 3
  ];
  string store_id = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 3
  ];
}

message RemoveUserFromStoreResponse {
  // Whether the user was successfully removed from the store.
  bool success = 1;
}

service StoreService {
  // Creates a new store.
  rpc CreateStore(CreateStoreRequest) returns (CreateStoreResponse) {}

  // Gets a store by id.
  rpc GetStore(GetStoreRequest) returns (GetStoreResponse) {}

  // Updates a store.
  // Note:Only the fields that are set will be updated.
  rpc UpdateStore(UpdateStoreRequest) returns (UpdateStoreResponse) {}

  // Deletes a store.
  rpc DeleteStore(DeleteStoreRequest) returns (DeleteStoreResponse) {}

  // Gets all stores base on business Id.
  rpc GetBusinessStores(GetBusinessStoresRequest) returns (GetBusinessStoresResponse) {}

  // Add user to store or invite user to store.
  rpc AddUserToStore(AddUserToStoreRequest) returns (AddUserToStoreResponse);

  // Update store member.
  rpc UpdateStoreMember(UpdateStoreMemberRequest) returns (UpdateStoreMemberResponse);

  // Stream store members.
  rpc StreamStoreMembers(StreamStoreMembersRequest) returns (stream StreamStoreMembersResponse);

  // Get store members.
  rpc GetStoreMembers(GetStoreMembersRequest) returns (GetStoreMembersResponse);

  // Set store member status.
  rpc SetStoreMemberStatus(SetStoreMemberStatusRequest) returns (SetStoreMemberStatusResponse);

  // Remove user from store.
  rpc RemoveUserFromStore(RemoveUserFromStoreRequest) returns (RemoveUserFromStoreResponse);
}
