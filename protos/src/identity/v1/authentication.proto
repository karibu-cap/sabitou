syntax = "proto3";

package identity.v1;

import "buf/validate/validate.proto";

message LoginRequest {
  // The password of the user.
  string password = 1;

  // The email of the user.
  // Note: required when phone_number and username are not set.
  optional string email = 2 [(buf.validate.field).string.email = true];

  // The phone number of the user.
  // Note: required when email and username are not set.
  optional string phone_number = 3 [(buf.validate.field).string.pattern = "^[0-9\\+\\-\\(\\)\\s]+$"];

  // The username of the user.
  // Note: required when email and phone_number are not set.
  optional string user_name = 4 [(buf.validate.field).string.pattern = "^@[a-zA-Z0-9_]+$"];
}

message LoginResponse {
  // The token to use to authenticate the user in subsequent requests.
  string token = 1;

  // The refresh token to use to refresh the token.
  string refresh_token = 2;
}

// Register a new user with the minimum required information.
// The user will have to set a password later.
// For Business user registration, the business id is required.
message RegisterRequest {
  // The unique identifier of the user.
  string user_name = 1;

  // The email address of the user.
  string email = 2 [(buf.validate.field).string.email = true];

  // The password of the user.
  string password = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 5,
    (buf.validate.field).string.max_len = 72
  ];
}

message RegisterResponse {
  // The token to use to authenticate the user in subsequent requests.
  string token = 1;

  // The refresh token to use to refresh the token.
  string refresh_token = 2;
}

message RequestPasswordResetRequest {
  // The unique identifier of the user.
  // For example, the email address or userId, later it will include the user name as well.
  string u_ref = 1 [(buf.validate.field).cel = {
    id: "string.is_user_ref"
    message: "user_ref must be a valid email address or user id or @username"
    expression: "this.isEmail() || this.matches(\'^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\')"
  }];
}

message RequestPasswordResetResponse {
  // The token to use to process the password reset request.
  string request_token = 1;

  // The verification code to use to process the password reset request.
  // WARN: This field is only set if the user has not yet been verified.
  optional string verification_code = 2;
}

message ResetPasswordRequest {
  // The token to use to process the password reset request.
  string request_token = 1;

  // The new password of the user.
  string password = 2;

  // The verification code sent to the user's email or phone number.
  string verification_code = 3;
}

message ResetPasswordResponse {
  // Whether the password was successfully reset.
  string success = 1;
}

service AuthService {
  // Authenticate the user with the given credentials.
  rpc Login(LoginRequest) returns (LoginResponse) {}

  // Create a user without a password.
  rpc Register(RegisterRequest) returns (RegisterResponse) {}

  // Request the password reset of the user.
  rpc RequestPasswordReset(RequestPasswordResetRequest) returns (RequestPasswordResetResponse) {}

  // Process the password reset request.
  rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse) {}
}
