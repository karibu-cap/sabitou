syntax = "proto3";

package payments.v1;

import "financial/v1/invoice.proto";
import "google/protobuf/timestamp.proto";
import "payments/v1/cash_receipt.proto";
import "payments/v1/gift_voucher.proto";
import "payments/v1/payment_utils.proto";
import "payments/v1/payments.proto";

service PointOfSaleService {
  // Create a cash receipt (most common - 95% of transactions)
  rpc CreateCashReceipt(CreateCashReceiptRequest) returns (CreateCashReceiptResponse);

  // Handle insufficient change scenario (create invoice + gift voucher)
  rpc ProcessSaleWithVoucher(ProcessSaleWithVoucherRequest) returns (ProcessSaleWithVoucherResponse);

  // Use gift voucher in payment
  rpc PayWithVoucher(PayWithVoucherRequest) returns (PayWithVoucherResponse);

  // Get daily sales summary for a cashier
  rpc GetCashierDailySummary(GetCashierDailySummaryRequest) returns (GetCashierDailySummaryResponse);
}

message CreateCashReceiptRequest {
  string cashier_user_id = 1;
  string store_id = 2; // Which store/location
  string customer_id = 3; // Optional - null for anonymous
  repeated SaleLineItem items = 4;
  int64 amount_paid = 5;
  PaymentMethod payment_method = 6;
  string notes = 7;
}

message SaleLineItem {
  string product_id = 1;
  double quantity = 2;
  int64 unit_price = 3; // Can override product price for discounts
}

message CreateCashReceiptResponse {
  string receipt_id = 1;
  payments.v1.CashReceipt receipt = 2;
  int64 change_given = 3;
  repeated string inventory_transaction_ids = 4; // Created transactions
  string message = 5;
}

message ProcessSaleWithVoucherRequest {
  string cashier_user_id = 1;
  string store_id = 2;
  string customer_id = 3; // Optional
  repeated SaleLineItem items = 4;
  int64 amount_paid = 5; // Amount customer gave (more than total)
  PaymentMethod payment_method = 6;
  int64 change_shortage = 7; // How much change we can't give
  string notes = 8;
}

message ProcessSaleWithVoucherResponse {
  string invoice_id = 1;
  financial.v1.Invoice invoice = 2;
  string payment_id = 3;
  payments.v1.Payment payment = 4;
  string voucher_id = 5;
  payments.v1.GiftVoucher voucher = 6;
  string voucher_code = 7; // Print this on receipt
  repeated string inventory_transaction_ids = 8;
  string message = 9;
}

message PayWithVoucherRequest {
  string cashier_user_id = 1;
  string store_id = 2;
  string voucher_code = 3; // Scanned from barcode
  repeated SaleLineItem items = 4;
  int64 additional_cash_payment = 5; // If voucher not enough
  PaymentMethod additional_payment_method = 6;
}

message PayWithVoucherResponse {
  string receipt_id = 1;
  payments.v1.CashReceipt receipt = 2;
  string voucher_transaction_id = 3;
  payments.v1.VoucherTransaction voucher_transaction = 4;
  int64 voucher_amount_used = 5;
  int64 voucher_remaining = 6;
  bool voucher_fully_used = 7;
  string message = 8;
}

message GetCashierDailySummaryRequest {
  string cashier_user_id = 1;
  google.protobuf.Timestamp date = 2; // Defaults to today
}

message GetCashierDailySummaryResponse {
  string cashier_user_id = 1;
  google.protobuf.Timestamp date = 2;
  int32 total_transactions = 3;
  int64 total_sales_amount = 4;
  int64 total_cash_collected = 5;
  int64 total_card_payments = 6;
  int64 total_mobile_money = 7;
  int64 total_vouchers_issued = 8;
  int64 total_vouchers_redeemed = 9;
  repeated payments.v1.CashReceipt receipts = 10;
}
