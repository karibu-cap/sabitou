syntax = "proto3";

package inventory.v1;

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";

message Internationalized {
  // The English name of the product category.
  string en = 1;

  // The French name of the product category.
  string fr = 2;
}

enum CategoryStatus {
  CATEGORY_STATUS_UNSPECIFIED = 0;
  /// The product category is active.
  CATEGORY_STATUS_ACTIVE = 1;
  /// The product category is inactive.
  CATEGORY_STATUS_INACTIVE = 2;
}

enum CategoryType {
  CATEGORY_TYPE_STORE = 0;
  /// The product category is activ.
  CATEGORY_TYPE_BUSINESS = 1;
  /// The product category is inactive.
  CATEGORY_TYPE_PRODUCT = 2;
}

message Category {
  // Unique identifier for the category
  optional string ref_id = 1;

  // Name of the category (e.g., "Electronics", "Smart TVs")
  Internationalized name = 2;

  // Reference to parent category (empty for root categories)
  optional string parent_category_id = 3;

  // The status of the category.
  CategoryStatus status = 4;

  // The status of the category.
  CategoryType type = 5;

  // Business ID associated with the category
  optional string business_id = 6 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 6
  ];

  // Timestamp when the category was created
  google.protobuf.Timestamp created_at = 7;

  // Timestamp when the category was last updated
  optional google.protobuf.Timestamp updated_at = 8;
}

message FindCategoriesRequest {
  // Find the category by business_id
  string business_id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 3
  ];

  // Find the category by ref_id
  optional string ref_id = 2;

  // Find the category by name
  optional string name = 3;

  // Find the category by parent_category_id
  optional string parent_category_id = 4;

  // Find the category by status
  optional CategoryStatus status = 5;

  // Find the category by type
  optional CategoryType type = 6;
}

message FindCategoriesResponse {
  repeated Category categories = 1;
}

message CreateCategoryRequest {
  // The category information to create.
  Category category = 1;
}

message CreateCategoryResponse {
  // Whether the category was successfully created.
  bool success = 1;
}

message UpdateCategoryRequest {
  // The category information to update.
  string category_id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 3
  ];

  // The category information to update.
  Category category = 2;
}

message UpdateCategoryResponse {
  // Whether the category was successfully updated.
  bool success = 1;
}

message DeleteCategoryRequest {
  // The unique identifier of the category.
  string category_id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 3
  ];
}

message DeleteCategoryResponse {
  // Whether the category was successfully deleted.
  bool success = 1;
}

message GetCategoryRequest {
  // The unique identifier of the category.
  string category_id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 3
  ];
}

message GetCategoryResponse {
  // The retrieved category data.
  Category category = 1;
}

service CategoryService {
  // Creates a new category.
  rpc CreateCategory(CreateCategoryRequest) returns (CreateCategoryResponse);

  // Updates a category.
  rpc UpdateCategory(UpdateCategoryRequest) returns (UpdateCategoryResponse);

  // Deletes a category.
  rpc DeleteCategory(DeleteCategoryRequest) returns (DeleteCategoryResponse);

  // Finds categories by name.
  rpc FindCategories(FindCategoriesRequest) returns (FindCategoriesResponse);

  // Gets a category by id.
  rpc GetCategory(GetCategoryRequest) returns (GetCategoryResponse);
}
