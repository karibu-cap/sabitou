syntax = "proto3";

package inventory.v1;

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";
import "inventory/v1/category.proto";

enum GlobalProductStatus {
  GLOBAL_PRODUCT_STATUS_UNSPECIFIED = 0;
  /// The product category is active.
  GLOBAL_PRODUCT_STATUS_ACTIVE = 1;
  /// The product category is inactive.
  GLOBAL_PRODUCT_STATUS_INACTIVE = 2;
}

message GlobalProduct {
  // The unique identifier of the product.
  optional string ref_id = 1;

  // The name of the product.
  inventory.v1.Internationalized name = 2;

  // The description of the product.
  optional inventory.v1.Internationalized description = 3;

  // The bar code value of the product.
  optional string bar_code_value = 4;

  // The product categories of the product.
  repeated inventory.v1.Category categories = 5;

  // The list of image related to the product.
  repeated string images_links_ids = 6;

  // The status of the product.
  GlobalProductStatus status = 7;
}

enum ProductStatus {
  PRODUCT_STATUS_UNSPECIFIED = 0;
  PRODUCT_STATUS_ACTIVE = 1;
  PRODUCT_STATUS_INACTIVE = 2;
}

enum ExpirationType {
  EXPIRATION_TYPE_UNSPECIFIED = 0;
  EXPIRATION_TYPE_NONE = 1; // Non-perishable
  EXPIRATION_TYPE_PRODUCT_LEVEL = 2; // Expiration at product level (e.g., fixed shelf life)
  EXPIRATION_TYPE_LOT_LEVEL = 3; // Requires lot tracking for expiration
}

message StoreProduct {
  // The unique identifier of the business product.
  optional string ref_id = 1;

  // The unique identifier of the store.
  string store_id = 2;

  // The unique identifier of the global product.
  string global_product_id = 3;

  // The sale price in XAF of the product.
  // The currency is determined by the business.
  optional int32 sale_price = 4;

  // The media ids of the images of the product.
  repeated string images_links_ids = 5;

  // The supplier.
  optional string supplier_id = 6;

  // The status of the product.
  ProductStatus status = 7;

  // The stock keeping unit.
  optional string sku = 8;

  // The type of expiration of the product.
  ExpirationType expiration_type = 9;

  // The creation date of the product.
  google.protobuf.Timestamp created_at = 10;

  // The last update date of the product.
  optional google.protobuf.Timestamp updated_at = 11;
}

message CreateGlobalProductRequest {
  // The global product to add.
  GlobalProduct global_product = 1;
}

message CreateGlobalProductResponse {
  // Whether the global product was successfully added.
  bool success = 1;
}

message UpdateGlobalProductRequest {
  // The unique identifier of the global product.
  string global_product_id = 1;

  // The global product to update.
  GlobalProduct global_product = 2;
}

message UpdateGlobalProductResponse {
  // Whether the global product was successfully updated.
  bool success = 1;
}

message DeleteGlobalProductRequest {
  // The unique identifier of the global product.
  string global_product_id = 1;
}

message DeleteGlobalProductResponse {
  // Whether the global product was successfully deleted.
  bool success = 1;
}

message FindStoreProductsRequest {
  // The query to search for store products.
  string store_id = 1;

  // The unique identifier of the product.
  optional string ref_id = 2;

  // The unique identifier of the global product.
  optional string global_product_id = 3;

  // Identify the products that are expired.
  optional google.protobuf.Timestamp expiration_date = 4;

  // Identify the products by supplier.
  optional string supplier_id = 5;
}

message FindStoreProductsResponse {
  // The unique identifiers of the products.
  // WARN: all returned products will only have their id and name.
  repeated StoreProduct products = 1;
}

message FindGlobalProductsRequest {
  // The reference id to the global product identifier.
  optional string ref_id = 1;

  // The query to search for products by category.
  repeated inventory.v1.Category categories = 2;

  // Query the product name.
  optional string name = 3;

  // Identify the products by bar code.
  optional string bar_code_value = 4;

  // Identify the products by store.
  optional GlobalProductStatus status = 5;
}

message FindGlobalProductsResponse {
  // The unique identifiers of the products.
  // WARN: all returned products will only have their id and name.
  repeated GlobalProduct products = 1;
}

message AddStoreProductRequest {
  // The product to add.
  // If the product does not exist, it will be created.
  GlobalProduct global_product = 1;

  // The store product to add.
  StoreProduct store_product = 2;
}

message AddStoreProductResponse {
  // Whether the product was successfully added.
  bool success = 1;
}

message GetStoreProductRequest {
  // The unique identifier of the store product.
  string store_product_id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 3
  ];
}

message GetStoreProductResponse {
  // The retrieved store product data.
  StoreProduct store_product = 1;
}

message UpdateStoreProductRequest {
  // The store product information to update.
  // Note:Only the fields that are set will be updated.
  // Some fields cannot be updated like the product id, store id, and all
  // product fields.
  StoreProduct store_product = 1;

  // The global product information to update.
  // Note:Only the fields that are set will be updated if there is no
  // ref_id set for the global product or will be created in other case.
  optional GlobalProduct global_product = 2;

  // The media ids of the images of the product.
  repeated bytes images_raw_images = 3;
}

message UpdateStoreProductResponse {
  // Whether the store product was successfully updated.
  bool success = 1;
}

message DeleteStoreProductRequest {
  // The unique identifier of the store product.
  string store_product_id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 3
  ];
}

message DeleteStoreProductResponse {
  // Whether the store product was successfully deleted.
  bool success = 1;
}

message StreamStoreProductsRequest {
  // The unique identifier of the store.
  string store_id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 3
  ];

  // Optional filter by supplier ID.
  optional string supplier_id = 2;

  // Optional filter by global product ID.
  optional string global_product_id = 3;
}

message StreamStoreProductsResponse {
  // The store products for the specified store.
  repeated StoreProduct products = 1;
}

message StreamGlobalProductsRequest {
  // The unique identifier of the store.
  string store_id = 1;
}

message StreamGlobalProductsResponse {
  // The global products for the specified store.
  repeated GlobalProduct products = 1;
}



message ListStoreProductsRequest {
  string store_id = 1 [(buf.validate.field).required = true];
  optional string search_query = 2;  // Name/SKU search
  repeated string category_ids = 3;
  optional inventory.v1.ProductStatus status = 4;
  int32 page_size = 5;
  string page_token = 6;  // For pagination
}

message ListStoreProductsResponse {
  repeated inventory.v1.StoreProduct products = 1;
  int32 total_count = 2;
  string next_page_token = 3;
}

service StoreProductService {
  // Finds products by name.
  rpc FindGlobalProducts(FindGlobalProductsRequest) returns (FindGlobalProductsResponse);

  // Creates a global product.
  rpc CreateGlobalProduct(CreateGlobalProductRequest) returns (CreateGlobalProductResponse);

  // Updates a global product.
  rpc UpdateGlobalProduct(UpdateGlobalProductRequest) returns (UpdateGlobalProductResponse);

  // Deletes a global product.
  rpc DeleteGlobalProduct(DeleteGlobalProductRequest) returns (DeleteGlobalProductResponse);

  // Adds a product to a store.
  rpc AddProduct(AddStoreProductRequest) returns (AddStoreProductResponse);

  // Gets a store product by id.
  rpc GetStoreProduct(GetStoreProductRequest) returns (GetStoreProductResponse);

  // Updates a store product.
  rpc UpdateStoreProduct(UpdateStoreProductRequest) returns (UpdateStoreProductResponse);

  // Deletes a store product.
  // Only store products that are not in any orders can be deleted.
  rpc DeleteStoreProduct(DeleteStoreProductRequest) returns (DeleteStoreProductResponse);

  // Finds products by name.
  rpc FindStoreProducts(FindStoreProductsRequest) returns (FindStoreProductsResponse);

  // Streams all products for a store for real-time updates.
  rpc StreamStoreProducts(StreamStoreProductsRequest) returns (stream StreamStoreProductsResponse);

  // Streams all global products for real-time updates.
  rpc StreamGlobalProducts(StreamGlobalProductsRequest) returns (stream StreamGlobalProductsResponse);

    // Lists products with pagination and filters.
  rpc ListStoreProducts(ListStoreProductsRequest) returns (ListStoreProductsResponse);
}
