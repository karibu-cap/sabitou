syntax = "proto3";

package stockInBound.v1;
import "google/protobuf/timestamp.proto";

enum InboundType {
  INBOUND_TYPE_UNSPECIFIED = 0;
  // New stock added (purchase, restocking)
  INBOUND_TYPE_STOCK_IN = 1;
  // Customer returns
  INBOUND_TYPE_CUSTOMER_RETURN = 2;
  // Inventory adjustments (optional for audit trail)
  // e.g. correction of stock count
  INBOUND_TYPE_ADJUSTMENT = 3;
}

// Tracks all stock additions to inventory
message StockInbound {
  string ref_id = 1;

  // Type of inbound stock
  InboundType inbound_type = 2;

  // Quantity added to inventory
  int32 quantity = 3;

  // Stock quantity before this transaction
  int32 quantity_before = 4;

  // Stock quantity after this transaction
  int32 quantity_after = 5;

  // Purchase/cost price per unit
  int32 unit_cost = 7;

  // Supplier ID (for stock in transactions)
  optional string supplier_id = 8;

  // Reference number (PO number, invoice number, etc.)
  optional string reference_number = 9;

  // Batch/lot number (for traceability if needed)
  optional string batch_number = 10;

  // Reason for the transaction (especially for adjustments)
  optional string reason = 11;

  // Expiration date for this batch (if applicable)
  optional google.protobuf.Timestamp batch_expiry_date = 12;

  // When this supply was received/processed
  google.protobuf.Timestamp created_at = 13;

  // User who performed the transaction
  string performed_by = 14;
}

message CreateStockInboundRequest {
  // The stock inbound to create.
  StockInbound stock_inbound = 1;
}

message CreateStockInboundResponse {
  // Whether the stock inbound was successfully created.
  bool success = 1;
}

// Limit the update to only (reason, quantity for return or adjustment, performed_by)
message UpdateStockInboundRequest {
  string ref_id = 1;
  // The quantity to update.
  // Note the quantity  can be negative for adjustments.
  optional int32 quantity = 2;
  optional string reason = 3;
  optional string performed_by = 4;
}

message UpdateStockInboundResponse {
  bool success = 1;
}


service StockInboundService {
  // Creates a stock in bound.
  rpc CreateStockInbound(CreateStockInboundRequest) returns (CreateStockInboundResponse);

  // Updates the stock in bound.
  rpc UpdateStockInbound(UpdateStockInboundRequest) returns (UpdateStockInboundResponse);
}

