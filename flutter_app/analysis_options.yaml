# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

analyzer:
  plugins:
    - dart_code_linter
  exclude:
    - sabitou_clients/**/build/**
    - sabitou_clients/**/test/**
    - sabitou_clients/ios/**
    - sabitou_clients/android/**
    - sabitou_clients/web/**
    - sabitou_clients/windows/**
    - sabitou_clients/linux/**
    - sabitou_clients/macos/**
  language:
    strict-casts: true
    strict-raw-types: true
  errors:
    # treat missing required parameters as a warning (not a hint).
    missing_required_param: warning

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    - prefer_const_constructors
    - avoid_print:
        severity: error
    - use_key_in_widget_constructors
    - prefer_single_quotes
    - avoid_redundant_argument_values
    - avoid_bool_literals_in_conditional_expressions
    - unawaited_futures
    - prefer_void_to_null
    - avoid_returning_null_for_future
    - avoid_unnecessary_containers
    - use_build_context_synchronously
    - use_named_constants
    - cascade_invocations
    - avoid_empty_else
    - avoid_init_to_null
    - avoid_return_types_on_setters
    - avoid_web_libraries_in_flutter
    - await_only_futures
    - camel_case_types
    - cancel_subscriptions
    - close_sinks
    - control_flow_in_finally
    - empty_constructor_bodies
    - empty_statements
    - hash_and_equals
    - implementation_imports
    - library_names
    - non_constant_identifier_names
    - package_api_docs
    - package_names
    - package_prefixed_library_names
    - prefer_is_not_empty
    - slash_for_doc_comments
    - test_types_in_equals
    - throw_in_finally
    - type_init_formals
    - unnecessary_brace_in_string_interps
    - unnecessary_getters_setters
    - unnecessary_statements
    - unrelated_type_equality_checks
    - valid_regexps
    #
    #
    # Effective Dart rules.
    #
    # These rules follow style from
    # https://dart.dev/guides/language/effective-dart
    - avoid_relative_lib_imports
    - prefer_relative_imports
    - avoid_catches_without_on_clauses
    - avoid_catching_errors
    - avoid_equals_and_hash_code_on_mutable_classes
    - avoid_function_literals_in_foreach_calls
    - avoid_null_checks_in_equality_operators
    - avoid_private_typedef_functions
    - avoid_returning_null
    - avoid_returning_this
    - avoid_setters_without_getters
    - avoid_types_on_closure_parameters
    - camel_case_extensions
    - constant_identifier_names
    - curly_braces_in_flow_control_structures
    - directives_ordering
    - prefer_adjacent_string_concatenation
    - prefer_collection_literals
    - prefer_equal_for_default_values
    - prefer_final_fields
    - prefer_function_declarations_over_variables
    - prefer_generic_function_type_aliases
    - prefer_initializing_formals
    - prefer_interpolation_to_compose_strings
    - prefer_is_empty
    - prefer_iterable_whereType
    - prefer_mixin
    - public_member_api_docs
    - type_annotate_public_apis
    - unnecessary_const
    - unnecessary_lambdas
    - unnecessary_new
    - unnecessary_this
    - use_rethrow_when_possible
    - use_to_and_as_if_applicable
    - sized_box_for_whitespace
    - prefer_const_literals_to_create_immutables
    #
    #
    # Pedantic Dart rules.
    #
    - avoid_types_as_parameter_names
    - no_duplicate_case_values
    - always_declare_return_types
    - always_require_non_null_named_parameters
    - annotate_overrides
    - empty_catches
    - null_closures
    - prefer_conditional_assignment
    - prefer_contains
    - prefer_for_elements_to_map_fromIterable
    - prefer_if_null_operators
    - prefer_spread_collections
    - recursive_getters
    - unnecessary_null_in_if_null_operators
    - use_function_type_syntax_for_parameters
    #
    #
    #
    - prefer_final_locals
    - require_trailing_commas
    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule
dart_code_linter:
  exclude:
    exclude:
      - sabitou_clients/**/build/**
      - sabitou_clients/test/**
      - sabitou_clients/ios/**
      - sabitou_clients/android/**
      - sabitou_clients/web/**
      - sabitou_clients/windows/**
      - sabitou_clients/linux/**
      - sabitou_clients/macos/**
  metrics:
    cyclomatic-complexity: 25
    number-of-parameters: 3
    maximum-nesting-level: 8
    source-lines-of-code: 90
    min-identifier-length: 2

  anti-patterns:
    - long-method:
        severity: error
  rules:
    # Dart rules.
    - avoid-collection-methods-with-unrelated-types:
        severity: style
    - avoid-global-state:
        severity: style
    - avoid-late-keyword:
        severity: style
    - avoid-missing-enum-constant-in-map:
        severity: style
    - avoid-nested-conditional-expressions:
        severity: style
    - avoid-non-null-assertion:
        severity: error
    - avoid-throw-in-catch-block
    - avoid-unnecessary-type-assertions
    - avoid-unnecessary-type-casts
    - avoid-unrelated-type-assertions
    - avoid-unused-parameters:
        severity: style
    - binary-expression-operand-order:
        severity: style
    - double-literal-format:
        severity: style
    - format-comment:
        severity: error
    - member-ordering:
        severity: style
        order:
          - fields
          - getters-setters
          - methods
    - newline-before-return:
        severity: error
    - no-boolean-literal-compare:
        severity: style
    - no-empty-block:
        severity: style
    - no-equal-then-else:
        severity: style
    - no-object-declaration:
        severity: style
    - prefer-async-await:
        severity: style
    - prefer-conditional-expressions:
        severity: style
    - prefer-correct-type-name:
        severity: style
    - prefer-first:
        severity: style
    - prefer-last:
        severity: style
    - prefer-trailing-comma:
        severity: error

    # Flutter rules.
    - always-remove-listener:
        severity: error
    - avoid-border-all:
        severity: error
    - avoid-returning-widgets:
        severity: error
    - avoid-unnecessary-setstate:
        severity: error
    - avoid-wrapping-in-padding:
        severity: error
    - prefer-const-border-radius:
        severity: error
    - prefer-extracting-callbacks:
        severity: style
    - avoid-shrink-wrap-in-lists:
        severity: error
    - avoid-wrapping-in-padding:
        severity: error
    - prefer-correct-edge-insets-constructor:
        severity: error
    - prefer-using-list-view:
        severity: error
# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
