// Code generated by protoc-gen-twirp v8.1.3, DO NOT EDIT.
// source: identity/permission.proto

package identity

import context "context"
import fmt "fmt"
import http "net/http"
import io "io"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// ===========================
// PermissionService Interface
// ===========================

type PermissionService interface {
	// Creates a new permission group.
	CreatePermissionGroup(context.Context, *CreatePermissionGroupRequest) (*CreatePermissionGroupResponse, error)

	// Gets a permission group by id.
	GetPermissionGroup(context.Context, *GetPermissionGroupRequest) (*GetPermissionGroupResponse, error)

	// Updates a permission group.
	UpdatePermissionGroup(context.Context, *UpdatePermissionGroupRequest) (*UpdatePermissionGroupResponse, error)

	// Deletes a permission group.
	DeletePermissionGroup(context.Context, *DeletePermissionGroupRequest) (*DeletePermissionGroupResponse, error)

	// Gets the permissions of the user.
	GetUserPermissions(context.Context, *GetUserPermissionsRequest) (*GetUserPermissionsResponse, error)

	// Removes a permission from the user.
	RemoveUserPermission(context.Context, *RemoveUserPermissionRequest) (*RemoveUserPermissionResponse, error)

	// Adds a permission to the user.
	AddUserPermission(context.Context, *AddUserPermissionRequest) (*AddUserPermissionResponse, error)

	// Gets the permission groups of the business.
	GetBusinessPermissionGroups(context.Context, *GetBusinessPermissionGroupsRequest) (*GetBusinessPermissionGroupsResponse, error)

	// Checks if the user has the provided permission for the provided resource.
	CheckPermission(context.Context, *CheckPermissionRequest) (*CheckPermissionResponse, error)
}

// =================================
// PermissionService Protobuf Client
// =================================

type permissionServiceProtobufClient struct {
	client      HTTPClient
	urls        [9]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewPermissionServiceProtobufClient creates a Protobuf client that implements the PermissionService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewPermissionServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) PermissionService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "karibu.sabitou.identity", "PermissionService")
	urls := [9]string{
		serviceURL + "CreatePermissionGroup",
		serviceURL + "GetPermissionGroup",
		serviceURL + "UpdatePermissionGroup",
		serviceURL + "DeletePermissionGroup",
		serviceURL + "GetUserPermissions",
		serviceURL + "RemoveUserPermission",
		serviceURL + "AddUserPermission",
		serviceURL + "GetBusinessPermissionGroups",
		serviceURL + "CheckPermission",
	}

	return &permissionServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *permissionServiceProtobufClient) CreatePermissionGroup(ctx context.Context, in *CreatePermissionGroupRequest) (*CreatePermissionGroupResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.identity")
	ctx = ctxsetters.WithServiceName(ctx, "PermissionService")
	ctx = ctxsetters.WithMethodName(ctx, "CreatePermissionGroup")
	caller := c.callCreatePermissionGroup
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreatePermissionGroupRequest) (*CreatePermissionGroupResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreatePermissionGroupRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreatePermissionGroupRequest) when calling interceptor")
					}
					return c.callCreatePermissionGroup(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreatePermissionGroupResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreatePermissionGroupResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *permissionServiceProtobufClient) callCreatePermissionGroup(ctx context.Context, in *CreatePermissionGroupRequest) (*CreatePermissionGroupResponse, error) {
	out := new(CreatePermissionGroupResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *permissionServiceProtobufClient) GetPermissionGroup(ctx context.Context, in *GetPermissionGroupRequest) (*GetPermissionGroupResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.identity")
	ctx = ctxsetters.WithServiceName(ctx, "PermissionService")
	ctx = ctxsetters.WithMethodName(ctx, "GetPermissionGroup")
	caller := c.callGetPermissionGroup
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetPermissionGroupRequest) (*GetPermissionGroupResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetPermissionGroupRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetPermissionGroupRequest) when calling interceptor")
					}
					return c.callGetPermissionGroup(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetPermissionGroupResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetPermissionGroupResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *permissionServiceProtobufClient) callGetPermissionGroup(ctx context.Context, in *GetPermissionGroupRequest) (*GetPermissionGroupResponse, error) {
	out := new(GetPermissionGroupResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *permissionServiceProtobufClient) UpdatePermissionGroup(ctx context.Context, in *UpdatePermissionGroupRequest) (*UpdatePermissionGroupResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.identity")
	ctx = ctxsetters.WithServiceName(ctx, "PermissionService")
	ctx = ctxsetters.WithMethodName(ctx, "UpdatePermissionGroup")
	caller := c.callUpdatePermissionGroup
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdatePermissionGroupRequest) (*UpdatePermissionGroupResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdatePermissionGroupRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdatePermissionGroupRequest) when calling interceptor")
					}
					return c.callUpdatePermissionGroup(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdatePermissionGroupResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdatePermissionGroupResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *permissionServiceProtobufClient) callUpdatePermissionGroup(ctx context.Context, in *UpdatePermissionGroupRequest) (*UpdatePermissionGroupResponse, error) {
	out := new(UpdatePermissionGroupResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *permissionServiceProtobufClient) DeletePermissionGroup(ctx context.Context, in *DeletePermissionGroupRequest) (*DeletePermissionGroupResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.identity")
	ctx = ctxsetters.WithServiceName(ctx, "PermissionService")
	ctx = ctxsetters.WithMethodName(ctx, "DeletePermissionGroup")
	caller := c.callDeletePermissionGroup
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeletePermissionGroupRequest) (*DeletePermissionGroupResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeletePermissionGroupRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeletePermissionGroupRequest) when calling interceptor")
					}
					return c.callDeletePermissionGroup(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeletePermissionGroupResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeletePermissionGroupResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *permissionServiceProtobufClient) callDeletePermissionGroup(ctx context.Context, in *DeletePermissionGroupRequest) (*DeletePermissionGroupResponse, error) {
	out := new(DeletePermissionGroupResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *permissionServiceProtobufClient) GetUserPermissions(ctx context.Context, in *GetUserPermissionsRequest) (*GetUserPermissionsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.identity")
	ctx = ctxsetters.WithServiceName(ctx, "PermissionService")
	ctx = ctxsetters.WithMethodName(ctx, "GetUserPermissions")
	caller := c.callGetUserPermissions
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetUserPermissionsRequest) (*GetUserPermissionsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserPermissionsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserPermissionsRequest) when calling interceptor")
					}
					return c.callGetUserPermissions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetUserPermissionsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetUserPermissionsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *permissionServiceProtobufClient) callGetUserPermissions(ctx context.Context, in *GetUserPermissionsRequest) (*GetUserPermissionsResponse, error) {
	out := new(GetUserPermissionsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *permissionServiceProtobufClient) RemoveUserPermission(ctx context.Context, in *RemoveUserPermissionRequest) (*RemoveUserPermissionResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.identity")
	ctx = ctxsetters.WithServiceName(ctx, "PermissionService")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveUserPermission")
	caller := c.callRemoveUserPermission
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RemoveUserPermissionRequest) (*RemoveUserPermissionResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RemoveUserPermissionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RemoveUserPermissionRequest) when calling interceptor")
					}
					return c.callRemoveUserPermission(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RemoveUserPermissionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RemoveUserPermissionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *permissionServiceProtobufClient) callRemoveUserPermission(ctx context.Context, in *RemoveUserPermissionRequest) (*RemoveUserPermissionResponse, error) {
	out := new(RemoveUserPermissionResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *permissionServiceProtobufClient) AddUserPermission(ctx context.Context, in *AddUserPermissionRequest) (*AddUserPermissionResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.identity")
	ctx = ctxsetters.WithServiceName(ctx, "PermissionService")
	ctx = ctxsetters.WithMethodName(ctx, "AddUserPermission")
	caller := c.callAddUserPermission
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *AddUserPermissionRequest) (*AddUserPermissionResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddUserPermissionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddUserPermissionRequest) when calling interceptor")
					}
					return c.callAddUserPermission(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AddUserPermissionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AddUserPermissionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *permissionServiceProtobufClient) callAddUserPermission(ctx context.Context, in *AddUserPermissionRequest) (*AddUserPermissionResponse, error) {
	out := new(AddUserPermissionResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *permissionServiceProtobufClient) GetBusinessPermissionGroups(ctx context.Context, in *GetBusinessPermissionGroupsRequest) (*GetBusinessPermissionGroupsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.identity")
	ctx = ctxsetters.WithServiceName(ctx, "PermissionService")
	ctx = ctxsetters.WithMethodName(ctx, "GetBusinessPermissionGroups")
	caller := c.callGetBusinessPermissionGroups
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetBusinessPermissionGroupsRequest) (*GetBusinessPermissionGroupsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetBusinessPermissionGroupsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetBusinessPermissionGroupsRequest) when calling interceptor")
					}
					return c.callGetBusinessPermissionGroups(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetBusinessPermissionGroupsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetBusinessPermissionGroupsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *permissionServiceProtobufClient) callGetBusinessPermissionGroups(ctx context.Context, in *GetBusinessPermissionGroupsRequest) (*GetBusinessPermissionGroupsResponse, error) {
	out := new(GetBusinessPermissionGroupsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *permissionServiceProtobufClient) CheckPermission(ctx context.Context, in *CheckPermissionRequest) (*CheckPermissionResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.identity")
	ctx = ctxsetters.WithServiceName(ctx, "PermissionService")
	ctx = ctxsetters.WithMethodName(ctx, "CheckPermission")
	caller := c.callCheckPermission
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CheckPermissionRequest) (*CheckPermissionResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CheckPermissionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CheckPermissionRequest) when calling interceptor")
					}
					return c.callCheckPermission(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CheckPermissionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CheckPermissionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *permissionServiceProtobufClient) callCheckPermission(ctx context.Context, in *CheckPermissionRequest) (*CheckPermissionResponse, error) {
	out := new(CheckPermissionResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =============================
// PermissionService JSON Client
// =============================

type permissionServiceJSONClient struct {
	client      HTTPClient
	urls        [9]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewPermissionServiceJSONClient creates a JSON client that implements the PermissionService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewPermissionServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) PermissionService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "karibu.sabitou.identity", "PermissionService")
	urls := [9]string{
		serviceURL + "CreatePermissionGroup",
		serviceURL + "GetPermissionGroup",
		serviceURL + "UpdatePermissionGroup",
		serviceURL + "DeletePermissionGroup",
		serviceURL + "GetUserPermissions",
		serviceURL + "RemoveUserPermission",
		serviceURL + "AddUserPermission",
		serviceURL + "GetBusinessPermissionGroups",
		serviceURL + "CheckPermission",
	}

	return &permissionServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *permissionServiceJSONClient) CreatePermissionGroup(ctx context.Context, in *CreatePermissionGroupRequest) (*CreatePermissionGroupResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.identity")
	ctx = ctxsetters.WithServiceName(ctx, "PermissionService")
	ctx = ctxsetters.WithMethodName(ctx, "CreatePermissionGroup")
	caller := c.callCreatePermissionGroup
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreatePermissionGroupRequest) (*CreatePermissionGroupResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreatePermissionGroupRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreatePermissionGroupRequest) when calling interceptor")
					}
					return c.callCreatePermissionGroup(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreatePermissionGroupResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreatePermissionGroupResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *permissionServiceJSONClient) callCreatePermissionGroup(ctx context.Context, in *CreatePermissionGroupRequest) (*CreatePermissionGroupResponse, error) {
	out := new(CreatePermissionGroupResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *permissionServiceJSONClient) GetPermissionGroup(ctx context.Context, in *GetPermissionGroupRequest) (*GetPermissionGroupResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.identity")
	ctx = ctxsetters.WithServiceName(ctx, "PermissionService")
	ctx = ctxsetters.WithMethodName(ctx, "GetPermissionGroup")
	caller := c.callGetPermissionGroup
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetPermissionGroupRequest) (*GetPermissionGroupResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetPermissionGroupRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetPermissionGroupRequest) when calling interceptor")
					}
					return c.callGetPermissionGroup(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetPermissionGroupResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetPermissionGroupResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *permissionServiceJSONClient) callGetPermissionGroup(ctx context.Context, in *GetPermissionGroupRequest) (*GetPermissionGroupResponse, error) {
	out := new(GetPermissionGroupResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *permissionServiceJSONClient) UpdatePermissionGroup(ctx context.Context, in *UpdatePermissionGroupRequest) (*UpdatePermissionGroupResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.identity")
	ctx = ctxsetters.WithServiceName(ctx, "PermissionService")
	ctx = ctxsetters.WithMethodName(ctx, "UpdatePermissionGroup")
	caller := c.callUpdatePermissionGroup
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdatePermissionGroupRequest) (*UpdatePermissionGroupResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdatePermissionGroupRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdatePermissionGroupRequest) when calling interceptor")
					}
					return c.callUpdatePermissionGroup(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdatePermissionGroupResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdatePermissionGroupResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *permissionServiceJSONClient) callUpdatePermissionGroup(ctx context.Context, in *UpdatePermissionGroupRequest) (*UpdatePermissionGroupResponse, error) {
	out := new(UpdatePermissionGroupResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *permissionServiceJSONClient) DeletePermissionGroup(ctx context.Context, in *DeletePermissionGroupRequest) (*DeletePermissionGroupResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.identity")
	ctx = ctxsetters.WithServiceName(ctx, "PermissionService")
	ctx = ctxsetters.WithMethodName(ctx, "DeletePermissionGroup")
	caller := c.callDeletePermissionGroup
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeletePermissionGroupRequest) (*DeletePermissionGroupResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeletePermissionGroupRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeletePermissionGroupRequest) when calling interceptor")
					}
					return c.callDeletePermissionGroup(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeletePermissionGroupResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeletePermissionGroupResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *permissionServiceJSONClient) callDeletePermissionGroup(ctx context.Context, in *DeletePermissionGroupRequest) (*DeletePermissionGroupResponse, error) {
	out := new(DeletePermissionGroupResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *permissionServiceJSONClient) GetUserPermissions(ctx context.Context, in *GetUserPermissionsRequest) (*GetUserPermissionsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.identity")
	ctx = ctxsetters.WithServiceName(ctx, "PermissionService")
	ctx = ctxsetters.WithMethodName(ctx, "GetUserPermissions")
	caller := c.callGetUserPermissions
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetUserPermissionsRequest) (*GetUserPermissionsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserPermissionsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserPermissionsRequest) when calling interceptor")
					}
					return c.callGetUserPermissions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetUserPermissionsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetUserPermissionsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *permissionServiceJSONClient) callGetUserPermissions(ctx context.Context, in *GetUserPermissionsRequest) (*GetUserPermissionsResponse, error) {
	out := new(GetUserPermissionsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *permissionServiceJSONClient) RemoveUserPermission(ctx context.Context, in *RemoveUserPermissionRequest) (*RemoveUserPermissionResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.identity")
	ctx = ctxsetters.WithServiceName(ctx, "PermissionService")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveUserPermission")
	caller := c.callRemoveUserPermission
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RemoveUserPermissionRequest) (*RemoveUserPermissionResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RemoveUserPermissionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RemoveUserPermissionRequest) when calling interceptor")
					}
					return c.callRemoveUserPermission(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RemoveUserPermissionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RemoveUserPermissionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *permissionServiceJSONClient) callRemoveUserPermission(ctx context.Context, in *RemoveUserPermissionRequest) (*RemoveUserPermissionResponse, error) {
	out := new(RemoveUserPermissionResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *permissionServiceJSONClient) AddUserPermission(ctx context.Context, in *AddUserPermissionRequest) (*AddUserPermissionResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.identity")
	ctx = ctxsetters.WithServiceName(ctx, "PermissionService")
	ctx = ctxsetters.WithMethodName(ctx, "AddUserPermission")
	caller := c.callAddUserPermission
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *AddUserPermissionRequest) (*AddUserPermissionResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddUserPermissionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddUserPermissionRequest) when calling interceptor")
					}
					return c.callAddUserPermission(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AddUserPermissionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AddUserPermissionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *permissionServiceJSONClient) callAddUserPermission(ctx context.Context, in *AddUserPermissionRequest) (*AddUserPermissionResponse, error) {
	out := new(AddUserPermissionResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *permissionServiceJSONClient) GetBusinessPermissionGroups(ctx context.Context, in *GetBusinessPermissionGroupsRequest) (*GetBusinessPermissionGroupsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.identity")
	ctx = ctxsetters.WithServiceName(ctx, "PermissionService")
	ctx = ctxsetters.WithMethodName(ctx, "GetBusinessPermissionGroups")
	caller := c.callGetBusinessPermissionGroups
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetBusinessPermissionGroupsRequest) (*GetBusinessPermissionGroupsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetBusinessPermissionGroupsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetBusinessPermissionGroupsRequest) when calling interceptor")
					}
					return c.callGetBusinessPermissionGroups(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetBusinessPermissionGroupsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetBusinessPermissionGroupsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *permissionServiceJSONClient) callGetBusinessPermissionGroups(ctx context.Context, in *GetBusinessPermissionGroupsRequest) (*GetBusinessPermissionGroupsResponse, error) {
	out := new(GetBusinessPermissionGroupsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *permissionServiceJSONClient) CheckPermission(ctx context.Context, in *CheckPermissionRequest) (*CheckPermissionResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.identity")
	ctx = ctxsetters.WithServiceName(ctx, "PermissionService")
	ctx = ctxsetters.WithMethodName(ctx, "CheckPermission")
	caller := c.callCheckPermission
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CheckPermissionRequest) (*CheckPermissionResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CheckPermissionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CheckPermissionRequest) when calling interceptor")
					}
					return c.callCheckPermission(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CheckPermissionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CheckPermissionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *permissionServiceJSONClient) callCheckPermission(ctx context.Context, in *CheckPermissionRequest) (*CheckPermissionResponse, error) {
	out := new(CheckPermissionResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ================================
// PermissionService Server Handler
// ================================

type permissionServiceServer struct {
	PermissionService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewPermissionServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewPermissionServiceServer(svc PermissionService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &permissionServiceServer{
		PermissionService: svc,
		hooks:             serverOpts.Hooks,
		interceptor:       twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:        pathPrefix,
		jsonSkipDefaults:  jsonSkipDefaults,
		jsonCamelCase:     jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *permissionServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *permissionServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// PermissionServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const PermissionServicePathPrefix = "/twirp/karibu.sabitou.identity.PermissionService/"

func (s *permissionServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.identity")
	ctx = ctxsetters.WithServiceName(ctx, "PermissionService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "karibu.sabitou.identity.PermissionService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "CreatePermissionGroup":
		s.serveCreatePermissionGroup(ctx, resp, req)
		return
	case "GetPermissionGroup":
		s.serveGetPermissionGroup(ctx, resp, req)
		return
	case "UpdatePermissionGroup":
		s.serveUpdatePermissionGroup(ctx, resp, req)
		return
	case "DeletePermissionGroup":
		s.serveDeletePermissionGroup(ctx, resp, req)
		return
	case "GetUserPermissions":
		s.serveGetUserPermissions(ctx, resp, req)
		return
	case "RemoveUserPermission":
		s.serveRemoveUserPermission(ctx, resp, req)
		return
	case "AddUserPermission":
		s.serveAddUserPermission(ctx, resp, req)
		return
	case "GetBusinessPermissionGroups":
		s.serveGetBusinessPermissionGroups(ctx, resp, req)
		return
	case "CheckPermission":
		s.serveCheckPermission(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *permissionServiceServer) serveCreatePermissionGroup(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreatePermissionGroupJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreatePermissionGroupProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *permissionServiceServer) serveCreatePermissionGroupJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreatePermissionGroup")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(CreatePermissionGroupRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PermissionService.CreatePermissionGroup
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreatePermissionGroupRequest) (*CreatePermissionGroupResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreatePermissionGroupRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreatePermissionGroupRequest) when calling interceptor")
					}
					return s.PermissionService.CreatePermissionGroup(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreatePermissionGroupResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreatePermissionGroupResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreatePermissionGroupResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreatePermissionGroupResponse and nil error while calling CreatePermissionGroup. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *permissionServiceServer) serveCreatePermissionGroupProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreatePermissionGroup")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(CreatePermissionGroupRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PermissionService.CreatePermissionGroup
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreatePermissionGroupRequest) (*CreatePermissionGroupResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreatePermissionGroupRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreatePermissionGroupRequest) when calling interceptor")
					}
					return s.PermissionService.CreatePermissionGroup(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreatePermissionGroupResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreatePermissionGroupResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreatePermissionGroupResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreatePermissionGroupResponse and nil error while calling CreatePermissionGroup. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *permissionServiceServer) serveGetPermissionGroup(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetPermissionGroupJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetPermissionGroupProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *permissionServiceServer) serveGetPermissionGroupJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPermissionGroup")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetPermissionGroupRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PermissionService.GetPermissionGroup
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetPermissionGroupRequest) (*GetPermissionGroupResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetPermissionGroupRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetPermissionGroupRequest) when calling interceptor")
					}
					return s.PermissionService.GetPermissionGroup(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetPermissionGroupResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetPermissionGroupResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetPermissionGroupResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetPermissionGroupResponse and nil error while calling GetPermissionGroup. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *permissionServiceServer) serveGetPermissionGroupProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPermissionGroup")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetPermissionGroupRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PermissionService.GetPermissionGroup
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetPermissionGroupRequest) (*GetPermissionGroupResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetPermissionGroupRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetPermissionGroupRequest) when calling interceptor")
					}
					return s.PermissionService.GetPermissionGroup(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetPermissionGroupResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetPermissionGroupResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetPermissionGroupResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetPermissionGroupResponse and nil error while calling GetPermissionGroup. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *permissionServiceServer) serveUpdatePermissionGroup(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdatePermissionGroupJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdatePermissionGroupProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *permissionServiceServer) serveUpdatePermissionGroupJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdatePermissionGroup")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UpdatePermissionGroupRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PermissionService.UpdatePermissionGroup
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdatePermissionGroupRequest) (*UpdatePermissionGroupResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdatePermissionGroupRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdatePermissionGroupRequest) when calling interceptor")
					}
					return s.PermissionService.UpdatePermissionGroup(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdatePermissionGroupResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdatePermissionGroupResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UpdatePermissionGroupResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdatePermissionGroupResponse and nil error while calling UpdatePermissionGroup. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *permissionServiceServer) serveUpdatePermissionGroupProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdatePermissionGroup")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UpdatePermissionGroupRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PermissionService.UpdatePermissionGroup
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdatePermissionGroupRequest) (*UpdatePermissionGroupResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdatePermissionGroupRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdatePermissionGroupRequest) when calling interceptor")
					}
					return s.PermissionService.UpdatePermissionGroup(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdatePermissionGroupResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdatePermissionGroupResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UpdatePermissionGroupResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdatePermissionGroupResponse and nil error while calling UpdatePermissionGroup. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *permissionServiceServer) serveDeletePermissionGroup(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeletePermissionGroupJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeletePermissionGroupProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *permissionServiceServer) serveDeletePermissionGroupJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeletePermissionGroup")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(DeletePermissionGroupRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PermissionService.DeletePermissionGroup
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeletePermissionGroupRequest) (*DeletePermissionGroupResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeletePermissionGroupRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeletePermissionGroupRequest) when calling interceptor")
					}
					return s.PermissionService.DeletePermissionGroup(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeletePermissionGroupResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeletePermissionGroupResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeletePermissionGroupResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeletePermissionGroupResponse and nil error while calling DeletePermissionGroup. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *permissionServiceServer) serveDeletePermissionGroupProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeletePermissionGroup")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(DeletePermissionGroupRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PermissionService.DeletePermissionGroup
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeletePermissionGroupRequest) (*DeletePermissionGroupResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeletePermissionGroupRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeletePermissionGroupRequest) when calling interceptor")
					}
					return s.PermissionService.DeletePermissionGroup(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeletePermissionGroupResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeletePermissionGroupResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeletePermissionGroupResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeletePermissionGroupResponse and nil error while calling DeletePermissionGroup. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *permissionServiceServer) serveGetUserPermissions(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetUserPermissionsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetUserPermissionsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *permissionServiceServer) serveGetUserPermissionsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetUserPermissions")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetUserPermissionsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PermissionService.GetUserPermissions
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetUserPermissionsRequest) (*GetUserPermissionsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserPermissionsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserPermissionsRequest) when calling interceptor")
					}
					return s.PermissionService.GetUserPermissions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetUserPermissionsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetUserPermissionsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetUserPermissionsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetUserPermissionsResponse and nil error while calling GetUserPermissions. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *permissionServiceServer) serveGetUserPermissionsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetUserPermissions")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetUserPermissionsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PermissionService.GetUserPermissions
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetUserPermissionsRequest) (*GetUserPermissionsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserPermissionsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserPermissionsRequest) when calling interceptor")
					}
					return s.PermissionService.GetUserPermissions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetUserPermissionsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetUserPermissionsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetUserPermissionsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetUserPermissionsResponse and nil error while calling GetUserPermissions. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *permissionServiceServer) serveRemoveUserPermission(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRemoveUserPermissionJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRemoveUserPermissionProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *permissionServiceServer) serveRemoveUserPermissionJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveUserPermission")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(RemoveUserPermissionRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PermissionService.RemoveUserPermission
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RemoveUserPermissionRequest) (*RemoveUserPermissionResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RemoveUserPermissionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RemoveUserPermissionRequest) when calling interceptor")
					}
					return s.PermissionService.RemoveUserPermission(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RemoveUserPermissionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RemoveUserPermissionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *RemoveUserPermissionResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RemoveUserPermissionResponse and nil error while calling RemoveUserPermission. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *permissionServiceServer) serveRemoveUserPermissionProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveUserPermission")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(RemoveUserPermissionRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PermissionService.RemoveUserPermission
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RemoveUserPermissionRequest) (*RemoveUserPermissionResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RemoveUserPermissionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RemoveUserPermissionRequest) when calling interceptor")
					}
					return s.PermissionService.RemoveUserPermission(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RemoveUserPermissionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RemoveUserPermissionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *RemoveUserPermissionResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RemoveUserPermissionResponse and nil error while calling RemoveUserPermission. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *permissionServiceServer) serveAddUserPermission(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveAddUserPermissionJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveAddUserPermissionProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *permissionServiceServer) serveAddUserPermissionJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AddUserPermission")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(AddUserPermissionRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PermissionService.AddUserPermission
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *AddUserPermissionRequest) (*AddUserPermissionResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddUserPermissionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddUserPermissionRequest) when calling interceptor")
					}
					return s.PermissionService.AddUserPermission(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AddUserPermissionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AddUserPermissionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *AddUserPermissionResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AddUserPermissionResponse and nil error while calling AddUserPermission. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *permissionServiceServer) serveAddUserPermissionProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AddUserPermission")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(AddUserPermissionRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PermissionService.AddUserPermission
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *AddUserPermissionRequest) (*AddUserPermissionResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddUserPermissionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddUserPermissionRequest) when calling interceptor")
					}
					return s.PermissionService.AddUserPermission(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AddUserPermissionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AddUserPermissionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *AddUserPermissionResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AddUserPermissionResponse and nil error while calling AddUserPermission. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *permissionServiceServer) serveGetBusinessPermissionGroups(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetBusinessPermissionGroupsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetBusinessPermissionGroupsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *permissionServiceServer) serveGetBusinessPermissionGroupsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetBusinessPermissionGroups")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetBusinessPermissionGroupsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PermissionService.GetBusinessPermissionGroups
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetBusinessPermissionGroupsRequest) (*GetBusinessPermissionGroupsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetBusinessPermissionGroupsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetBusinessPermissionGroupsRequest) when calling interceptor")
					}
					return s.PermissionService.GetBusinessPermissionGroups(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetBusinessPermissionGroupsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetBusinessPermissionGroupsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetBusinessPermissionGroupsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetBusinessPermissionGroupsResponse and nil error while calling GetBusinessPermissionGroups. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *permissionServiceServer) serveGetBusinessPermissionGroupsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetBusinessPermissionGroups")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetBusinessPermissionGroupsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PermissionService.GetBusinessPermissionGroups
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetBusinessPermissionGroupsRequest) (*GetBusinessPermissionGroupsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetBusinessPermissionGroupsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetBusinessPermissionGroupsRequest) when calling interceptor")
					}
					return s.PermissionService.GetBusinessPermissionGroups(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetBusinessPermissionGroupsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetBusinessPermissionGroupsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetBusinessPermissionGroupsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetBusinessPermissionGroupsResponse and nil error while calling GetBusinessPermissionGroups. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *permissionServiceServer) serveCheckPermission(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCheckPermissionJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCheckPermissionProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *permissionServiceServer) serveCheckPermissionJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CheckPermission")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(CheckPermissionRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PermissionService.CheckPermission
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CheckPermissionRequest) (*CheckPermissionResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CheckPermissionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CheckPermissionRequest) when calling interceptor")
					}
					return s.PermissionService.CheckPermission(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CheckPermissionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CheckPermissionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CheckPermissionResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CheckPermissionResponse and nil error while calling CheckPermission. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *permissionServiceServer) serveCheckPermissionProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CheckPermission")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(CheckPermissionRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PermissionService.CheckPermission
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CheckPermissionRequest) (*CheckPermissionResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CheckPermissionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CheckPermissionRequest) when calling interceptor")
					}
					return s.PermissionService.CheckPermission(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CheckPermissionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CheckPermissionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CheckPermissionResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CheckPermissionResponse and nil error while calling CheckPermission. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *permissionServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor1, 0
}

func (s *permissionServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.3"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *permissionServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "karibu.sabitou.identity", "PermissionService")
}

var twirpFileDescriptor1 = []byte{
	// 1084 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0x0e, 0xe3, 0x34, 0x3f, 0xc7, 0x49, 0xac, 0x10, 0x69, 0xe3, 0x38, 0x4e, 0x9b, 0x28, 0x4b,
	0x1b, 0x64, 0xa8, 0xd3, 0xba, 0x4b, 0xb1, 0x61, 0xbb, 0x98, 0x7f, 0x38, 0xcf, 0xc0, 0x62, 0x1b,
	0x94, 0x54, 0x20, 0xbb, 0x31, 0x1c, 0x9b, 0x58, 0x84, 0x2e, 0xb6, 0x2a, 0x4a, 0x01, 0x02, 0x14,
	0xd8, 0xd5, 0x80, 0x62, 0x40, 0x5f, 0x60, 0x7b, 0x9e, 0x3d, 0xc0, 0x1e, 0x61, 0x17, 0xbb, 0x1d,
	0xf6, 0x08, 0x83, 0x69, 0xd9, 0x96, 0x25, 0x51, 0xb6, 0x0b, 0x6c, 0xe8, 0x55, 0x24, 0xea, 0xfc,
	0x7c, 0xe7, 0x3b, 0x87, 0xe4, 0x17, 0xc3, 0xae, 0xd9, 0x61, 0x5d, 0xc7, 0x74, 0xee, 0xce, 0x2c,
	0x66, 0xdf, 0x98, 0x9c, 0x9b, 0xbd, 0x6e, 0xce, 0xb2, 0x7b, 0x4e, 0x0f, 0xef, 0xbc, 0x6e, 0xd9,
	0xe6, 0x95, 0x9b, 0xe3, 0xad, 0x2b, 0xd3, 0xe9, 0xb9, 0xb9, 0xa1, 0xa5, 0xfa, 0x0f, 0x02, 0x68,
	0x8c, 0xac, 0x31, 0x81, 0xe5, 0x56, 0xdb, 0x31, 0x7b, 0xdd, 0x34, 0x3a, 0x40, 0x27, 0x9b, 0xf9,
	0xa7, 0x39, 0x89, 0x63, 0x6e, 0xec, 0x54, 0x10, 0x0e, 0xfa, 0x9d, 0xc5, 0xa8, 0xe7, 0xdc, 0x0f,
	0x33, 0x30, 0x4b, 0x2f, 0xce, 0x1c, 0x86, 0x88, 0x85, 0x41, 0x98, 0xc1, 0x47, 0xac, 0xc3, 0x86,
	0xcd, 0x78, 0xcf, 0xb5, 0xdb, 0xac, 0xe9, 0xdc, 0x59, 0x2c, 0x9d, 0x10, 0xd1, 0xce, 0x66, 0x88,
	0x46, 0x3d, 0x3f, 0x11, 0x6f, 0xdd, 0xf6, 0xbd, 0xa9, 0x7f, 0x21, 0xd8, 0x34, 0x38, 0xb3, 0x7d,
	0x65, 0xef, 0xc2, 0xaa, 0xcb, 0x99, 0xdd, 0x74, 0xcd, 0x8e, 0x28, 0x7c, 0x8d, 0xae, 0xf4, 0xdf,
	0x0d, 0xb3, 0x83, 0x09, 0x24, 0xc7, 0x6c, 0xf2, 0xf4, 0xe2, 0x41, 0xe2, 0x24, 0x99, 0x3f, 0x9a,
	0x05, 0x81, 0xdf, 0x0f, 0x9f, 0xc3, 0xf6, 0xf8, 0xb5, 0xf9, 0x83, 0xdd, 0x73, 0x2d, 0x91, 0xad,
	0x5f, 0xd1, 0xda, 0xb7, 0x0b, 0x14, 0x8f, 0xbf, 0x56, 0xfa, 0x1f, 0x0d, 0xb3, 0xf3, 0x0e, 0x21,
	0x7c, 0x08, 0x23, 0xec, 0xc2, 0x7c, 0x49, 0x80, 0x4b, 0x0e, 0xd7, 0x0c, 0xb3, 0x53, 0xdc, 0x81,
	0xfb, 0xcd, 0xa8, 0xd0, 0xea, 0xdf, 0x08, 0x52, 0x8d, 0xc9, 0xa8, 0x58, 0x81, 0xc4, 0xb8, 0xc6,
	0xfe, 0x23, 0xc6, 0xb0, 0xd4, 0x6d, 0xdd, 0x30, 0xd1, 0xa8, 0x35, 0x2a, 0x9e, 0xf1, 0x31, 0x24,
	0x3b, 0x8c, 0xb7, 0x6d, 0xd3, 0x12, 0xa3, 0x30, 0xc4, 0xe8, 0x5f, 0xec, 0x83, 0x0b, 0x50, 0xb3,
	0xf4, 0x81, 0xd4, 0x3c, 0x86, 0xf5, 0x2b, 0x97, 0x9b, 0x5d, 0xc6, 0xb9, 0xa8, 0xf1, 0x9e, 0x48,
	0x87, 0x68, 0x72, 0xb8, 0x3a, 0xe0, 0xa2, 0xb8, 0x09, 0xeb, 0x4d, 0x1f, 0x82, 0x62, 0x0a, 0x36,
	0x9a, 0x7e, 0x47, 0x95, 0x43, 0xb6, 0x64, 0xb3, 0x96, 0xc3, 0x02, 0x55, 0x53, 0xf6, 0xc6, 0x65,
	0xdc, 0xc1, 0x1a, 0x28, 0x41, 0xa2, 0x04, 0x13, 0xc9, 0xfc, 0xc9, 0x0c, 0xa0, 0x07, 0xa1, 0x52,
	0x81, 0x3e, 0xa9, 0xcf, 0x61, 0x5f, 0x92, 0x94, 0x5b, 0xbd, 0x2e, 0x67, 0x61, 0xca, 0xd5, 0xa7,
	0xb0, 0x5b, 0x61, 0x8e, 0x04, 0x64, 0xd8, 0xfc, 0x0d, 0x64, 0xa2, 0xcc, 0xbd, 0xf0, 0xff, 0x49,
	0x51, 0x1c, 0xb2, 0x86, 0xd5, 0xf9, 0x9f, 0x99, 0xfc, 0x02, 0xf6, 0x25, 0x49, 0xbd, 0x52, 0xd3,
	0xb0, 0xc2, 0xdd, 0x76, 0x9b, 0x71, 0x2e, 0x92, 0xad, 0xd2, 0xe1, 0xab, 0xaa, 0x41, 0xb6, 0xcc,
	0x7e, 0x64, 0x52, 0xbc, 0xe1, 0xb1, 0x3f, 0x0c, 0x0c, 0xdd, 0x60, 0xfc, 0xfd, 0x23, 0xd7, 0xc7,
	0x23, 0x09, 0x3a, 0x15, 0xcf, 0x4b, 0xd1, 0xe1, 0xc9, 0x43, 0x86, 0x0f, 0xc1, 0xc8, 0x0f, 0x1b,
	0xd5, 0x12, 0xad, 0x0e, 0xf9, 0x79, 0xf9, 0x28, 0x28, 0xc2, 0xd1, 0xbf, 0xe9, 0x90, 0xd8, 0x74,
	0x4f, 0xa4, 0xac, 0x4f, 0xc6, 0xa2, 0x29, 0x77, 0x32, 0xb6, 0xfa, 0x1e, 0xc1, 0x1e, 0x65, 0x37,
	0xbd, 0x5b, 0x16, 0xb0, 0x9c, 0x0a, 0x16, 0x3f, 0x93, 0x1c, 0x69, 0x03, 0x2a, 0x23, 0x0e, 0xb4,
	0xd0, 0x69, 0x96, 0x08, 0x9d, 0x66, 0xea, 0xe7, 0x90, 0x8d, 0x86, 0x33, 0x95, 0xf3, 0x5f, 0x10,
	0xa4, 0x0b, 0x9d, 0xce, 0xc7, 0x51, 0xc6, 0x39, 0xec, 0x46, 0x60, 0x99, 0x5a, 0x43, 0x05, 0xd4,
	0x0a, 0x73, 0x8a, 0xde, 0x10, 0x06, 0xe6, 0x6e, 0x34, 0x40, 0xc1, 0xd9, 0x45, 0xe1, 0xd9, 0x7d,
	0x0b, 0x47, 0xb1, 0x81, 0x3c, 0x24, 0x06, 0x6c, 0x05, 0x6b, 0x1f, 0x8e, 0xd4, 0xec, 0x1b, 0x59,
	0x09, 0x50, 0xc4, 0xd5, 0xdf, 0x10, 0x3c, 0x28, 0x5d, 0xb3, 0xf6, 0xeb, 0xb9, 0x1a, 0x31, 0x9d,
	0x56, 0x5c, 0x02, 0x18, 0x27, 0x13, 0x97, 0xe1, 0x8c, 0x17, 0x8e, 0xcf, 0x4d, 0xfd, 0x1a, 0x76,
	0x42, 0xe0, 0x3c, 0x3e, 0x8e, 0x61, 0xf3, 0xba, 0xc5, 0x7d, 0x1b, 0xcc, 0x6b, 0xd0, 0xc6, 0x75,
	0xcb, 0x47, 0xe2, 0xe9, 0xef, 0x08, 0xb6, 0xa3, 0xf4, 0x0f, 0x7e, 0x0c, 0x6a, 0x83, 0xd0, 0x8b,
	0xaa, 0xa6, 0x55, 0xeb, 0xb5, 0x66, 0xa1, 0xa4, 0xf7, 0xff, 0xe8, 0x97, 0x0d, 0xd2, 0x34, 0x6a,
	0x5a, 0x83, 0x94, 0xaa, 0xdf, 0x54, 0x49, 0x59, 0x59, 0xc0, 0x8f, 0x60, 0x4f, 0x62, 0x47, 0x49,
	0xa1, 0xac, 0x20, 0xfc, 0x10, 0x32, 0x12, 0x83, 0x42, 0xb9, 0xac, 0x2c, 0xe2, 0x43, 0xd8, 0x97,
	0x25, 0x6a, 0x94, 0x0b, 0x3a, 0x51, 0x12, 0x31, 0x26, 0x94, 0x5c, 0xd4, 0x5f, 0x11, 0x65, 0xe9,
	0xf4, 0x3d, 0x82, 0x07, 0xd1, 0x92, 0x09, 0x9f, 0xc0, 0x27, 0x3e, 0x6f, 0x4a, 0xb4, 0xba, 0x41,
	0x4b, 0x24, 0xaa, 0x96, 0x63, 0x38, 0x94, 0x5a, 0x16, 0x0d, 0xad, 0x5a, 0x23, 0x9a, 0xa6, 0x20,
	0xac, 0xc2, 0x43, 0xa9, 0x99, 0xa6, 0xd7, 0x29, 0x51, 0x16, 0x4f, 0xff, 0x5c, 0xf4, 0xf3, 0x3a,
	0x16, 0x84, 0x01, 0x5e, 0x49, 0x4d, 0xaf, 0xea, 0x97, 0x51, 0x58, 0x8e, 0xe0, 0x91, 0xc4, 0xce,
	0x87, 0xe4, 0x00, 0xb2, 0x12, 0x23, 0x0f, 0x47, 0xa0, 0x3d, 0x13, 0xe9, 0x34, 0x42, 0x95, 0x44,
	0xa0, 0x18, 0xbf, 0x41, 0x81, 0xea, 0xd5, 0xd2, 0x77, 0x44, 0x59, 0x8a, 0xb1, 0xa9, 0xd6, 0x5e,
	0xd5, 0xab, 0x25, 0xa2, 0xdc, 0x8b, 0xb1, 0x69, 0x14, 0x2e, 0x2f, 0x48, 0x4d, 0x57, 0x96, 0x63,
	0xe0, 0xd6, 0x69, 0x99, 0x50, 0x65, 0x05, 0x7f, 0x0a, 0x4f, 0x64, 0x51, 0xc6, 0xcb, 0x15, 0x5a,
	0x37, 0x1a, 0xca, 0x6a, 0xfe, 0x8f, 0x35, 0xd8, 0x1a, 0x73, 0xac, 0x31, 0xfb, 0xd6, 0x6c, 0x33,
	0xfc, 0x0e, 0xc1, 0xfd, 0x48, 0x19, 0x83, 0xcf, 0xa5, 0xdb, 0x2b, 0x4e, 0x6b, 0x65, 0x5e, 0xce,
	0xeb, 0x36, 0xd8, 0x81, 0xea, 0x02, 0xfe, 0x09, 0x70, 0x58, 0xee, 0xe0, 0xbc, 0x34, 0x9e, 0x54,
	0x4a, 0x65, 0x5e, 0xcc, 0xe5, 0x33, 0x02, 0xd0, 0xe7, 0x22, 0x52, 0x88, 0xc4, 0x70, 0x11, 0xa7,
	0x96, 0x62, 0xb8, 0x88, 0xd5, 0x3b, 0x1e, 0x94, 0x48, 0x0d, 0x12, 0x03, 0x25, 0x4e, 0x08, 0xc5,
	0x40, 0x89, 0x95, 0x3a, 0xa3, 0xb6, 0x04, 0xa4, 0x49, 0x7c, 0x5b, 0xa2, 0xf5, 0x4f, 0x7c, 0x5b,
	0x24, 0xda, 0x47, 0x5d, 0xc0, 0x3f, 0x23, 0xd8, 0x8e, 0x92, 0x06, 0xf8, 0x33, 0x69, 0xbc, 0x18,
	0x61, 0x93, 0x39, 0x9f, 0xd3, 0x6b, 0x84, 0xe3, 0x2d, 0x6c, 0x85, 0xae, 0x76, 0xfc, 0x5c, 0x1a,
	0x4d, 0x26, 0x49, 0x32, 0xf9, 0x79, 0x5c, 0x46, 0xd9, 0x7f, 0x45, 0xb0, 0x17, 0x73, 0xb3, 0xe3,
	0x2f, 0xe3, 0xc8, 0x9d, 0x22, 0x2c, 0x32, 0x5f, 0x7d, 0x98, 0xf3, 0x08, 0xdc, 0x2d, 0xa4, 0x02,
	0x37, 0x2b, 0x96, 0xff, 0xaf, 0x1e, 0x2d, 0x10, 0x32, 0xcf, 0x66, 0x77, 0x18, 0xe6, 0x2d, 0x6e,
	0x7e, 0xbf, 0x6e, 0x5b, 0xed, 0xb3, 0xa1, 0xe5, 0xd5, 0xb2, 0xf8, 0xd1, 0xe3, 0xc5, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x18, 0x6a, 0x0a, 0xe0, 0x11, 0x11, 0x00, 0x00,
}
