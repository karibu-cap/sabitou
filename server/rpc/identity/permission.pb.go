// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: identity/permission.proto

package identity

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PermissionActionType int32

const (
	PermissionActionType_PERMISSION_ACTION_TYPE_UNSPECIFIED PermissionActionType = 0
	// Can read the resource.
	PermissionActionType_PERMISSION_ACTION_TYPE_READ PermissionActionType = 1
	// Can read and (create or add) the resource.
	PermissionActionType_PERMISSION_ACTION_TYPE_ADD PermissionActionType = 2
	// Can read, create, update the resource.
	PermissionActionType_PERMISSION_ACTION_TYPE_UPDATE PermissionActionType = 3
	// Can read, create, update, delete the resource.
	PermissionActionType_PERMISSION_ACTION_TYPE_REMOVE PermissionActionType = 4
)

// Enum value maps for PermissionActionType.
var (
	PermissionActionType_name = map[int32]string{
		0: "PERMISSION_ACTION_TYPE_UNSPECIFIED",
		1: "PERMISSION_ACTION_TYPE_READ",
		2: "PERMISSION_ACTION_TYPE_ADD",
		3: "PERMISSION_ACTION_TYPE_UPDATE",
		4: "PERMISSION_ACTION_TYPE_REMOVE",
	}
	PermissionActionType_value = map[string]int32{
		"PERMISSION_ACTION_TYPE_UNSPECIFIED": 0,
		"PERMISSION_ACTION_TYPE_READ":        1,
		"PERMISSION_ACTION_TYPE_ADD":         2,
		"PERMISSION_ACTION_TYPE_UPDATE":      3,
		"PERMISSION_ACTION_TYPE_REMOVE":      4,
	}
)

func (x PermissionActionType) Enum() *PermissionActionType {
	p := new(PermissionActionType)
	*p = x
	return p
}

func (x PermissionActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_identity_permission_proto_enumTypes[0].Descriptor()
}

func (PermissionActionType) Type() protoreflect.EnumType {
	return &file_identity_permission_proto_enumTypes[0]
}

func (x PermissionActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermissionActionType.Descriptor instead.
func (PermissionActionType) EnumDescriptor() ([]byte, []int) {
	return file_identity_permission_proto_rawDescGZIP(), []int{0}
}

type PermissionResourceType int32

const (
	PermissionResourceType_PERMISSION_RESOURCE_TYPE_UNSPECIFIED PermissionResourceType = 0
	PermissionResourceType_PERMISSION_RESOURCE_TYPE_BUSINESS    PermissionResourceType = 1
	PermissionResourceType_PERMISSION_RESOURCE_TYPE_STORE       PermissionResourceType = 2
)

// Enum value maps for PermissionResourceType.
var (
	PermissionResourceType_name = map[int32]string{
		0: "PERMISSION_RESOURCE_TYPE_UNSPECIFIED",
		1: "PERMISSION_RESOURCE_TYPE_BUSINESS",
		2: "PERMISSION_RESOURCE_TYPE_STORE",
	}
	PermissionResourceType_value = map[string]int32{
		"PERMISSION_RESOURCE_TYPE_UNSPECIFIED": 0,
		"PERMISSION_RESOURCE_TYPE_BUSINESS":    1,
		"PERMISSION_RESOURCE_TYPE_STORE":       2,
	}
)

func (x PermissionResourceType) Enum() *PermissionResourceType {
	p := new(PermissionResourceType)
	*p = x
	return p
}

func (x PermissionResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_identity_permission_proto_enumTypes[1].Descriptor()
}

func (PermissionResourceType) Type() protoreflect.EnumType {
	return &file_identity_permission_proto_enumTypes[1]
}

func (x PermissionResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermissionResourceType.Descriptor instead.
func (PermissionResourceType) EnumDescriptor() ([]byte, []int) {
	return file_identity_permission_proto_rawDescGZIP(), []int{1}
}

type PermissionEntityType int32

const (
	PermissionEntityType_PERMISSION_ENTITY_TYPE_UNSPECIFIED      PermissionEntityType = 0
	PermissionEntityType_PERMISSION_ENTITY_TYPE_BUSINESS         PermissionEntityType = 1
	PermissionEntityType_PERMISSION_ENTITY_TYPE_STORE            PermissionEntityType = 2
	PermissionEntityType_PERMISSION_ENTITY_TYPE_USER             PermissionEntityType = 3
	PermissionEntityType_PERMISSION_ENTITY_TYPE_ARTICLE          PermissionEntityType = 4
	PermissionEntityType_PERMISSION_ENTITY_TYPE_INVOICE          PermissionEntityType = 5
	PermissionEntityType_PERMISSION_ENTITY_TYPE_PAYMENT          PermissionEntityType = 6
	PermissionEntityType_PERMISSION_ENTITY_TYPE_ORDER            PermissionEntityType = 7
	PermissionEntityType_PERMISSION_ENTITY_TYPE_PERMISSION_GROUP PermissionEntityType = 8
)

// Enum value maps for PermissionEntityType.
var (
	PermissionEntityType_name = map[int32]string{
		0: "PERMISSION_ENTITY_TYPE_UNSPECIFIED",
		1: "PERMISSION_ENTITY_TYPE_BUSINESS",
		2: "PERMISSION_ENTITY_TYPE_STORE",
		3: "PERMISSION_ENTITY_TYPE_USER",
		4: "PERMISSION_ENTITY_TYPE_ARTICLE",
		5: "PERMISSION_ENTITY_TYPE_INVOICE",
		6: "PERMISSION_ENTITY_TYPE_PAYMENT",
		7: "PERMISSION_ENTITY_TYPE_ORDER",
		8: "PERMISSION_ENTITY_TYPE_PERMISSION_GROUP",
	}
	PermissionEntityType_value = map[string]int32{
		"PERMISSION_ENTITY_TYPE_UNSPECIFIED":      0,
		"PERMISSION_ENTITY_TYPE_BUSINESS":         1,
		"PERMISSION_ENTITY_TYPE_STORE":            2,
		"PERMISSION_ENTITY_TYPE_USER":             3,
		"PERMISSION_ENTITY_TYPE_ARTICLE":          4,
		"PERMISSION_ENTITY_TYPE_INVOICE":          5,
		"PERMISSION_ENTITY_TYPE_PAYMENT":          6,
		"PERMISSION_ENTITY_TYPE_ORDER":            7,
		"PERMISSION_ENTITY_TYPE_PERMISSION_GROUP": 8,
	}
)

func (x PermissionEntityType) Enum() *PermissionEntityType {
	p := new(PermissionEntityType)
	*p = x
	return p
}

func (x PermissionEntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionEntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_identity_permission_proto_enumTypes[2].Descriptor()
}

func (PermissionEntityType) Type() protoreflect.EnumType {
	return &file_identity_permission_proto_enumTypes[2]
}

func (x PermissionEntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermissionEntityType.Descriptor instead.
func (PermissionEntityType) EnumDescriptor() ([]byte, []int) {
	return file_identity_permission_proto_rawDescGZIP(), []int{2}
}

type Permission struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The action that the user can perform on the resource.
	Action PermissionActionType `protobuf:"varint,1,opt,name=action,proto3,enum=karibu.sabitou.identity.PermissionActionType" json:"action,omitempty"`
	// The entity on which the action is performed.
	Entity PermissionEntityType `protobuf:"varint,2,opt,name=entity,proto3,enum=karibu.sabitou.identity.PermissionEntityType" json:"entity,omitempty"`
	// The type of resource that the user can perform the action on.
	ResourceType  PermissionResourceType `protobuf:"varint,3,opt,name=resource_type,json=resourceType,proto3,enum=karibu.sabitou.identity.PermissionResourceType" json:"resource_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Permission) Reset() {
	*x = Permission{}
	mi := &file_identity_permission_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Permission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permission) ProtoMessage() {}

func (x *Permission) ProtoReflect() protoreflect.Message {
	mi := &file_identity_permission_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permission.ProtoReflect.Descriptor instead.
func (*Permission) Descriptor() ([]byte, []int) {
	return file_identity_permission_proto_rawDescGZIP(), []int{0}
}

func (x *Permission) GetAction() PermissionActionType {
	if x != nil {
		return x.Action
	}
	return PermissionActionType_PERMISSION_ACTION_TYPE_UNSPECIFIED
}

func (x *Permission) GetEntity() PermissionEntityType {
	if x != nil {
		return x.Entity
	}
	return PermissionEntityType_PERMISSION_ENTITY_TYPE_UNSPECIFIED
}

func (x *Permission) GetResourceType() PermissionResourceType {
	if x != nil {
		return x.ResourceType
	}
	return PermissionResourceType_PERMISSION_RESOURCE_TYPE_UNSPECIFIED
}

type UserPermission struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the user.
	UserUid string `protobuf:"bytes,1,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	// The permissions that the user has.
	Permissions []*Permission `protobuf:"bytes,2,rep,name=permissions,proto3" json:"permissions,omitempty"`
	// The unique identifier of the permission group.
	PermissionGroupUid *string `protobuf:"bytes,3,opt,name=permission_group_uid,json=permissionGroupUid,proto3,oneof" json:"permission_group_uid,omitempty"`
	// The unique identifier of the resource.
	ResourceUid   string `protobuf:"bytes,4,opt,name=resource_uid,json=resourceUid,proto3" json:"resource_uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserPermission) Reset() {
	*x = UserPermission{}
	mi := &file_identity_permission_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPermission) ProtoMessage() {}

func (x *UserPermission) ProtoReflect() protoreflect.Message {
	mi := &file_identity_permission_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPermission.ProtoReflect.Descriptor instead.
func (*UserPermission) Descriptor() ([]byte, []int) {
	return file_identity_permission_proto_rawDescGZIP(), []int{1}
}

func (x *UserPermission) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *UserPermission) GetPermissions() []*Permission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *UserPermission) GetPermissionGroupUid() string {
	if x != nil && x.PermissionGroupUid != nil {
		return *x.PermissionGroupUid
	}
	return ""
}

func (x *UserPermission) GetResourceUid() string {
	if x != nil {
		return x.ResourceUid
	}
	return ""
}

type PermissionGroup struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the permission group.
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// The name of the permission group. Generally the role of the group.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the permission group.
	Description *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// The permissions that the permission group has.
	Permissions []*Permission `protobuf:"bytes,4,rep,name=permissions,proto3" json:"permissions,omitempty"`
	// The unique identifier of the business.
	// must be set if the permission group is for a business.
	BusinessUid   *string `protobuf:"bytes,5,opt,name=business_uid,json=businessUid,proto3,oneof" json:"business_uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PermissionGroup) Reset() {
	*x = PermissionGroup{}
	mi := &file_identity_permission_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PermissionGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionGroup) ProtoMessage() {}

func (x *PermissionGroup) ProtoReflect() protoreflect.Message {
	mi := &file_identity_permission_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionGroup.ProtoReflect.Descriptor instead.
func (*PermissionGroup) Descriptor() ([]byte, []int) {
	return file_identity_permission_proto_rawDescGZIP(), []int{2}
}

func (x *PermissionGroup) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *PermissionGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PermissionGroup) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *PermissionGroup) GetPermissions() []*Permission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *PermissionGroup) GetBusinessUid() string {
	if x != nil && x.BusinessUid != nil {
		return *x.BusinessUid
	}
	return ""
}

type CreatePermissionGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The permission group information to create.
	// Note:Only the fields that are set will be created.
	PermissionGroup *PermissionGroup `protobuf:"bytes,1,opt,name=permission_group,json=permissionGroup,proto3" json:"permission_group,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreatePermissionGroupRequest) Reset() {
	*x = CreatePermissionGroupRequest{}
	mi := &file_identity_permission_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePermissionGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePermissionGroupRequest) ProtoMessage() {}

func (x *CreatePermissionGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_identity_permission_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePermissionGroupRequest.ProtoReflect.Descriptor instead.
func (*CreatePermissionGroupRequest) Descriptor() ([]byte, []int) {
	return file_identity_permission_proto_rawDescGZIP(), []int{3}
}

func (x *CreatePermissionGroupRequest) GetPermissionGroup() *PermissionGroup {
	if x != nil {
		return x.PermissionGroup
	}
	return nil
}

type CreatePermissionGroupResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the created permission group.
	Uid           string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePermissionGroupResponse) Reset() {
	*x = CreatePermissionGroupResponse{}
	mi := &file_identity_permission_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePermissionGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePermissionGroupResponse) ProtoMessage() {}

func (x *CreatePermissionGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_identity_permission_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePermissionGroupResponse.ProtoReflect.Descriptor instead.
func (*CreatePermissionGroupResponse) Descriptor() ([]byte, []int) {
	return file_identity_permission_proto_rawDescGZIP(), []int{4}
}

func (x *CreatePermissionGroupResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type GetPermissionGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the permission group to retrieve.
	Uid           string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPermissionGroupRequest) Reset() {
	*x = GetPermissionGroupRequest{}
	mi := &file_identity_permission_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPermissionGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPermissionGroupRequest) ProtoMessage() {}

func (x *GetPermissionGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_identity_permission_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPermissionGroupRequest.ProtoReflect.Descriptor instead.
func (*GetPermissionGroupRequest) Descriptor() ([]byte, []int) {
	return file_identity_permission_proto_rawDescGZIP(), []int{5}
}

func (x *GetPermissionGroupRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type GetPermissionGroupResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The retrieved permission group data.
	PermissionGroup *PermissionGroup `protobuf:"bytes,1,opt,name=permission_group,json=permissionGroup,proto3" json:"permission_group,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetPermissionGroupResponse) Reset() {
	*x = GetPermissionGroupResponse{}
	mi := &file_identity_permission_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPermissionGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPermissionGroupResponse) ProtoMessage() {}

func (x *GetPermissionGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_identity_permission_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPermissionGroupResponse.ProtoReflect.Descriptor instead.
func (*GetPermissionGroupResponse) Descriptor() ([]byte, []int) {
	return file_identity_permission_proto_rawDescGZIP(), []int{6}
}

func (x *GetPermissionGroupResponse) GetPermissionGroup() *PermissionGroup {
	if x != nil {
		return x.PermissionGroup
	}
	return nil
}

type UpdatePermissionGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The permission group information to update.
	// Note:Only the fields that are set will be updated.
	PermissionGroup *PermissionGroup `protobuf:"bytes,1,opt,name=permission_group,json=permissionGroup,proto3" json:"permission_group,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdatePermissionGroupRequest) Reset() {
	*x = UpdatePermissionGroupRequest{}
	mi := &file_identity_permission_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePermissionGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePermissionGroupRequest) ProtoMessage() {}

func (x *UpdatePermissionGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_identity_permission_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePermissionGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdatePermissionGroupRequest) Descriptor() ([]byte, []int) {
	return file_identity_permission_proto_rawDescGZIP(), []int{7}
}

func (x *UpdatePermissionGroupRequest) GetPermissionGroup() *PermissionGroup {
	if x != nil {
		return x.PermissionGroup
	}
	return nil
}

type UpdatePermissionGroupResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the permission group was successfully updated.
	Success       bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePermissionGroupResponse) Reset() {
	*x = UpdatePermissionGroupResponse{}
	mi := &file_identity_permission_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePermissionGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePermissionGroupResponse) ProtoMessage() {}

func (x *UpdatePermissionGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_identity_permission_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePermissionGroupResponse.ProtoReflect.Descriptor instead.
func (*UpdatePermissionGroupResponse) Descriptor() ([]byte, []int) {
	return file_identity_permission_proto_rawDescGZIP(), []int{8}
}

func (x *UpdatePermissionGroupResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DeletePermissionGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the permission group to delete.
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// The unique identifier of the business.
	BusinessUid   string `protobuf:"bytes,2,opt,name=business_uid,json=businessUid,proto3" json:"business_uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeletePermissionGroupRequest) Reset() {
	*x = DeletePermissionGroupRequest{}
	mi := &file_identity_permission_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePermissionGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePermissionGroupRequest) ProtoMessage() {}

func (x *DeletePermissionGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_identity_permission_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePermissionGroupRequest.ProtoReflect.Descriptor instead.
func (*DeletePermissionGroupRequest) Descriptor() ([]byte, []int) {
	return file_identity_permission_proto_rawDescGZIP(), []int{9}
}

func (x *DeletePermissionGroupRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DeletePermissionGroupRequest) GetBusinessUid() string {
	if x != nil {
		return x.BusinessUid
	}
	return ""
}

type DeletePermissionGroupResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the permission group was successfully deleted.
	Success       bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeletePermissionGroupResponse) Reset() {
	*x = DeletePermissionGroupResponse{}
	mi := &file_identity_permission_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePermissionGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePermissionGroupResponse) ProtoMessage() {}

func (x *DeletePermissionGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_identity_permission_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePermissionGroupResponse.ProtoReflect.Descriptor instead.
func (*DeletePermissionGroupResponse) Descriptor() ([]byte, []int) {
	return file_identity_permission_proto_rawDescGZIP(), []int{10}
}

func (x *DeletePermissionGroupResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetUserPermissionsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the user to retrieve.
	UserUid       string `protobuf:"bytes,1,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserPermissionsRequest) Reset() {
	*x = GetUserPermissionsRequest{}
	mi := &file_identity_permission_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPermissionsRequest) ProtoMessage() {}

func (x *GetUserPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_identity_permission_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPermissionsRequest.ProtoReflect.Descriptor instead.
func (*GetUserPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_identity_permission_proto_rawDescGZIP(), []int{11}
}

func (x *GetUserPermissionsRequest) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

type GetUserPermissionsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The permissions that the user has.
	UserPermissions []*UserPermission `protobuf:"bytes,1,rep,name=user_permissions,json=userPermissions,proto3" json:"user_permissions,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetUserPermissionsResponse) Reset() {
	*x = GetUserPermissionsResponse{}
	mi := &file_identity_permission_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPermissionsResponse) ProtoMessage() {}

func (x *GetUserPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_identity_permission_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPermissionsResponse.ProtoReflect.Descriptor instead.
func (*GetUserPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_identity_permission_proto_rawDescGZIP(), []int{12}
}

func (x *GetUserPermissionsResponse) GetUserPermissions() []*UserPermission {
	if x != nil {
		return x.UserPermissions
	}
	return nil
}

type RemoveUserPermissionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the user.
	UserUid string `protobuf:"bytes,1,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	// The unique identifier of the permission group.
	PermissionGroupUid string `protobuf:"bytes,2,opt,name=permission_group_uid,json=permissionGroupUid,proto3" json:"permission_group_uid,omitempty"`
	// The unique identifier of the resource.
	ResourceUid   string `protobuf:"bytes,3,opt,name=resource_uid,json=resourceUid,proto3" json:"resource_uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveUserPermissionRequest) Reset() {
	*x = RemoveUserPermissionRequest{}
	mi := &file_identity_permission_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveUserPermissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserPermissionRequest) ProtoMessage() {}

func (x *RemoveUserPermissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_identity_permission_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserPermissionRequest.ProtoReflect.Descriptor instead.
func (*RemoveUserPermissionRequest) Descriptor() ([]byte, []int) {
	return file_identity_permission_proto_rawDescGZIP(), []int{13}
}

func (x *RemoveUserPermissionRequest) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *RemoveUserPermissionRequest) GetPermissionGroupUid() string {
	if x != nil {
		return x.PermissionGroupUid
	}
	return ""
}

func (x *RemoveUserPermissionRequest) GetResourceUid() string {
	if x != nil {
		return x.ResourceUid
	}
	return ""
}

type RemoveUserPermissionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the user was successfully removed from the permission group.
	Success       bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveUserPermissionResponse) Reset() {
	*x = RemoveUserPermissionResponse{}
	mi := &file_identity_permission_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveUserPermissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserPermissionResponse) ProtoMessage() {}

func (x *RemoveUserPermissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_identity_permission_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserPermissionResponse.ProtoReflect.Descriptor instead.
func (*RemoveUserPermissionResponse) Descriptor() ([]byte, []int) {
	return file_identity_permission_proto_rawDescGZIP(), []int{14}
}

func (x *RemoveUserPermissionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type AddUserPermissionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the user.
	UserUid string `protobuf:"bytes,1,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	// The unique identifier of the permission group.
	PermissionGroupUid string `protobuf:"bytes,2,opt,name=permission_group_uid,json=permissionGroupUid,proto3" json:"permission_group_uid,omitempty"`
	// The unique identifier of the resource.
	ResourceUid   string `protobuf:"bytes,3,opt,name=resource_uid,json=resourceUid,proto3" json:"resource_uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddUserPermissionRequest) Reset() {
	*x = AddUserPermissionRequest{}
	mi := &file_identity_permission_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUserPermissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserPermissionRequest) ProtoMessage() {}

func (x *AddUserPermissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_identity_permission_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserPermissionRequest.ProtoReflect.Descriptor instead.
func (*AddUserPermissionRequest) Descriptor() ([]byte, []int) {
	return file_identity_permission_proto_rawDescGZIP(), []int{15}
}

func (x *AddUserPermissionRequest) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *AddUserPermissionRequest) GetPermissionGroupUid() string {
	if x != nil {
		return x.PermissionGroupUid
	}
	return ""
}

func (x *AddUserPermissionRequest) GetResourceUid() string {
	if x != nil {
		return x.ResourceUid
	}
	return ""
}

type AddUserPermissionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the user was successfully added to the permission group.
	Success       bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddUserPermissionResponse) Reset() {
	*x = AddUserPermissionResponse{}
	mi := &file_identity_permission_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUserPermissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserPermissionResponse) ProtoMessage() {}

func (x *AddUserPermissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_identity_permission_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserPermissionResponse.ProtoReflect.Descriptor instead.
func (*AddUserPermissionResponse) Descriptor() ([]byte, []int) {
	return file_identity_permission_proto_rawDescGZIP(), []int{16}
}

func (x *AddUserPermissionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetBusinessPermissionGroupsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the business to retrieve.
	BusinessUid   string `protobuf:"bytes,1,opt,name=business_uid,json=businessUid,proto3" json:"business_uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBusinessPermissionGroupsRequest) Reset() {
	*x = GetBusinessPermissionGroupsRequest{}
	mi := &file_identity_permission_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBusinessPermissionGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessPermissionGroupsRequest) ProtoMessage() {}

func (x *GetBusinessPermissionGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_identity_permission_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessPermissionGroupsRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessPermissionGroupsRequest) Descriptor() ([]byte, []int) {
	return file_identity_permission_proto_rawDescGZIP(), []int{17}
}

func (x *GetBusinessPermissionGroupsRequest) GetBusinessUid() string {
	if x != nil {
		return x.BusinessUid
	}
	return ""
}

type GetBusinessPermissionGroupsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The permission groups that the business has.
	PermissionGroups []*PermissionGroup `protobuf:"bytes,1,rep,name=permission_groups,json=permissionGroups,proto3" json:"permission_groups,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetBusinessPermissionGroupsResponse) Reset() {
	*x = GetBusinessPermissionGroupsResponse{}
	mi := &file_identity_permission_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBusinessPermissionGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessPermissionGroupsResponse) ProtoMessage() {}

func (x *GetBusinessPermissionGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_identity_permission_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessPermissionGroupsResponse.ProtoReflect.Descriptor instead.
func (*GetBusinessPermissionGroupsResponse) Descriptor() ([]byte, []int) {
	return file_identity_permission_proto_rawDescGZIP(), []int{18}
}

func (x *GetBusinessPermissionGroupsResponse) GetPermissionGroups() []*PermissionGroup {
	if x != nil {
		return x.PermissionGroups
	}
	return nil
}

type CheckPermissionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the user.
	UserUid string `protobuf:"bytes,1,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	// The unique identifier of the resource.
	ResourceUid string `protobuf:"bytes,3,opt,name=resource_uid,json=resourceUid,proto3" json:"resource_uid,omitempty"`
	// The permission to check.
	Permission    *Permission `protobuf:"bytes,4,opt,name=permission,proto3" json:"permission,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckPermissionRequest) Reset() {
	*x = CheckPermissionRequest{}
	mi := &file_identity_permission_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckPermissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPermissionRequest) ProtoMessage() {}

func (x *CheckPermissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_identity_permission_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPermissionRequest.ProtoReflect.Descriptor instead.
func (*CheckPermissionRequest) Descriptor() ([]byte, []int) {
	return file_identity_permission_proto_rawDescGZIP(), []int{19}
}

func (x *CheckPermissionRequest) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *CheckPermissionRequest) GetResourceUid() string {
	if x != nil {
		return x.ResourceUid
	}
	return ""
}

func (x *CheckPermissionRequest) GetPermission() *Permission {
	if x != nil {
		return x.Permission
	}
	return nil
}

type CheckPermissionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the user has the permission.
	HasPermission bool `protobuf:"varint,1,opt,name=has_permission,json=hasPermission,proto3" json:"has_permission,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckPermissionResponse) Reset() {
	*x = CheckPermissionResponse{}
	mi := &file_identity_permission_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckPermissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPermissionResponse) ProtoMessage() {}

func (x *CheckPermissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_identity_permission_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPermissionResponse.ProtoReflect.Descriptor instead.
func (*CheckPermissionResponse) Descriptor() ([]byte, []int) {
	return file_identity_permission_proto_rawDescGZIP(), []int{20}
}

func (x *CheckPermissionResponse) GetHasPermission() bool {
	if x != nil {
		return x.HasPermission
	}
	return false
}

var File_identity_permission_proto protoreflect.FileDescriptor

var file_identity_permission_proto_rawDesc = string([]byte{
	0x0a, 0x19, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6b, 0x61, 0x72,
	0x69, 0x62, 0x75, 0x2e, 0x73, 0x61, 0x62, 0x69, 0x74, 0x6f, 0x75, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x22, 0xf0, 0x01, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6b, 0x61, 0x72, 0x69, 0x62, 0x75, 0x2e, 0x73, 0x61, 0x62,
	0x69, 0x74, 0x6f, 0x75, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x06, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6b, 0x61, 0x72,
	0x69, 0x62, 0x75, 0x2e, 0x73, 0x61, 0x62, 0x69, 0x74, 0x6f, 0x75, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x54, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6b, 0x61, 0x72, 0x69, 0x62,
	0x75, 0x2e, 0x73, 0x61, 0x62, 0x69, 0x74, 0x6f, 0x75, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x61, 0x72,
	0x69, 0x62, 0x75, 0x2e, 0x73, 0x61, 0x62, 0x69, 0x74, 0x6f, 0x75, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x14,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x12, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x55, 0x69, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x75, 0x69, 0x64, 0x22,
	0xee, 0x01, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x45, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x61, 0x72, 0x69, 0x62, 0x75, 0x2e, 0x73,
	0x61, 0x62, 0x69, 0x74, 0x6f, 0x75, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64,
	0x22, 0x73, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x53, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x61, 0x72,
	0x69, 0x62, 0x75, 0x2e, 0x73, 0x61, 0x62, 0x69, 0x74, 0x6f, 0x75, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x31, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x71, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6b, 0x61, 0x72, 0x69, 0x62, 0x75, 0x2e, 0x73, 0x61, 0x62, 0x69, 0x74, 0x6f, 0x75,
	0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x73, 0x0a, 0x1c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x10, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x61, 0x72, 0x69, 0x62, 0x75, 0x2e, 0x73, 0x61,
	0x62, 0x69, 0x74, 0x6f, 0x75, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0f,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22,
	0x39, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x53, 0x0a, 0x1c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x69, 0x64, 0x22,
	0x39, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x36, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x69, 0x64, 0x22, 0x70, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x61, 0x72,
	0x69, 0x62, 0x75, 0x2e, 0x73, 0x61, 0x62, 0x69, 0x74, 0x6f, 0x75, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x55, 0x69, 0x64, 0x22, 0x38, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x8a,
	0x01, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x69, 0x64, 0x22, 0x35, 0x0a, 0x19, 0x41,
	0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0x47, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x69, 0x64, 0x22, 0x7c, 0x0a, 0x23, 0x47,
	0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x55, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6b, 0x61, 0x72, 0x69, 0x62, 0x75, 0x2e, 0x73, 0x61, 0x62, 0x69, 0x74, 0x6f, 0x75, 0x2e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x16, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55,
	0x69, 0x64, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x61, 0x72, 0x69, 0x62, 0x75, 0x2e,
	0x73, 0x61, 0x62, 0x69, 0x74, 0x6f, 0x75, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x40, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2a, 0xc5, 0x01, 0x0a, 0x14, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x21,
	0x0a, 0x1d, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10,
	0x04, 0x2a, 0x8d, 0x01, 0x0a, 0x16, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x24,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x22, 0x0a,
	0x1e, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10,
	0x02, 0x2a, 0xe1, 0x02, 0x0a, 0x14, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x53,
	0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x45, 0x52,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x22,
	0x0a, 0x1e, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x45,
	0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x07, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x45, 0x52, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x10, 0x08, 0x32, 0xd1, 0x09, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x35, 0x2e, 0x6b, 0x61, 0x72, 0x69, 0x62, 0x75, 0x2e, 0x73,
	0x61, 0x62, 0x69, 0x74, 0x6f, 0x75, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6b,
	0x61, 0x72, 0x69, 0x62, 0x75, 0x2e, 0x73, 0x61, 0x62, 0x69, 0x74, 0x6f, 0x75, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x32, 0x2e, 0x6b,
	0x61, 0x72, 0x69, 0x62, 0x75, 0x2e, 0x73, 0x61, 0x62, 0x69, 0x74, 0x6f, 0x75, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x6b, 0x61, 0x72, 0x69, 0x62, 0x75, 0x2e, 0x73, 0x61, 0x62, 0x69, 0x74, 0x6f,
	0x75, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x35, 0x2e, 0x6b, 0x61, 0x72, 0x69, 0x62, 0x75, 0x2e, 0x73, 0x61, 0x62, 0x69, 0x74,
	0x6f, 0x75, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6b, 0x61, 0x72, 0x69, 0x62,
	0x75, 0x2e, 0x73, 0x61, 0x62, 0x69, 0x74, 0x6f, 0x75, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x35, 0x2e, 0x6b,
	0x61, 0x72, 0x69, 0x62, 0x75, 0x2e, 0x73, 0x61, 0x62, 0x69, 0x74, 0x6f, 0x75, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6b, 0x61, 0x72, 0x69, 0x62, 0x75, 0x2e, 0x73, 0x61, 0x62,
	0x69, 0x74, 0x6f, 0x75, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x32, 0x2e, 0x6b, 0x61, 0x72, 0x69, 0x62, 0x75, 0x2e, 0x73, 0x61, 0x62,
	0x69, 0x74, 0x6f, 0x75, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6b, 0x61, 0x72, 0x69, 0x62, 0x75,
	0x2e, 0x73, 0x61, 0x62, 0x69, 0x74, 0x6f, 0x75, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85,
	0x01, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x6b, 0x61, 0x72, 0x69, 0x62, 0x75,
	0x2e, 0x73, 0x61, 0x62, 0x69, 0x74, 0x6f, 0x75, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x6b, 0x61, 0x72, 0x69, 0x62, 0x75, 0x2e, 0x73, 0x61, 0x62, 0x69, 0x74, 0x6f, 0x75, 0x2e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x6b, 0x61,
	0x72, 0x69, 0x62, 0x75, 0x2e, 0x73, 0x61, 0x62, 0x69, 0x74, 0x6f, 0x75, 0x2e, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32,
	0x2e, 0x6b, 0x61, 0x72, 0x69, 0x62, 0x75, 0x2e, 0x73, 0x61, 0x62, 0x69, 0x74, 0x6f, 0x75, 0x2e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x9a, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x3b, 0x2e, 0x6b, 0x61, 0x72, 0x69, 0x62, 0x75, 0x2e, 0x73, 0x61,
	0x62, 0x69, 0x74, 0x6f, 0x75, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3c, 0x2e, 0x6b, 0x61, 0x72, 0x69, 0x62, 0x75, 0x2e, 0x73, 0x61, 0x62, 0x69, 0x74,
	0x6f, 0x75, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x76, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x6b, 0x61, 0x72, 0x69, 0x62, 0x75, 0x2e, 0x73, 0x61,
	0x62, 0x69, 0x74, 0x6f, 0x75, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6b, 0x61, 0x72, 0x69, 0x62, 0x75, 0x2e, 0x73,
	0x61, 0x62, 0x69, 0x74, 0x6f, 0x75, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0e, 0x5a, 0x0c, 0x72, 0x70, 0x63,
	0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_identity_permission_proto_rawDescOnce sync.Once
	file_identity_permission_proto_rawDescData []byte
)

func file_identity_permission_proto_rawDescGZIP() []byte {
	file_identity_permission_proto_rawDescOnce.Do(func() {
		file_identity_permission_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_identity_permission_proto_rawDesc), len(file_identity_permission_proto_rawDesc)))
	})
	return file_identity_permission_proto_rawDescData
}

var file_identity_permission_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_identity_permission_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_identity_permission_proto_goTypes = []any{
	(PermissionActionType)(0),                   // 0: karibu.sabitou.identity.PermissionActionType
	(PermissionResourceType)(0),                 // 1: karibu.sabitou.identity.PermissionResourceType
	(PermissionEntityType)(0),                   // 2: karibu.sabitou.identity.PermissionEntityType
	(*Permission)(nil),                          // 3: karibu.sabitou.identity.Permission
	(*UserPermission)(nil),                      // 4: karibu.sabitou.identity.UserPermission
	(*PermissionGroup)(nil),                     // 5: karibu.sabitou.identity.PermissionGroup
	(*CreatePermissionGroupRequest)(nil),        // 6: karibu.sabitou.identity.CreatePermissionGroupRequest
	(*CreatePermissionGroupResponse)(nil),       // 7: karibu.sabitou.identity.CreatePermissionGroupResponse
	(*GetPermissionGroupRequest)(nil),           // 8: karibu.sabitou.identity.GetPermissionGroupRequest
	(*GetPermissionGroupResponse)(nil),          // 9: karibu.sabitou.identity.GetPermissionGroupResponse
	(*UpdatePermissionGroupRequest)(nil),        // 10: karibu.sabitou.identity.UpdatePermissionGroupRequest
	(*UpdatePermissionGroupResponse)(nil),       // 11: karibu.sabitou.identity.UpdatePermissionGroupResponse
	(*DeletePermissionGroupRequest)(nil),        // 12: karibu.sabitou.identity.DeletePermissionGroupRequest
	(*DeletePermissionGroupResponse)(nil),       // 13: karibu.sabitou.identity.DeletePermissionGroupResponse
	(*GetUserPermissionsRequest)(nil),           // 14: karibu.sabitou.identity.GetUserPermissionsRequest
	(*GetUserPermissionsResponse)(nil),          // 15: karibu.sabitou.identity.GetUserPermissionsResponse
	(*RemoveUserPermissionRequest)(nil),         // 16: karibu.sabitou.identity.RemoveUserPermissionRequest
	(*RemoveUserPermissionResponse)(nil),        // 17: karibu.sabitou.identity.RemoveUserPermissionResponse
	(*AddUserPermissionRequest)(nil),            // 18: karibu.sabitou.identity.AddUserPermissionRequest
	(*AddUserPermissionResponse)(nil),           // 19: karibu.sabitou.identity.AddUserPermissionResponse
	(*GetBusinessPermissionGroupsRequest)(nil),  // 20: karibu.sabitou.identity.GetBusinessPermissionGroupsRequest
	(*GetBusinessPermissionGroupsResponse)(nil), // 21: karibu.sabitou.identity.GetBusinessPermissionGroupsResponse
	(*CheckPermissionRequest)(nil),              // 22: karibu.sabitou.identity.CheckPermissionRequest
	(*CheckPermissionResponse)(nil),             // 23: karibu.sabitou.identity.CheckPermissionResponse
}
var file_identity_permission_proto_depIdxs = []int32{
	0,  // 0: karibu.sabitou.identity.Permission.action:type_name -> karibu.sabitou.identity.PermissionActionType
	2,  // 1: karibu.sabitou.identity.Permission.entity:type_name -> karibu.sabitou.identity.PermissionEntityType
	1,  // 2: karibu.sabitou.identity.Permission.resource_type:type_name -> karibu.sabitou.identity.PermissionResourceType
	3,  // 3: karibu.sabitou.identity.UserPermission.permissions:type_name -> karibu.sabitou.identity.Permission
	3,  // 4: karibu.sabitou.identity.PermissionGroup.permissions:type_name -> karibu.sabitou.identity.Permission
	5,  // 5: karibu.sabitou.identity.CreatePermissionGroupRequest.permission_group:type_name -> karibu.sabitou.identity.PermissionGroup
	5,  // 6: karibu.sabitou.identity.GetPermissionGroupResponse.permission_group:type_name -> karibu.sabitou.identity.PermissionGroup
	5,  // 7: karibu.sabitou.identity.UpdatePermissionGroupRequest.permission_group:type_name -> karibu.sabitou.identity.PermissionGroup
	4,  // 8: karibu.sabitou.identity.GetUserPermissionsResponse.user_permissions:type_name -> karibu.sabitou.identity.UserPermission
	5,  // 9: karibu.sabitou.identity.GetBusinessPermissionGroupsResponse.permission_groups:type_name -> karibu.sabitou.identity.PermissionGroup
	3,  // 10: karibu.sabitou.identity.CheckPermissionRequest.permission:type_name -> karibu.sabitou.identity.Permission
	6,  // 11: karibu.sabitou.identity.PermissionService.CreatePermissionGroup:input_type -> karibu.sabitou.identity.CreatePermissionGroupRequest
	8,  // 12: karibu.sabitou.identity.PermissionService.GetPermissionGroup:input_type -> karibu.sabitou.identity.GetPermissionGroupRequest
	10, // 13: karibu.sabitou.identity.PermissionService.UpdatePermissionGroup:input_type -> karibu.sabitou.identity.UpdatePermissionGroupRequest
	12, // 14: karibu.sabitou.identity.PermissionService.DeletePermissionGroup:input_type -> karibu.sabitou.identity.DeletePermissionGroupRequest
	14, // 15: karibu.sabitou.identity.PermissionService.GetUserPermissions:input_type -> karibu.sabitou.identity.GetUserPermissionsRequest
	16, // 16: karibu.sabitou.identity.PermissionService.RemoveUserPermission:input_type -> karibu.sabitou.identity.RemoveUserPermissionRequest
	18, // 17: karibu.sabitou.identity.PermissionService.AddUserPermission:input_type -> karibu.sabitou.identity.AddUserPermissionRequest
	20, // 18: karibu.sabitou.identity.PermissionService.GetBusinessPermissionGroups:input_type -> karibu.sabitou.identity.GetBusinessPermissionGroupsRequest
	22, // 19: karibu.sabitou.identity.PermissionService.CheckPermission:input_type -> karibu.sabitou.identity.CheckPermissionRequest
	7,  // 20: karibu.sabitou.identity.PermissionService.CreatePermissionGroup:output_type -> karibu.sabitou.identity.CreatePermissionGroupResponse
	9,  // 21: karibu.sabitou.identity.PermissionService.GetPermissionGroup:output_type -> karibu.sabitou.identity.GetPermissionGroupResponse
	11, // 22: karibu.sabitou.identity.PermissionService.UpdatePermissionGroup:output_type -> karibu.sabitou.identity.UpdatePermissionGroupResponse
	13, // 23: karibu.sabitou.identity.PermissionService.DeletePermissionGroup:output_type -> karibu.sabitou.identity.DeletePermissionGroupResponse
	15, // 24: karibu.sabitou.identity.PermissionService.GetUserPermissions:output_type -> karibu.sabitou.identity.GetUserPermissionsResponse
	17, // 25: karibu.sabitou.identity.PermissionService.RemoveUserPermission:output_type -> karibu.sabitou.identity.RemoveUserPermissionResponse
	19, // 26: karibu.sabitou.identity.PermissionService.AddUserPermission:output_type -> karibu.sabitou.identity.AddUserPermissionResponse
	21, // 27: karibu.sabitou.identity.PermissionService.GetBusinessPermissionGroups:output_type -> karibu.sabitou.identity.GetBusinessPermissionGroupsResponse
	23, // 28: karibu.sabitou.identity.PermissionService.CheckPermission:output_type -> karibu.sabitou.identity.CheckPermissionResponse
	20, // [20:29] is the sub-list for method output_type
	11, // [11:20] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_identity_permission_proto_init() }
func file_identity_permission_proto_init() {
	if File_identity_permission_proto != nil {
		return
	}
	file_identity_permission_proto_msgTypes[1].OneofWrappers = []any{}
	file_identity_permission_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_identity_permission_proto_rawDesc), len(file_identity_permission_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_identity_permission_proto_goTypes,
		DependencyIndexes: file_identity_permission_proto_depIdxs,
		EnumInfos:         file_identity_permission_proto_enumTypes,
		MessageInfos:      file_identity_permission_proto_msgTypes,
	}.Build()
	File_identity_permission_proto = out.File
	file_identity_permission_proto_goTypes = nil
	file_identity_permission_proto_depIdxs = nil
}
