// Code generated by protoc-gen-twirp v8.1.3, DO NOT EDIT.
// source: business/supplier.proto

package business

import context "context"
import fmt "fmt"
import http "net/http"
import io "io"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// =========================
// SupplierService Interface
// =========================

type SupplierService interface {
	// Creates a new supplier.
	CreateSupplier(context.Context, *CreateSupplierRequest) (*CreateSupplierResponse, error)

	// Gets a supplier by id.
	GetSupplier(context.Context, *GetSupplierRequest) (*GetSupplierResponse, error)

	// Gets all suppliers of a business.
	GetBusinessSuppliers(context.Context, *GetBusinessSuppliersRequest) (*GetBusinessSuppliersResponse, error)

	// Updates a supplier.
	// Note:Only the fields that are set will be updated.
	UpdateSupplier(context.Context, *UpdateSupplierRequest) (*UpdateSupplierResponse, error)

	// Deletes a supplier.
	DeleteSupplier(context.Context, *DeleteSupplierRequest) (*DeleteSupplierResponse, error)
}

// ===============================
// SupplierService Protobuf Client
// ===============================

type supplierServiceProtobufClient struct {
	client      HTTPClient
	urls        [5]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewSupplierServiceProtobufClient creates a Protobuf client that implements the SupplierService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewSupplierServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) SupplierService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "karibu.sabitou.business", "SupplierService")
	urls := [5]string{
		serviceURL + "CreateSupplier",
		serviceURL + "GetSupplier",
		serviceURL + "GetBusinessSuppliers",
		serviceURL + "UpdateSupplier",
		serviceURL + "DeleteSupplier",
	}

	return &supplierServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *supplierServiceProtobufClient) CreateSupplier(ctx context.Context, in *CreateSupplierRequest) (*CreateSupplierResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.business")
	ctx = ctxsetters.WithServiceName(ctx, "SupplierService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateSupplier")
	caller := c.callCreateSupplier
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateSupplierRequest) (*CreateSupplierResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateSupplierRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateSupplierRequest) when calling interceptor")
					}
					return c.callCreateSupplier(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateSupplierResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateSupplierResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *supplierServiceProtobufClient) callCreateSupplier(ctx context.Context, in *CreateSupplierRequest) (*CreateSupplierResponse, error) {
	out := new(CreateSupplierResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *supplierServiceProtobufClient) GetSupplier(ctx context.Context, in *GetSupplierRequest) (*GetSupplierResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.business")
	ctx = ctxsetters.WithServiceName(ctx, "SupplierService")
	ctx = ctxsetters.WithMethodName(ctx, "GetSupplier")
	caller := c.callGetSupplier
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetSupplierRequest) (*GetSupplierResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSupplierRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSupplierRequest) when calling interceptor")
					}
					return c.callGetSupplier(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetSupplierResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetSupplierResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *supplierServiceProtobufClient) callGetSupplier(ctx context.Context, in *GetSupplierRequest) (*GetSupplierResponse, error) {
	out := new(GetSupplierResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *supplierServiceProtobufClient) GetBusinessSuppliers(ctx context.Context, in *GetBusinessSuppliersRequest) (*GetBusinessSuppliersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.business")
	ctx = ctxsetters.WithServiceName(ctx, "SupplierService")
	ctx = ctxsetters.WithMethodName(ctx, "GetBusinessSuppliers")
	caller := c.callGetBusinessSuppliers
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetBusinessSuppliersRequest) (*GetBusinessSuppliersResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetBusinessSuppliersRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetBusinessSuppliersRequest) when calling interceptor")
					}
					return c.callGetBusinessSuppliers(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetBusinessSuppliersResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetBusinessSuppliersResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *supplierServiceProtobufClient) callGetBusinessSuppliers(ctx context.Context, in *GetBusinessSuppliersRequest) (*GetBusinessSuppliersResponse, error) {
	out := new(GetBusinessSuppliersResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *supplierServiceProtobufClient) UpdateSupplier(ctx context.Context, in *UpdateSupplierRequest) (*UpdateSupplierResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.business")
	ctx = ctxsetters.WithServiceName(ctx, "SupplierService")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateSupplier")
	caller := c.callUpdateSupplier
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdateSupplierRequest) (*UpdateSupplierResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateSupplierRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateSupplierRequest) when calling interceptor")
					}
					return c.callUpdateSupplier(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdateSupplierResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdateSupplierResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *supplierServiceProtobufClient) callUpdateSupplier(ctx context.Context, in *UpdateSupplierRequest) (*UpdateSupplierResponse, error) {
	out := new(UpdateSupplierResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *supplierServiceProtobufClient) DeleteSupplier(ctx context.Context, in *DeleteSupplierRequest) (*DeleteSupplierResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.business")
	ctx = ctxsetters.WithServiceName(ctx, "SupplierService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteSupplier")
	caller := c.callDeleteSupplier
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteSupplierRequest) (*DeleteSupplierResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteSupplierRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteSupplierRequest) when calling interceptor")
					}
					return c.callDeleteSupplier(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteSupplierResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteSupplierResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *supplierServiceProtobufClient) callDeleteSupplier(ctx context.Context, in *DeleteSupplierRequest) (*DeleteSupplierResponse, error) {
	out := new(DeleteSupplierResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ===========================
// SupplierService JSON Client
// ===========================

type supplierServiceJSONClient struct {
	client      HTTPClient
	urls        [5]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewSupplierServiceJSONClient creates a JSON client that implements the SupplierService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewSupplierServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) SupplierService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "karibu.sabitou.business", "SupplierService")
	urls := [5]string{
		serviceURL + "CreateSupplier",
		serviceURL + "GetSupplier",
		serviceURL + "GetBusinessSuppliers",
		serviceURL + "UpdateSupplier",
		serviceURL + "DeleteSupplier",
	}

	return &supplierServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *supplierServiceJSONClient) CreateSupplier(ctx context.Context, in *CreateSupplierRequest) (*CreateSupplierResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.business")
	ctx = ctxsetters.WithServiceName(ctx, "SupplierService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateSupplier")
	caller := c.callCreateSupplier
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateSupplierRequest) (*CreateSupplierResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateSupplierRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateSupplierRequest) when calling interceptor")
					}
					return c.callCreateSupplier(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateSupplierResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateSupplierResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *supplierServiceJSONClient) callCreateSupplier(ctx context.Context, in *CreateSupplierRequest) (*CreateSupplierResponse, error) {
	out := new(CreateSupplierResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *supplierServiceJSONClient) GetSupplier(ctx context.Context, in *GetSupplierRequest) (*GetSupplierResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.business")
	ctx = ctxsetters.WithServiceName(ctx, "SupplierService")
	ctx = ctxsetters.WithMethodName(ctx, "GetSupplier")
	caller := c.callGetSupplier
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetSupplierRequest) (*GetSupplierResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSupplierRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSupplierRequest) when calling interceptor")
					}
					return c.callGetSupplier(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetSupplierResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetSupplierResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *supplierServiceJSONClient) callGetSupplier(ctx context.Context, in *GetSupplierRequest) (*GetSupplierResponse, error) {
	out := new(GetSupplierResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *supplierServiceJSONClient) GetBusinessSuppliers(ctx context.Context, in *GetBusinessSuppliersRequest) (*GetBusinessSuppliersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.business")
	ctx = ctxsetters.WithServiceName(ctx, "SupplierService")
	ctx = ctxsetters.WithMethodName(ctx, "GetBusinessSuppliers")
	caller := c.callGetBusinessSuppliers
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetBusinessSuppliersRequest) (*GetBusinessSuppliersResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetBusinessSuppliersRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetBusinessSuppliersRequest) when calling interceptor")
					}
					return c.callGetBusinessSuppliers(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetBusinessSuppliersResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetBusinessSuppliersResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *supplierServiceJSONClient) callGetBusinessSuppliers(ctx context.Context, in *GetBusinessSuppliersRequest) (*GetBusinessSuppliersResponse, error) {
	out := new(GetBusinessSuppliersResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *supplierServiceJSONClient) UpdateSupplier(ctx context.Context, in *UpdateSupplierRequest) (*UpdateSupplierResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.business")
	ctx = ctxsetters.WithServiceName(ctx, "SupplierService")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateSupplier")
	caller := c.callUpdateSupplier
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdateSupplierRequest) (*UpdateSupplierResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateSupplierRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateSupplierRequest) when calling interceptor")
					}
					return c.callUpdateSupplier(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdateSupplierResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdateSupplierResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *supplierServiceJSONClient) callUpdateSupplier(ctx context.Context, in *UpdateSupplierRequest) (*UpdateSupplierResponse, error) {
	out := new(UpdateSupplierResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *supplierServiceJSONClient) DeleteSupplier(ctx context.Context, in *DeleteSupplierRequest) (*DeleteSupplierResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.business")
	ctx = ctxsetters.WithServiceName(ctx, "SupplierService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteSupplier")
	caller := c.callDeleteSupplier
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteSupplierRequest) (*DeleteSupplierResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteSupplierRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteSupplierRequest) when calling interceptor")
					}
					return c.callDeleteSupplier(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteSupplierResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteSupplierResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *supplierServiceJSONClient) callDeleteSupplier(ctx context.Context, in *DeleteSupplierRequest) (*DeleteSupplierResponse, error) {
	out := new(DeleteSupplierResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ==============================
// SupplierService Server Handler
// ==============================

type supplierServiceServer struct {
	SupplierService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewSupplierServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewSupplierServiceServer(svc SupplierService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &supplierServiceServer{
		SupplierService:  svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *supplierServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *supplierServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// SupplierServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const SupplierServicePathPrefix = "/twirp/karibu.sabitou.business.SupplierService/"

func (s *supplierServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "karibu.sabitou.business")
	ctx = ctxsetters.WithServiceName(ctx, "SupplierService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "karibu.sabitou.business.SupplierService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "CreateSupplier":
		s.serveCreateSupplier(ctx, resp, req)
		return
	case "GetSupplier":
		s.serveGetSupplier(ctx, resp, req)
		return
	case "GetBusinessSuppliers":
		s.serveGetBusinessSuppliers(ctx, resp, req)
		return
	case "UpdateSupplier":
		s.serveUpdateSupplier(ctx, resp, req)
		return
	case "DeleteSupplier":
		s.serveDeleteSupplier(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *supplierServiceServer) serveCreateSupplier(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateSupplierJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateSupplierProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *supplierServiceServer) serveCreateSupplierJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateSupplier")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(CreateSupplierRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SupplierService.CreateSupplier
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateSupplierRequest) (*CreateSupplierResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateSupplierRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateSupplierRequest) when calling interceptor")
					}
					return s.SupplierService.CreateSupplier(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateSupplierResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateSupplierResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreateSupplierResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreateSupplierResponse and nil error while calling CreateSupplier. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *supplierServiceServer) serveCreateSupplierProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateSupplier")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(CreateSupplierRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SupplierService.CreateSupplier
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateSupplierRequest) (*CreateSupplierResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateSupplierRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateSupplierRequest) when calling interceptor")
					}
					return s.SupplierService.CreateSupplier(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateSupplierResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateSupplierResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreateSupplierResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreateSupplierResponse and nil error while calling CreateSupplier. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *supplierServiceServer) serveGetSupplier(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetSupplierJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetSupplierProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *supplierServiceServer) serveGetSupplierJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetSupplier")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetSupplierRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SupplierService.GetSupplier
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetSupplierRequest) (*GetSupplierResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSupplierRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSupplierRequest) when calling interceptor")
					}
					return s.SupplierService.GetSupplier(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetSupplierResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetSupplierResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetSupplierResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetSupplierResponse and nil error while calling GetSupplier. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *supplierServiceServer) serveGetSupplierProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetSupplier")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetSupplierRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SupplierService.GetSupplier
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetSupplierRequest) (*GetSupplierResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSupplierRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSupplierRequest) when calling interceptor")
					}
					return s.SupplierService.GetSupplier(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetSupplierResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetSupplierResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetSupplierResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetSupplierResponse and nil error while calling GetSupplier. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *supplierServiceServer) serveGetBusinessSuppliers(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetBusinessSuppliersJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetBusinessSuppliersProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *supplierServiceServer) serveGetBusinessSuppliersJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetBusinessSuppliers")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetBusinessSuppliersRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SupplierService.GetBusinessSuppliers
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetBusinessSuppliersRequest) (*GetBusinessSuppliersResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetBusinessSuppliersRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetBusinessSuppliersRequest) when calling interceptor")
					}
					return s.SupplierService.GetBusinessSuppliers(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetBusinessSuppliersResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetBusinessSuppliersResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetBusinessSuppliersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetBusinessSuppliersResponse and nil error while calling GetBusinessSuppliers. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *supplierServiceServer) serveGetBusinessSuppliersProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetBusinessSuppliers")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetBusinessSuppliersRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SupplierService.GetBusinessSuppliers
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetBusinessSuppliersRequest) (*GetBusinessSuppliersResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetBusinessSuppliersRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetBusinessSuppliersRequest) when calling interceptor")
					}
					return s.SupplierService.GetBusinessSuppliers(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetBusinessSuppliersResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetBusinessSuppliersResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetBusinessSuppliersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetBusinessSuppliersResponse and nil error while calling GetBusinessSuppliers. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *supplierServiceServer) serveUpdateSupplier(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateSupplierJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateSupplierProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *supplierServiceServer) serveUpdateSupplierJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateSupplier")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UpdateSupplierRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SupplierService.UpdateSupplier
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdateSupplierRequest) (*UpdateSupplierResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateSupplierRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateSupplierRequest) when calling interceptor")
					}
					return s.SupplierService.UpdateSupplier(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdateSupplierResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdateSupplierResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UpdateSupplierResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdateSupplierResponse and nil error while calling UpdateSupplier. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *supplierServiceServer) serveUpdateSupplierProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateSupplier")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UpdateSupplierRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SupplierService.UpdateSupplier
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdateSupplierRequest) (*UpdateSupplierResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateSupplierRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateSupplierRequest) when calling interceptor")
					}
					return s.SupplierService.UpdateSupplier(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdateSupplierResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdateSupplierResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UpdateSupplierResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdateSupplierResponse and nil error while calling UpdateSupplier. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *supplierServiceServer) serveDeleteSupplier(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteSupplierJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteSupplierProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *supplierServiceServer) serveDeleteSupplierJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteSupplier")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(DeleteSupplierRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SupplierService.DeleteSupplier
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteSupplierRequest) (*DeleteSupplierResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteSupplierRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteSupplierRequest) when calling interceptor")
					}
					return s.SupplierService.DeleteSupplier(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteSupplierResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteSupplierResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeleteSupplierResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteSupplierResponse and nil error while calling DeleteSupplier. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *supplierServiceServer) serveDeleteSupplierProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteSupplier")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(DeleteSupplierRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SupplierService.DeleteSupplier
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteSupplierRequest) (*DeleteSupplierResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteSupplierRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteSupplierRequest) when calling interceptor")
					}
					return s.SupplierService.DeleteSupplier(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteSupplierResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteSupplierResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeleteSupplierResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteSupplierResponse and nil error while calling DeleteSupplier. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *supplierServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor1, 0
}

func (s *supplierServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.3"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *supplierServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "karibu.sabitou.business", "SupplierService")
}

var twirpFileDescriptor1 = []byte{
	// 571 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0x9e, 0xd7, 0x76, 0x6b, 0x4f, 0xab, 0x0c, 0xcc, 0xd6, 0x45, 0x85, 0x89, 0x11, 0x09, 0xb4,
	0x01, 0x4a, 0xa5, 0x0e, 0x2e, 0x11, 0x5a, 0x41, 0xda, 0x26, 0xc1, 0x4d, 0xc6, 0x84, 0xc4, 0x4d,
	0xe4, 0x26, 0xd6, 0xb0, 0x9a, 0x26, 0x69, 0xec, 0xb0, 0x07, 0xe0, 0x66, 0x0f, 0xc0, 0xcb, 0xf0,
	0x2a, 0x3c, 0x0d, 0xb2, 0x6b, 0x77, 0xfd, 0x49, 0xaa, 0x22, 0xb8, 0xe0, 0xce, 0xf9, 0xce, 0x77,
	0x8e, 0xbf, 0x73, 0xce, 0x67, 0x05, 0xf6, 0x07, 0x39, 0x67, 0x31, 0xe5, 0xbc, 0xcb, 0xf3, 0x34,
	0x8d, 0x18, 0xcd, 0xdc, 0x34, 0x4b, 0x44, 0x82, 0xf7, 0x87, 0x24, 0x63, 0x83, 0xdc, 0xe5, 0x64,
	0xc0, 0x44, 0x92, 0xbb, 0x86, 0xe7, 0xb8, 0x50, 0xfd, 0xc0, 0xe2, 0x21, 0xde, 0x85, 0x5a, 0x44,
	0x06, 0x34, 0xb2, 0xd1, 0x21, 0x3a, 0x6a, 0x78, 0x93, 0x0f, 0x7c, 0x0f, 0x2a, 0x79, 0x16, 0xd9,
	0x9b, 0x0a, 0x93, 0x47, 0xe7, 0xe7, 0x26, 0xd4, 0x2f, 0x75, 0x6d, 0x15, 0x66, 0xa1, 0x4e, 0x91,
	0x47, 0x8c, 0xa1, 0x1a, 0x93, 0x11, 0xd5, 0x19, 0xea, 0x8c, 0x9f, 0x42, 0x33, 0xa4, 0x3c, 0xc8,
	0x58, 0x2a, 0x58, 0x12, 0xdb, 0x15, 0x19, 0x3a, 0xdf, 0xf0, 0x66, 0xc1, 0x5b, 0x84, 0xf0, 0x31,
	0x58, 0x51, 0x72, 0x9d, 0xf8, 0x23, 0x1a, 0x32, 0xe2, 0xcb, 0xba, 0x55, 0xc5, 0x44, 0x5e, 0x4b,
	0xe2, 0x1f, 0x25, 0x7c, 0xc5, 0x42, 0x49, 0x3d, 0x81, 0x5a, 0xc4, 0xe2, 0x21, 0xb7, 0x6b, 0x87,
	0x95, 0xa3, 0x66, 0xef, 0xc0, 0x2d, 0xe9, 0xce, 0x95, 0xad, 0x79, 0x13, 0x2e, 0x7e, 0x0c, 0x4d,
	0x83, 0xfb, 0x2c, 0xb4, 0xb7, 0x94, 0x42, 0x30, 0xd0, 0x45, 0x88, 0x0f, 0x00, 0x82, 0x8c, 0x12,
	0x41, 0x43, 0x9f, 0x08, 0x7b, 0x5b, 0xc5, 0x1b, 0x1a, 0x39, 0x15, 0x32, 0x9c, 0xa7, 0xa1, 0x09,
	0xd7, 0x27, 0x61, 0x8d, 0x9c, 0x8a, 0xbe, 0x05, 0x2d, 0x7f, 0xa6, 0xa3, 0xfe, 0x7d, 0xd8, 0xf1,
	0xe7, 0xfb, 0x71, 0x7e, 0x20, 0xd8, 0x7b, 0xa7, 0xea, 0x99, 0x09, 0x7a, 0x74, 0x9c, 0x53, 0x2e,
	0xf0, 0x1b, 0xa8, 0x9b, 0x85, 0xa9, 0x69, 0x36, 0x7b, 0x4f, 0x4a, 0x7b, 0x9a, 0xe6, 0x4e, 0x53,
	0xa6, 0xa3, 0xcb, 0xc8, 0x8d, 0xcf, 0x46, 0xe4, 0x7a, 0x32, 0xff, 0xd6, 0xf9, 0xc6, 0x64, 0x74,
	0x1e, 0xb9, 0xb9, 0x90, 0xe8, 0x2d, 0x42, 0x77, 0xb2, 0xa6, 0x5c, 0xe7, 0x39, 0xb4, 0x17, 0x55,
	0xf1, 0x34, 0x89, 0x39, 0x5d, 0xde, 0xaf, 0xf3, 0x0c, 0xf0, 0x19, 0x15, 0x8b, 0xf2, 0x97, 0x79,
	0x9f, 0xe0, 0xc1, 0x1c, 0x4f, 0x17, 0xfc, 0xbb, 0x3e, 0x9d, 0x2e, 0x3c, 0x3c, 0xa3, 0xa2, 0xaf,
	0x19, 0x86, 0xc0, 0xcb, 0x65, 0xf8, 0xf0, 0xa8, 0x38, 0x41, 0xeb, 0x79, 0x0b, 0x0d, 0x53, 0x9c,
	0xdb, 0x48, 0x99, 0x69, 0x0d, 0x41, 0x77, 0x39, 0x6a, 0xa5, 0x57, 0xca, 0x03, 0xff, 0xd5, 0x4a,
	0x3f, 0x43, 0x7b, 0x51, 0xd5, 0xbf, 0xd9, 0xc0, 0x31, 0xec, 0xbd, 0xa7, 0x11, 0x5d, 0x6e, 0x77,
	0x79, 0xf6, 0x3d, 0x68, 0x2f, 0x52, 0xb5, 0x06, 0x1b, 0xb6, 0x79, 0x1e, 0x04, 0x94, 0x73, 0xc5,
	0xaf, 0x7b, 0xe6, 0xb3, 0xf7, 0xab, 0x0a, 0x3b, 0x86, 0x7e, 0x49, 0xb3, 0x6f, 0x2c, 0xa0, 0x78,
	0x0c, 0xd6, 0xbc, 0x3d, 0xb1, 0x5b, 0xaa, 0xb8, 0xf0, 0x75, 0x75, 0xba, 0x6b, 0xf3, 0xb5, 0xc0,
	0xaf, 0xd0, 0x9c, 0x71, 0x2f, 0x7e, 0x51, 0x9a, 0xbf, 0xfc, 0x16, 0x3a, 0x2f, 0xd7, 0x23, 0xeb,
	0x9b, 0xbe, 0x23, 0xd8, 0x2d, 0x72, 0x28, 0x7e, 0xb5, 0xaa, 0x4c, 0xd9, 0x0b, 0xe8, 0xbc, 0xfe,
	0xc3, 0x2c, 0xad, 0x62, 0x0c, 0xd6, 0xbc, 0x5d, 0x56, 0x8c, 0xb8, 0xd0, 0xed, 0x2b, 0x46, 0x5c,
	0xe2, 0xc3, 0x31, 0x58, 0xf3, 0xee, 0x58, 0x71, 0x65, 0xa1, 0xe3, 0x56, 0x5c, 0x59, 0x6c, 0xbb,
	0xbe, 0xf5, 0xa5, 0x95, 0xa5, 0x41, 0xd7, 0xd0, 0x06, 0x5b, 0xea, 0xd7, 0x78, 0xf2, 0x3b, 0x00,
	0x00, 0xff, 0xff, 0xa6, 0x67, 0x06, 0x91, 0x35, 0x07, 0x00, 0x00,
}
